{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"信号\" tag",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/bindsignals.html",
            "url": "https://pyqt5.com/bindsignals.html",
            "title": "三种方式绑定信号槽",
            "date_published": "2019-05-04T08:07:06.000Z",
            "content_html": "<p>网上关于 PyQt5 的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在 PyQt5 中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>\n这几种方式各有各的优点和缺点。</p>\n<span id=\"more\"></span>\n<h2 id=\"方式一\"><a class=\"markdownIt-Anchor\" href=\"#方式一\">#</a> 方式一</h2>\n<p>这个方式是最开始接触设计师的时候知道的，主要是通过控件的 <code>objectName</code>  和 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  提供的连接函数来自动完成注册，<br>\n比如带有按钮的界面 ui 文件转成 py 文件后会发现如下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">self<span class=\"token punctuation\">.</span>pushButton <span class=\"token operator\">=</span> QtWidgets<span class=\"token punctuation\">.</span>QPushButton<span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span>QtCore<span class=\"token punctuation\">.</span>QRect<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setObjectName<span class=\"token punctuation\">(</span><span class=\"token string\">\"pushButton\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 通过这里自动完成连接信号槽</span>\nQtCore<span class=\"token punctuation\">.</span>QMetaObject<span class=\"token punctuation\">.</span>connectSlotsByName<span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时只需要继承该 UI 文件类然后增加如下方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token decorator annotation punctuation\">@pyqtSlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里解释一下， <code>@pyqtSlot()</code>  装饰器把函数 <code>on_pushButton_clicked</code>  包装为一个槽函数，<br>\n而 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  这句代码的意思就是自动去寻找满足的槽函数</p>\n<p><font color=red>注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足 <code>on_控件的objectName_控件的信号</code> 这样下划线连接起来的函数名才能被识别，<br>\n比如按钮的点击： <code>on_pushButton_clicked</code> 、勾选框的选中： <code>on_checkbox_toggled(self, checked)</code></p>\n<h2 id=\"方式二\"><a class=\"markdownIt-Anchor\" href=\"#方式二\">#</a> 方式二</h2>\n<p>这种方式则直接通过代码里调用控件的信号的 <code>connect</code>  方法来进行绑定，比如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 按钮点击函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">doClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绑定点击信号</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>doClicked<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><font color=red>注意： <code>connect</code>  的是函数名字</font>， <code>self.sender()</code>  这句代码是获取信号发送者（比如这里就是得到这个按钮对象），<br>\n用处在于有时候要循环创建一堆按钮</p>\n<h2 id=\"方式三\"><a class=\"markdownIt-Anchor\" href=\"#方式三\">#</a> 方式三</h2>\n<p>通过参数这种方式其实比较特殊，在 PyQt 中大部分存在，但是在 PySide 中则很少，原因是两者的封装方式不同。</p>\n<p>同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token comment\"># 按钮点击函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">doClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\npushButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> clicked<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>doClicked<span class=\"token punctuation\">,</span> minimumHeight<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里可以通过参数（信号名字） = 函数来绑定信号</p>\n<p>同时也可以设置其它参数，比如<br>\n <code>button.setMinimumHeight(40)</code>  也可以像参数里那样设置 <code>minimumHeight=40</code></p>\n",
            "tags": [
                "PyQt",
                "信号"
            ]
        },
        {
            "id": "https://pyqt5.com/runnablesignal_625781186.html",
            "url": "https://pyqt5.com/runnablesignal_625781186.html",
            "title": "QRunnable线程池发信号",
            "date_published": "2019-04-30T07:58:09.000Z",
            "content_html": "<p>因为只有继承 <code>QObject</code>  的类才能有信号和自定义信号，而 <code>QRunnable</code>  并不是继承自 <code>QObject</code> ，也不能用多继承的方式，这里考虑定义个全局的 QObject 变量用来存放一些定义好的可复用的信号。</p>\n<span id=\"more\"></span>\n<p>pools 是  <code>QThreadPool</code>  实例</p>\n<h2 id=\"看图说话\"><a class=\"markdownIt-Anchor\" href=\"#看图说话\">#</a> 看图说话</h2>\n<ol>\n<li><img src=\"/images/runnablesignal1.png\" alt=\"runnablesignal1\"></li>\n<li>定义一个全局信号类<br>\n<img src=\"/images/runnablesignal2.png\" alt=\"runnablesignal2\"></li>\n<li>在 QRunnable 中发送<br>\n<img src=\"/images/runnablesignal3.png\" alt=\"runnablesignal3\"></li>\n</ol>\n",
            "tags": [
                "PyQt",
                "信号",
                "线程"
            ]
        },
        {
            "id": "https://pyqt5.com/issignalconnected.html",
            "url": "https://pyqt5.com/issignalconnected.html",
            "title": "PyQt5判断信号是否连接",
            "date_published": "2019-04-26T14:06:26.000Z",
            "content_html": "<p>在 <code>PyQt</code>  中某些情况下需要取消原来的信号连接，此时需要使用 <code>disconnect</code>  方法，但是在逻辑不严谨的情况下可能会导致多次调用 <code>disconnect</code>  方法而导致报错，当然可以通过 try except 来包裹代码。这里通过  <code>isSignalConnected</code>  来判断信号是否连接。</p>\n<span id=\"more\"></span>\n<p>在 QOjbect 文档中这样写到：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">static const QMetaMethod valueChangedSignal &#x3D; QMetaMethod::fromSignal(&amp;MyObject::valueChanged);\nif (isSignalConnected(valueChangedSignal)) &#123;\n    QByteArray data;\n    data &#x3D; get_the_value();       &#x2F;&#x2F; expensive operation\n    emit valueChanged(data);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过直接传入信号就行了，但是这在 PyQt 中不可行。需要这么做</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年2月24日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: IsSignalConnected\n@description: 判断信号是否连接\n\"\"\"</span>\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span> QVBoxLayout<span class=\"token punctuation\">,</span> QPushButton<span class=\"token punctuation\">,</span> QTextBrowser\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'已连接'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> clicked<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>doTest<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'未连接'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>retView <span class=\"token operator\">=</span> QTextBrowser<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>retView<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> doTest<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>retView<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n        # button1 clicked 是否连接: %s\n        # button2 clicked 是否连接: %s\n        \"\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            self<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked()'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"判断信号是否连接\n        :param obj:        对象\n        :param name:       信号名，如 clicked()\n        \"\"\"</span>\n        index <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indexOfMethod<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> method<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> Window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"效果图\"><a class=\"markdownIt-Anchor\" href=\"#效果图\">#</a> 效果图</h2>\n<p><img src=\"/PyQt/Demo/ScreenShot/IsSignalConnected.png\" alt=\"IsSignalConnected\"></p>\n",
            "tags": [
                "PyQt",
                "信号"
            ]
        }
    ]
}