{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"python\" tag",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/equal_str_width_625781186.html",
            "url": "https://pyqt5.com/equal_str_width_625781186.html",
            "title": "python 判断屏幕等宽字符串的长度 　",
            "date_published": "2019-12-26T11:49:41.000Z",
            "content_html": "<p>判断屏幕等宽字符串的长度？</p>\n<span id=\"more\"></span>\n<p>判断屏幕等宽字符串的长度？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-58b19652011e153a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:41:50  @北京 - BUG 开发 - 黑择明 求指点<br>\n【专家】北京 - BUG 开发 - 黑择明  22:43:04  fontMetrics<br>\n【专家】 <a href=\"https://pyqt.site\">https://pyqt.site</a> (892768447) 22:43:54  QFontMetrics<br>\n【专家】 <a href=\"https://pyqt.site\">https://pyqt.site</a> (892768447) 22:44:09  通过 QLabel.font ().fontMetrics () 得到</p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:52:00<br>\n<a href=\"https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size\">https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size</a><br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-9dc2f83609106252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:53:15  感觉和 fontMetrics 应该是差不多的</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-411570eeadf51793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<p>【专家】北京 - BUG 开发 - 黑择明       (996742224) 11:29:04<br>\nfm = QFontMetrics(QFont())<br>\nfm.width(“qweqwe”)</p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://pyqt5.com/python_statemachine_625781186.html",
            "url": "https://pyqt5.com/python_statemachine_625781186.html",
            "title": "python 状态机模块 　",
            "date_published": "2019-07-17T09:03:33.000Z",
            "content_html": "<p>用状态来取代 if…else 判断。</p>\n<span id=\"more\"></span>\n<p>GUI 涉及到挺多的状态改变，以前一直用 if…else 来判断，最近读了设计模式，发现有个状态模式，随后发现了状态机这个东西 .</p>\n<p>python 的状态机模块挺多的，不过好像很多都不更新了.<br>\n 推荐 2 个状态机模块，但是也没有太深入的使用经验，就跑跑例子，以后有更详细的 pyqt 例子再补上 .</p>\n<p>1:  <code>pip install python-statemachine</code></p>\n<p>官方例子 : <a href=\"https://github.com/fgmacedo/python-statemachine\">https://github.com/fgmacedo/python-statemachine</a></p>\n<p>2. <code>pip install state_machine</code></p>\n<p>官方例子 : <a href=\"https://github.com/jtushman/state_machine\">https://github.com/jtushman/state_machine</a></p>\n<p>1 的 最近一次更新在 6 个月以前，使用 <code>类继承</code> 和 <code>mixin</code>  方式，不过有些地方不如 2 个人性化；</p>\n<p>2 的设计更人性化一些，包括状态改变 <code>before</code>  和  <code>after</code>  , 不过由于是装饰器实现的动态增加属性，有些地方编辑器智能提示可能就靠不上了.</p>\n<p>两者实现实现方式不一样，有兴趣可以读读源码 .</p>\n<ol start=\"3\">\n<li>qt 内置状态机框架</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/amnes1a/article/details/62418196\">https://blog.csdn.net/amnes1a/article/details/62418196</a></p>\n<p><a href=\"https://blog.csdn.net/dongfenghuojian/article/details/78187131\">https://blog.csdn.net/dongfenghuojian/article/details/78187131</a></p>\n<p><a href=\"http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html\">http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html</a> (系列教程)</p>\n",
            "tags": [
                "Python",
                "python 状态机"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqt5_hook_key_625781186.html",
            "url": "https://pyqt5.com/pyqt5_hook_key_625781186.html",
            "title": "在pyqt中使用python全局钩子模块",
            "date_published": "2019-07-06T17:37:22.000Z",
            "content_html": "<p>在某些时候需要为自己的软件增加全局键盘监听，比如软件最小化隐藏后可以通过热键唤醒，又或者比如像 QQ 一样可以全局热键截图。这里介绍几个方法实现在 PyQt 中使用 Python 全局钩子模块实现全局热键功能。</p>\n<span id=\"more\"></span>\n<ol>\n<li><code>pyHook3</code></li>\n</ol>\n<p>安装命令 :  <code>pip install pyhook3</code></p>\n<p><a href=\"https://blog.csdn.net/q871063970/article/details/86648386\">https://blog.csdn.net/q871063970/article/details/86648386</a></p>\n<p>似乎将 pyhook 支持 py3 版本的了？没有太多研究.</p>\n<p>缺点：只支持 win 平台.</p>\n<p>2. <code>keyboard</code>  &amp;  <code>mouse</code></p>\n<p>安装命令:  <code>pip install keyboard mouse</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nfrom PyQt5 import  QtGui, QtWidgets, QtCore\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nimport keyboard\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout &#x3D; QVBoxLayout(self)\n        self.testBtn &#x3D; QPushButton(self)\n        layout.addWidget(self.testBtn)\n\n        keyboard.add_hotkey(&#39;ctrl+shift+x&#39;, lambda:print(&#39;triggered&#39;, &#39;hotkey&#39;))\n        keyboard.add_hotkey(&#39;ctrl+shift+c&#39;, self.abc,args&#x3D;(&#39;aa&#39;,&quot;bb&quot;,&quot;cc&quot;))\n\n    def abc(self,a,b,c):\n        print(a,b,c)\n        \nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app &#x3D; QApplication(sys.argv)\n    w &#x3D; Window()\n    w.show()\n    sys.exit(app.exec_())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更详细例子 : <a href=\"https://github.com/PyQt5/PyQt/blob/63c6376358acb1863313fb5593097e6e0210cad6/Test/%E5%85%A8%E5%B1%80%E7%83%AD%E9%94%AE/HotKey.py\">pyqt 中使用 keyboard 全局热键</a></p>\n<p>优点：跨平台；</p>\n<p>缺点：模块名字取得太差，不容易被发现.</p>\n",
            "tags": [
                "Python",
                "pyqt hook key"
            ]
        },
        {
            "id": "https://pyqt5.com/read_open_source.html",
            "url": "https://pyqt5.com/read_open_source.html",
            "title": "像读文章一样读源码",
            "date_published": "2019-07-06T17:37:22.000Z",
            "content_html": "<p>使用 snoop, 像读文章一样读源码。</p>\n<span id=\"more\"></span>\n<p>不得不说 开源项目没有一个提纲 ， 看起来太操蛋了。问了作者， 作者说 ， 你运行下主函数， 然后慢慢跟 。。。<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-b274b7acaecf49bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>没有目的地概览 ， 不知不觉就追究到细节里面去了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-1304cc87fcd42cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>所以这一篇文章的目地就是 ， 如何在没有提纲的情况下 ， 能更好的只关注流程 ， 而不是细节 。</p>\n<p>开始 ：</p>\n<ol>\n<li>python DEBUG 模块介绍 :<br>\n　前段时间看过挺多文章提到 pysoonper 这个调试模块，有兴趣的可以百度一下.<br>\n 个人尝试了一下，篇幅过大的 DEBUG 不适合用 pysoonper , 因为没有缩进！<br>\n　这几天偶然遇到一个二次封装的模块<a href=\"%5Bhttps://github.com/alexmojaki/snoop%5D(https://github.com/alexmojaki/snoop)\"> snoop</a>, 完美地解决了这个问题.</li>\n<li>操作步骤 :</li>\n</ol>\n<ul>\n<li>1 .  在 <code>eric6.py</code>  的 <code>main()</code>  函数上加 snoop 装饰器；<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-74129f6a6c303b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n<li>2 . 用 vscode 打开  <code>eric6start_.log</code>   文件 (8 层深度 log 文件 34W 行，pycharm 对大文件支持很差);<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-ae946c117a082c24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"log文件\"></li>\n</ul>\n<p>发现可以折叠 ， 但是最大可折叠等级只到 5 级 ， 而且无法对对应等级折叠 ， 有点遗憾 。也许是.log 格式选得不太好， 不知道是否有更好的后缀格式。</p>\n<ul>\n<li>3 . vscode 配置 log 文件关键字高亮；<br>\n安装高亮插件<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-8f6fee2356d7071d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>\n 配置高亮关键字<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-a135fd015409b3da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ul>\n<p>将 <code>call</code>  和 <code>return</code>  给加进去.</p>\n<ul>\n<li>4 . 增加阶段关键字；</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-c39d01a02149e808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"eric6启动阶段\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-aef5704c36824dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>加 <code>#000</code>  是为了方便搜索 。<br>\n需要自己手动折叠 。<br>\n可以发现 每个 <code>splash.showMessage()</code>  都是一个阶段 ， 展开折叠之后就是每个阶段具体执行细节 。</p>\n<hr>\n<h3 id=\"ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢\"><a class=\"markdownIt-Anchor\" href=\"#ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢\">#</a> ps: vscode 阅读 log 文件还是有一些不方便的地方，除了在 2. 中提到的，还有包括关闭文件再打开，折叠状态不会保留，有其他更好的方式 请留言告诉我，谢谢.</h3>\n",
            "tags": [
                "Python",
                "debug",
                "snoop"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "url": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "title": "python 获取子进程print信息 　",
            "date_published": "2019-05-24T06:39:44.000Z",
            "content_html": "<p>在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。</p>\n<span id=\"more\"></span>\n<p>问题所在：</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce793171984f27031.png\" alt=\"image.png\"></p>\n<p>如果模块都由自己开发， 正常操作</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce7933994a0090037.png\" alt=\"image.png\"></p>\n<p>但是因为不能改，所以只能拦截：<br>\n代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pythonPath <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pythonPath_cb<span class=\"token punctuation\">.</span>currentText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> suffix <span class=\"token operator\">==</span> <span class=\"token string\">\"py\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 首次</span>\n    self<span class=\"token punctuation\">.</span>pyCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pythonPath<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">]</span>\n    self<span class=\"token punctuation\">.</span>modifiedReloadPython<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">modifiedReloadPython</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 子进程调用</span>\n    self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pyCommand<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># self.stdoutWorker.p = self.p</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker <span class=\"token operator\">=</span> Worker<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>error_te<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"PYDEBUG:\\n\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>QThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stdout_signal <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> p\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            QApplication<span class=\"token punctuation\">.</span>processEvents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>p <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># line = line.strip()</span>\n                <span class=\"token keyword\">if</span> line <span class=\"token operator\">!=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        info <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "subprocess.Popen",
                "拦截print"
            ]
        },
        {
            "id": "https://pyqt5.com/virtualenvpy_625781186.html",
            "url": "https://pyqt5.com/virtualenvpy_625781186.html",
            "title": "python 拷贝虚拟环境(一) 　",
            "date_published": "2019-05-02T07:21:01.000Z",
            "content_html": "<p>通常来说，刚开始使用 python 的时候都是把包装到全局路径，随着各个项目安装的包越来越多，之后每开始一个项目，pycharm 创建索引的时间都越来越漫长，所以不可避免得开始使用虚拟环境。<br>\n经过一番了解 ，虚拟环境的优点有这些：</p>\n<ul>\n<li>改善 pycharm 索引时间；</li>\n<li>各个项目的库不会冲突；</li>\n<li>理论上虚拟环境可以给同版本的操作系统使用 (未试验过);</li>\n<li>pip freeze &gt; requestment.txt 导出的依赖清晰；</li>\n<li>各个版本的 python 共存；</li>\n<li>…</li>\n</ul>\n<span id=\"more\"></span>\n<p>python 虚拟环境库除了自带的 venv , 还有三方库 <code>virtualenv</code>  , 此外 在 <code>virtualenv</code>  基础上又开发了 <code>virtualenvwrapper(virtualenvwrapper_win)</code>  来管理</p>\n<p>本文基于 <code>virtualenvwrapper</code>  创建的虚拟环境来讲解.</p>\n<pre><code>以下是收集的一些virtualenvwrapper配置教程:\n# linux平台\nhttps://www.cnblogs.com/netfoxman/p/5994697.html\n# window平台\nhttps://blog.csdn.net/shaququ/article/details/54292043  　\nhttps://blog.csdn.net/iaau0908/article/details/54021518\n</code></pre>\n<p>虚拟环境创建多了我们就会发现，<br>\n 有时候使用相同版本的环境，一些常用的库是需要重新安装的，<br>\n 那么能不能创建一个基础环境，默认拥有这些库，然后在这个基础环境上继续安装三方库呢？</p>\n<p>本文经过试验发现是可行的:</p>\n<ol>\n<li>\n<p>创建基础虚拟环境  <code>mkvirtualenv &lt;环境名称&gt; [-p空格python其他版本的解释器路径]</code> .  例如  <code>mkvirtualenv py34 -p c:\\Python34\\python.exe</code></p>\n</li>\n<li>\n<p>切换到虚拟环境 <code>workon py34</code>  , 然后安装一下三方库，然后复制 <code>py34</code>  这个文件夹备份一下；</p>\n</li>\n<li>\n<p>接着复制这个 <code>py34</code>  文件夹，把复制后的文件夹改名为我们需要需要的文件夹例如 <code>new34</code></p>\n</li>\n<li>\n<p>进入 <code>new34文件夹</code> ，用任意编辑器全路径搜索 <code>py34</code>  (替换虚拟环境的路径)</p>\n</li>\n<li>\n<p>删除 <code>new34/Scripts</code>  下的 <code>pip.exe, pip3.exe, pip3.x.exe, easy_install.exe</code>  (因为安装路径硬编码到这里面了，改不了，需要重新安装)</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/douniwan007009/article/details/81463958\">https://blog.csdn.net/douniwan007009/article/details/81463958</a> 按方式二，源码安装  <code>setuptools</code>  后再用 <code>easy_install pip</code>  安装 pip 后，完成；<br>\n 如果有问题，就继续按照方式一的源码安装 pip;</p>\n</li>\n<li>\n<p>在 <code>new34</code>  环境下 用 <code>pip show 三方库</code>  来看一些库的位置，确保正确.</p>\n</li>\n</ol>\n",
            "tags": [
                "Python",
                "virtualenvwrapper",
                "virtualenv"
            ]
        },
        {
            "id": "https://pyqt5.com/calljava.html",
            "url": "https://pyqt5.com/calljava.html",
            "title": "Python调用Java对Excel截图",
            "date_published": "2019-03-12T13:15:06.000Z",
            "content_html": "<p>有的时候会遇到一些奇葩的需求，就是用 Excel 做报表，但是需要对里面的数据进行填充并生成报表图片，发送出去。这里记录用 python 调用 jar 包对 excel 文件进行公式计算和截图，数据填充可以用 xlrd 或者 openpyxl</p>\n<span id=\"more\"></span>\n<p>利用 <code>jpype</code>  模块初始化 java 虚拟机加载 jar 包然后执行其中的功能。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年3月12日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: CallJava\n@description: \n\"\"\"</span>\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">import</span> jpype\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token string\">'Irony'</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Workbook <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.Workbook'</span><span class=\"token punctuation\">)</span>\n    ImageFormat <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.ImageFormat'</span><span class=\"token punctuation\">)</span>\n    ImageOrPrintOptions <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'com.aspose.cells.ImageOrPrintOptions'</span><span class=\"token punctuation\">)</span>\n    SheetRender <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.SheetRender'</span><span class=\"token punctuation\">)</span>\n\n    book <span class=\"token operator\">=</span> Workbook<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'data/test.xlsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存为html</span>\n    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'data/index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存为pdf</span>\n    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'data/test.pdf'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 截图</span>\n    imgOptions <span class=\"token operator\">=</span> ImageOrPrintOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># imgOptions.setQuality(100)</span>\n    imgOptions<span class=\"token punctuation\">.</span>setOnePagePerSheet<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 输出图片格式</span>\n<span class=\"token comment\">#     imgOptions.setImageFormat(ImageFormat.getJpeg())</span>\n    imgOptions<span class=\"token punctuation\">.</span>setImageFormat<span class=\"token punctuation\">(</span>ImageFormat<span class=\"token punctuation\">.</span>getPng<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 计算</span>\n    CalculationOptions <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'com.aspose.cells.CalculationOptions'</span><span class=\"token punctuation\">)</span>\n    opt <span class=\"token operator\">=</span> CalculationOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 对Sheet1中的公式进行计算</span>\n    sheet <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>getWorksheets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">)</span>\n    sheet<span class=\"token punctuation\">.</span>calculateFormula<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置区域</span>\n    pageSetup <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span>getPageSetup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 去掉边距</span>\n    pageSetup<span class=\"token punctuation\">.</span>setBottomMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setLeftMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setRightMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setTopMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置要截图的区域(对角线)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setPrintArea<span class=\"token punctuation\">(</span><span class=\"token string\">'A0:C2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Create a SheetRender object for the target sheet</span>\n    sr <span class=\"token operator\">=</span> SheetRender<span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> imgOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> page <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>sr<span class=\"token punctuation\">.</span>getPageCount<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Generate an image for the worksheet</span>\n        sr<span class=\"token punctuation\">.</span>toImage<span class=\"token punctuation\">(</span>\n            page<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%d.png'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># emm这里不知道什么用绝对路径就报错</span>\n    libs <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;&#125;;&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'libs/bcprov-jdk16-146.jar'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'libs/aspose-cells-19.2.jar'</span>\n    <span class=\"token punctuation\">)</span>\n    command <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jpype<span class=\"token punctuation\">.</span>getDefaultJVMPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-ea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmn128m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xms512M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmx512M'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-Djava.class.path=&#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>libs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n    jpype<span class=\"token punctuation\">.</span>startJVM<span class=\"token punctuation\">(</span>jpype<span class=\"token punctuation\">.</span>getDefaultJVMPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-ea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmn128m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xms512M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmx512M'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-Djava.class.path=&#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>libs<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 解决多线程问题</span>\n    jpype<span class=\"token punctuation\">.</span>attachThreadToJVM<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 对excel截图</span>\n    convertToImage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 关闭虚拟机</span>\n    jpype<span class=\"token punctuation\">.</span>shutdownJVM<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'截图完成'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"附件\"><a class=\"markdownIt-Anchor\" href=\"#附件\">#</a> 附件</h2>\n<p><a href=\"/files/%E8%B0%83%E7%94%A8java%E7%94%9F%E6%88%90%E6%8A%A5%E8%A1%A8.7z\">调用 java 生成报表.7z</a></p>\n<p>解压后进入 whls 文件夹安装对应版本的 jpype 包</p>\n<h2 id=\"效果图\"><a class=\"markdownIt-Anchor\" href=\"#效果图\">#</a> 效果图</h2>\n<p><img src=\"/images/calljava.png\" alt=\"calljava\"></p>\n",
            "tags": [
                "Python",
                "截图"
            ]
        },
        {
            "id": "https://pyqt5.com/ffmpeghls.html",
            "url": "https://pyqt5.com/ffmpeghls.html",
            "title": "FFmpeg合成加密HLS记录",
            "date_published": "2019-01-12T11:28:06.000Z",
            "content_html": "<p>记录在某个需求中要求截图并合成加密视频文件，这里采用 FFmpeg 的管道流来实现生成 HLS 加密文件。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年3月4日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n\"\"\"</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> Popen<span class=\"token punctuation\">,</span> PIPE\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n\n<span class=\"token comment\"># p = Popen([r'D:\\soft\\ffmpeg\\bin\\ffmpeg.exe', '-y',</span>\n<span class=\"token comment\">#            '-threads', '2',</span>\n<span class=\"token comment\">#            '-f', 'image2pipe',</span>\n<span class=\"token comment\">#            '-vcodec', 'mjpeg', '-r', '24', '-i', '-',</span>\n<span class=\"token comment\">#            '-vcodec', 'h264', '-r', '24',</span>\n<span class=\"token comment\">#            #            '-encryption_scheme', 'cenc-aes-ctr',</span>\n<span class=\"token comment\">#            #            '-encryption_key', '617D8A125A284DF48E3C6B1866348A3F',</span>\n<span class=\"token comment\">#            #            '-encryption_kid', 'B326F895B6A24CC5A4DC70995728059C',</span>\n<span class=\"token comment\">#            r'F:\\Workspace\\Test\\videos\\video.mp4'], stdin=PIPE)</span>\n\np <span class=\"token operator\">=</span> Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r'D:\\soft\\ffmpeg\\bin\\ffmpeg.exe'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-re'</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 按照实际帧率读取输入文件</span>\n           <span class=\"token string\">'-y'</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 覆盖已存在文件</span>\n           <span class=\"token string\">'-threads'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 线程数量</span>\n           <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image2pipe'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># PIPE图片流</span>\n           <span class=\"token string\">'-vcodec'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mjpeg'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 图片编码</span>\n           <span class=\"token string\">'-r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 帧率</span>\n           <span class=\"token string\">'-i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定输入流为PIPE</span>\n           <span class=\"token string\">'-vcodec'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h264'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 输出编码</span>\n           <span class=\"token string\">'-r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 帧率</span>\n           <span class=\"token string\">'-map'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">#            '-crf','20',     # 降低质量</span>\n           <span class=\"token string\">'-b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'720k'</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 码率</span>\n           <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-codec:v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'libx264'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-vbsf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h264_mp4toannexb'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token comment\"># 指定加密密匙文件</span>\n           <span class=\"token string\">'-hls_key_info_file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r'F:\\Workspace\\Test\\videokey.info'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_time'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_list_size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_wrap'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">#            '-hls_flags', 'single_file',  # 生成单个文件(有bug)</span>\n           <span class=\"token string\">r'F:\\Workspace\\Test\\videos\\playlist.m3u8'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> path <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span><span class=\"token string\">'frames'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rglob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#     print(i, path)</span>\n    p<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Python",
                "FFmpeg",
                "HLS"
            ]
        },
        {
            "id": "https://pyqt5.com/daemonthread.html",
            "url": "https://pyqt5.com/daemonthread.html",
            "title": "多线程之守护线程和阻塞线程",
            "date_published": "2018-10-24T07:51:15.000Z",
            "content_html": "<p>如果你设置一个线程为守护线程，就表示你在说这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。如果你的主线程在退出的时候，不用等待那些子线程完成，那就设置这些线程的 daemon 属性。</p>\n<span id=\"more\"></span>\n<p>即在线程开始（thread.start ()）之前，调用 setDeamon（）函数，设定线程的 daemon 标志。</p>\n<p>（thread.setDaemon (True)）就表示这个线程 “不重要”。</p>\n<p>如果你想等待子线程完成再退出，那就什么都不用做，或者显示地调用 thread.setDaemon (False)，设置 daemon 的值为 false。新的子线程会继承父线程的 daemon 标志。</p>\n<p>整个 Python 会在所有的非守护线程退出后才会结束，即进程中没有非守护线程存在的时候才结束。</p>\n<p>setDaemon () 函数要放在 start 之前设置才行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程开启：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程结束：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程开启：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># t.setDaemon(True)</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程关闭：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 Python 的多线程编程中，在实例代码中经常有 thread1.join () 这样的代码。那么今天咱们用实际代码来解释一下 join 函数的作用。</p>\n<p>join 的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的 join 函数。</p>\n<p>先看看这个：</p>\n<ol>\n<li>阻塞主进程，专注于执行多线程中的程序。</li>\n<li>多线程多 join 的情况下，依次执行各线程的 join 方法，前头一个结束了才能执行后面一个。</li>\n<li>无参数，则等待到该线程结束，才开始执行下一个线程的 join。</li>\n<li>参数 timeout 为线程的阻塞时间，如 timeout=2 就是罩着这个线程 2s 以后，就不管他了，继续执行下面的代码。</li>\n<li>下面的例子是一次阻塞子线程，每个子线程都会等上个子线程 join 结束才会执行，如果注释掉 t.join 则会同时执行 5 个子线程，多线程在做网络访问的时候可以减少等待时间，那么在一个工作流程中可以将访问网络接口的情况做成多线程。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span class=\"token punctuation\">,</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello main start\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Python",
                "线程"
            ]
        },
        {
            "id": "https://pyqt5.com/cgitb.html",
            "url": "https://pyqt5.com/cgitb.html",
            "title": "异常捕获之cgitb模块",
            "date_published": "2018-09-17T15:17:06.000Z",
            "content_html": "<p><code>cgitb</code>  模块为 <code>Python</code>  脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以 HTML 格式展示 cgi 脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。</p>\n<span id=\"more\"></span>\n<h2 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h2>\n<p>当编辑器中无法显示错误信息时，尤其是 <code>PyQt</code> ，可以尝试在 cmd 中运行代码，或者使用此模块来得到错误信息。</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<h3 id=\"cgitbenable\"><a class=\"markdownIt-Anchor\" href=\"#cgitbenable\">#</a> cgitb.enable</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cgitb<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">(</span>display<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> logdir<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数说明</p>\n<ol>\n<li>display 1，发送至浏览器；0， 不发送</li>\n<li>logdir 如果有的话，写到该目录下</li>\n<li>context 显示错误代码周围的代码行数</li>\n<li>format 是否显示为 HTML，除了’html’之外的所有值，都会显示为纯文本</li>\n</ol>\n<h3 id=\"cgitbhandle\"><a class=\"markdownIt-Anchor\" href=\"#cgitbhandle\">#</a> cgitb.handle</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cgitb<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数说明</p>\n<ol>\n<li>如果你想用 cgitb 处理异常，你可以调用这个函数。</li>\n<li>info 应当是含有异常类型、异常值和 traceback 对象的三元组</li>\n<li>如同 sys.exc_info () 返回的那样。如果不提供 info，则从 sys.exc_info 中获取。</li>\n</ol>\n<h2 id=\"如何使用\"><a class=\"markdownIt-Anchor\" href=\"#如何使用\">#</a> 如何使用</h2>\n<p>以下代码放在最开始执行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cgitb\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>excepthook <span class=\"token operator\">=</span> cgitb<span class=\"token punctuation\">.</span>Hook<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "异常"
            ]
        }
    ]
}