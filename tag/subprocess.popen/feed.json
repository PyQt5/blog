{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"subprocess.popen\" tag",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "url": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "title": "python 获取子进程print信息 　",
            "date_published": "2019-05-24T06:39:44.000Z",
            "content_html": "<p>在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。</p>\n<span id=\"more\"></span>\n<p>问题所在：</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce793171984f27031.png\" alt=\"image.png\"></p>\n<p>如果模块都由自己开发， 正常操作</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce7933994a0090037.png\" alt=\"image.png\"></p>\n<p>但是因为不能改，所以只能拦截：<br>\n代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pythonPath <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pythonPath_cb<span class=\"token punctuation\">.</span>currentText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> suffix <span class=\"token operator\">==</span> <span class=\"token string\">\"py\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 首次</span>\n    self<span class=\"token punctuation\">.</span>pyCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pythonPath<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">]</span>\n    self<span class=\"token punctuation\">.</span>modifiedReloadPython<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">modifiedReloadPython</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 子进程调用</span>\n    self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pyCommand<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># self.stdoutWorker.p = self.p</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker <span class=\"token operator\">=</span> Worker<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>error_te<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"PYDEBUG:\\n\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>QThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stdout_signal <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> p\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            QApplication<span class=\"token punctuation\">.</span>processEvents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>p <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># line = line.strip()</span>\n                <span class=\"token keyword\">if</span> line <span class=\"token operator\">!=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        info <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "subprocess.Popen",
                "拦截print"
            ]
        }
    ]
}