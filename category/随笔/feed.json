{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"随笔\" category",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/equal_str_width_625781186.html",
            "url": "https://pyqt5.com/equal_str_width_625781186.html",
            "title": "python 判断屏幕等宽字符串的长度 　",
            "date_published": "2019-12-26T11:49:41.000Z",
            "content_html": "<p>判断屏幕等宽字符串的长度？</p>\n<span id=\"more\"></span>\n<p>判断屏幕等宽字符串的长度？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-58b19652011e153a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:41:50  @北京 - BUG 开发 - 黑择明 求指点<br>\n【专家】北京 - BUG 开发 - 黑择明  22:43:04  fontMetrics<br>\n【专家】 <a href=\"https://pyqt.site\">https://pyqt.site</a> (892768447) 22:43:54  QFontMetrics<br>\n【专家】 <a href=\"https://pyqt.site\">https://pyqt.site</a> (892768447) 22:44:09  通过 QLabel.font ().fontMetrics () 得到</p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:52:00<br>\n<a href=\"https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size\">https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size</a><br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-9dc2f83609106252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>【新手】重庆 - 搬砖 - NoWait 22:53:15  感觉和 fontMetrics 应该是差不多的</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-411570eeadf51793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<p>【专家】北京 - BUG 开发 - 黑择明       (996742224) 11:29:04<br>\nfm = QFontMetrics(QFont())<br>\nfm.width(“qweqwe”)</p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://pyqt5.com/use_pyuic_insteadof_pyside2uic.html",
            "url": "https://pyqt5.com/use_pyuic_insteadof_pyside2uic.html",
            "title": "修改pyuic代替pyside2-uic.",
            "date_published": "2019-12-26T11:49:41.000Z",
            "content_html": "<p>修改 pyuic 代替 pyside2-uic</p>\n<span id=\"more\"></span>\n<p>修改 pyuic 代替 pyside2-uic.</p>\n<p>最近看到挺多人用 pyside2 的 uic 编译 ui 文件有问题 .<br>\n 写个解决办法.</p>\n<p>首先，<br>\n <code>pip install qtpy</code>  ,<br>\n 这个是兼容 pyqt5 和 pyside2 的，无缝转换 .</p>\n<p>然后，<br>\n 修改 pyqt5 的 uic ,</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-2ed1053f322c26a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>最后用 pyuic5 , 生成 Ui_XXX.py 文件 .</p>\n",
            "tags": [
                "PyQt5 PySide2"
            ]
        },
        {
            "id": "https://pyqt5.com/python_statemachine_625781186.html",
            "url": "https://pyqt5.com/python_statemachine_625781186.html",
            "title": "python 状态机模块 　",
            "date_published": "2019-07-17T09:03:33.000Z",
            "content_html": "<p>用状态来取代 if…else 判断。</p>\n<span id=\"more\"></span>\n<p>GUI 涉及到挺多的状态改变，以前一直用 if…else 来判断，最近读了设计模式，发现有个状态模式，随后发现了状态机这个东西 .</p>\n<p>python 的状态机模块挺多的，不过好像很多都不更新了.<br>\n 推荐 2 个状态机模块，但是也没有太深入的使用经验，就跑跑例子，以后有更详细的 pyqt 例子再补上 .</p>\n<p>1:  <code>pip install python-statemachine</code></p>\n<p>官方例子 : <a href=\"https://github.com/fgmacedo/python-statemachine\">https://github.com/fgmacedo/python-statemachine</a></p>\n<p>2. <code>pip install state_machine</code></p>\n<p>官方例子 : <a href=\"https://github.com/jtushman/state_machine\">https://github.com/jtushman/state_machine</a></p>\n<p>1 的 最近一次更新在 6 个月以前，使用 <code>类继承</code> 和 <code>mixin</code>  方式，不过有些地方不如 2 个人性化；</p>\n<p>2 的设计更人性化一些，包括状态改变 <code>before</code>  和  <code>after</code>  , 不过由于是装饰器实现的动态增加属性，有些地方编辑器智能提示可能就靠不上了.</p>\n<p>两者实现实现方式不一样，有兴趣可以读读源码 .</p>\n<ol start=\"3\">\n<li>qt 内置状态机框架</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/amnes1a/article/details/62418196\">https://blog.csdn.net/amnes1a/article/details/62418196</a></p>\n<p><a href=\"https://blog.csdn.net/dongfenghuojian/article/details/78187131\">https://blog.csdn.net/dongfenghuojian/article/details/78187131</a></p>\n<p><a href=\"http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html\">http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html</a> (系列教程)</p>\n",
            "tags": [
                "Python",
                "python 状态机"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqt5_hook_key_625781186.html",
            "url": "https://pyqt5.com/pyqt5_hook_key_625781186.html",
            "title": "在pyqt中使用python全局钩子模块",
            "date_published": "2019-07-06T17:37:22.000Z",
            "content_html": "<p>在某些时候需要为自己的软件增加全局键盘监听，比如软件最小化隐藏后可以通过热键唤醒，又或者比如像 QQ 一样可以全局热键截图。这里介绍几个方法实现在 PyQt 中使用 Python 全局钩子模块实现全局热键功能。</p>\n<span id=\"more\"></span>\n<ol>\n<li><code>pyHook3</code></li>\n</ol>\n<p>安装命令 :  <code>pip install pyhook3</code></p>\n<p><a href=\"https://blog.csdn.net/q871063970/article/details/86648386\">https://blog.csdn.net/q871063970/article/details/86648386</a></p>\n<p>似乎将 pyhook 支持 py3 版本的了？没有太多研究.</p>\n<p>缺点：只支持 win 平台.</p>\n<p>2. <code>keyboard</code>  &amp;  <code>mouse</code></p>\n<p>安装命令:  <code>pip install keyboard mouse</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nfrom PyQt5 import  QtGui, QtWidgets, QtCore\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nimport keyboard\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout &#x3D; QVBoxLayout(self)\n        self.testBtn &#x3D; QPushButton(self)\n        layout.addWidget(self.testBtn)\n\n        keyboard.add_hotkey(&#39;ctrl+shift+x&#39;, lambda:print(&#39;triggered&#39;, &#39;hotkey&#39;))\n        keyboard.add_hotkey(&#39;ctrl+shift+c&#39;, self.abc,args&#x3D;(&#39;aa&#39;,&quot;bb&quot;,&quot;cc&quot;))\n\n    def abc(self,a,b,c):\n        print(a,b,c)\n        \nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app &#x3D; QApplication(sys.argv)\n    w &#x3D; Window()\n    w.show()\n    sys.exit(app.exec_())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更详细例子 : <a href=\"https://github.com/PyQt5/PyQt/blob/63c6376358acb1863313fb5593097e6e0210cad6/Test/%E5%85%A8%E5%B1%80%E7%83%AD%E9%94%AE/HotKey.py\">pyqt 中使用 keyboard 全局热键</a></p>\n<p>优点：跨平台；</p>\n<p>缺点：模块名字取得太差，不容易被发现.</p>\n",
            "tags": [
                "Python",
                "pyqt hook key"
            ]
        },
        {
            "id": "https://pyqt5.com/read_open_source.html",
            "url": "https://pyqt5.com/read_open_source.html",
            "title": "像读文章一样读源码",
            "date_published": "2019-07-06T17:37:22.000Z",
            "content_html": "<p>使用 snoop, 像读文章一样读源码。</p>\n<span id=\"more\"></span>\n<p>不得不说 开源项目没有一个提纲 ， 看起来太操蛋了。问了作者， 作者说 ， 你运行下主函数， 然后慢慢跟 。。。<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-b274b7acaecf49bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>没有目的地概览 ， 不知不觉就追究到细节里面去了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-1304cc87fcd42cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>所以这一篇文章的目地就是 ， 如何在没有提纲的情况下 ， 能更好的只关注流程 ， 而不是细节 。</p>\n<p>开始 ：</p>\n<ol>\n<li>python DEBUG 模块介绍 :<br>\n　前段时间看过挺多文章提到 pysoonper 这个调试模块，有兴趣的可以百度一下.<br>\n 个人尝试了一下，篇幅过大的 DEBUG 不适合用 pysoonper , 因为没有缩进！<br>\n　这几天偶然遇到一个二次封装的模块<a href=\"%5Bhttps://github.com/alexmojaki/snoop%5D(https://github.com/alexmojaki/snoop)\"> snoop</a>, 完美地解决了这个问题.</li>\n<li>操作步骤 :</li>\n</ol>\n<ul>\n<li>1 .  在 <code>eric6.py</code>  的 <code>main()</code>  函数上加 snoop 装饰器；<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-74129f6a6c303b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n<li>2 . 用 vscode 打开  <code>eric6start_.log</code>   文件 (8 层深度 log 文件 34W 行，pycharm 对大文件支持很差);<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-ae946c117a082c24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"log文件\"></li>\n</ul>\n<p>发现可以折叠 ， 但是最大可折叠等级只到 5 级 ， 而且无法对对应等级折叠 ， 有点遗憾 。也许是.log 格式选得不太好， 不知道是否有更好的后缀格式。</p>\n<ul>\n<li>3 . vscode 配置 log 文件关键字高亮；<br>\n安装高亮插件<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-8f6fee2356d7071d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>\n 配置高亮关键字<br>\n<img src=\"https://upload-images.jianshu.io/upload_images/10769157-a135fd015409b3da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ul>\n<p>将 <code>call</code>  和 <code>return</code>  给加进去.</p>\n<ul>\n<li>4 . 增加阶段关键字；</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-c39d01a02149e808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"eric6启动阶段\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-aef5704c36824dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>加 <code>#000</code>  是为了方便搜索 。<br>\n需要自己手动折叠 。<br>\n可以发现 每个 <code>splash.showMessage()</code>  都是一个阶段 ， 展开折叠之后就是每个阶段具体执行细节 。</p>\n<hr>\n<h3 id=\"ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢\"><a class=\"markdownIt-Anchor\" href=\"#ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢\">#</a> ps: vscode 阅读 log 文件还是有一些不方便的地方，除了在 2. 中提到的，还有包括关闭文件再打开，折叠状态不会保留，有其他更好的方式 请留言告诉我，谢谢.</h3>\n",
            "tags": [
                "Python",
                "debug",
                "snoop"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "url": "https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html",
            "title": "python 获取子进程print信息 　",
            "date_published": "2019-05-24T06:39:44.000Z",
            "content_html": "<p>在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。</p>\n<span id=\"more\"></span>\n<p>问题所在：</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce793171984f27031.png\" alt=\"image.png\"></p>\n<p>如果模块都由自己开发， 正常操作</p>\n<p><img src=\"https://i.loli.net/2019/05/24/5ce7933994a0090037.png\" alt=\"image.png\"></p>\n<p>但是因为不能改，所以只能拦截：<br>\n代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pythonPath <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pythonPath_cb<span class=\"token punctuation\">.</span>currentText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> suffix <span class=\"token operator\">==</span> <span class=\"token string\">\"py\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 首次</span>\n    self<span class=\"token punctuation\">.</span>pyCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pythonPath<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">]</span>\n    self<span class=\"token punctuation\">.</span>modifiedReloadPython<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">modifiedReloadPython</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>path_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 子进程调用</span>\n    self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pyCommand<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># self.stdoutWorker.p = self.p</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker <span class=\"token operator\">=</span> Worker<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>error_te<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"PYDEBUG:\\n\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>stdoutWorker<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>QThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stdout_signal <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> p\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            QApplication<span class=\"token punctuation\">.</span>processEvents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>p <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># line = line.strip()</span>\n                <span class=\"token keyword\">if</span> line <span class=\"token operator\">!=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        info <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>stdout_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "subprocess.Popen",
                "拦截print"
            ]
        },
        {
            "id": "https://pyqt5.com/suggesteditor.html",
            "url": "https://pyqt5.com/suggesteditor.html",
            "title": "推荐编辑器LiClipse",
            "date_published": "2019-05-04T10:04:08.000Z",
            "content_html": "<p>关于 Python 的开发编辑器有很多，每个人有每个人的喜好，经常看到很多在问什么编辑器好用，有人推荐 Sublime，有人推荐 Pycharm 等等，这里就不去比较其它编辑器的优缺点了，只谈谈关于 LiClipse 这个编辑器在初级使用阶段的智能提示功能等。开箱即用，支持多种语言，RST，Markdown 和 HTML 编辑器的 HTML 预览。</p>\n<span id=\"more\"></span>\n<p>其实 LiClipse 这个编辑器就是以前的 PyDev 插件的独立版本，基于 Eclipse 编辑器开发，去掉了 Java 的相关开发功能，关于软件的详细说明可以去官网查看： <a href=\"http://www.liclipse.com/\">http://www.liclipse.com/</a></p>\n<p>编辑器只需要少量的配置，打开即可使用，快速自动 import，也可以根据需要安装自己所需的插件，比如 json、svn、主题插件等。个人推荐：适合刚入门的新手使用</p>\n<p>由于新版的 PyQt 和 PyDev 去掉了详细的函数提示，所以 PyQt 的智能提示只有函数和返回值，并没有英文注释，但是以前的比如 PyQt4 的智能提示应该是有详细的英文注释提示。</p>\n<h2 id=\"界面预览\"><a class=\"markdownIt-Anchor\" href=\"#界面预览\">#</a> 界面预览</h2>\n<ol>\n<li>主界面<br>\n<img src=\"/images/editor1.png\" alt=\"editor1\"></li>\n<li>鼠标悬停提示<br>\n<img src=\"/images/editor2.png\" alt=\"editor2\"></li>\n<li>输入提示<br>\n<img src=\"/images/editor3.png\" alt=\"editor3\"></li>\n<li>Git 面板<br>\n<img src=\"/images/editor4.png\" alt=\"editor4\"></li>\n<li>全局搜索（Ctrl + H）<br>\n<img src=\"/images/editor5.png\" alt=\"editor5\"><br>\n<img src=\"/images/editor6.png\" alt=\"editor6\"></li>\n</ol>\n<h2 id=\"自动导包\"><a class=\"markdownIt-Anchor\" href=\"#自动导包\">#</a> 自动导包</h2>\n<p>其实这个功能我是非常喜欢的，通过按下快捷键即可自动寻找包名导入，快捷键 Ctrl + Shift + O</p>\n<p><img src=\"/images/editor_import.png\" alt=\"editor_import\"></p>\n<p>也可以在标红的代码上按下 Ctrl + F1 进行导入</p>\n<p><img src=\"/images/editor_import2.png\" alt=\"editor_import2\"></p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>打开编辑器后首先要配置【Window -&gt; Preferences】的就是 Python 的环境变量，可以同时添加多个 Python 版本</p>\n<p><img src=\"/images/editor_env.png\" alt=\"editor_env\"></p>\n<h2 id=\"tab等设置\"><a class=\"markdownIt-Anchor\" href=\"#tab等设置\">#</a> Tab 等设置</h2>\n<ol>\n<li>Insert spaces for tabs        tab 转空格</li>\n<li>Show line numbers             显示行号</li>\n</ol>\n<p><img src=\"/images/editor_tab.png\" alt=\"editor_tab\"></p>\n<h2 id=\"模版\"><a class=\"markdownIt-Anchor\" href=\"#模版\">#</a> 模版</h2>\n<p>这个功能可以快速插入自己定义好的模版代码，比如  <code>if __name__ == '__main__':</code>  等等，比如我这里配置的创建文件的模版</p>\n<p><img src=\"/images/editor_tpl.png\" alt=\"editor_tpl\"></p>\n<h2 id=\"常用快捷键\"><a class=\"markdownIt-Anchor\" href=\"#常用快捷键\">#</a> 常用快捷键</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">格式化对齐</td>\n<td style=\"text-align:center\">Ctrl + Shift + F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自动导包</td>\n<td style=\"text-align:center\">Ctrl + Shift + O</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">快捷提示</td>\n<td style=\"text-align:center\">Alt + /</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "编辑器"
            ]
        },
        {
            "id": "https://pyqt5.com/virtualenvpy_625781186.html",
            "url": "https://pyqt5.com/virtualenvpy_625781186.html",
            "title": "python 拷贝虚拟环境(一) 　",
            "date_published": "2019-05-02T07:21:01.000Z",
            "content_html": "<p>通常来说，刚开始使用 python 的时候都是把包装到全局路径，随着各个项目安装的包越来越多，之后每开始一个项目，pycharm 创建索引的时间都越来越漫长，所以不可避免得开始使用虚拟环境。<br>\n经过一番了解 ，虚拟环境的优点有这些：</p>\n<ul>\n<li>改善 pycharm 索引时间；</li>\n<li>各个项目的库不会冲突；</li>\n<li>理论上虚拟环境可以给同版本的操作系统使用 (未试验过);</li>\n<li>pip freeze &gt; requestment.txt 导出的依赖清晰；</li>\n<li>各个版本的 python 共存；</li>\n<li>…</li>\n</ul>\n<span id=\"more\"></span>\n<p>python 虚拟环境库除了自带的 venv , 还有三方库 <code>virtualenv</code>  , 此外 在 <code>virtualenv</code>  基础上又开发了 <code>virtualenvwrapper(virtualenvwrapper_win)</code>  来管理</p>\n<p>本文基于 <code>virtualenvwrapper</code>  创建的虚拟环境来讲解.</p>\n<pre><code>以下是收集的一些virtualenvwrapper配置教程:\n# linux平台\nhttps://www.cnblogs.com/netfoxman/p/5994697.html\n# window平台\nhttps://blog.csdn.net/shaququ/article/details/54292043  　\nhttps://blog.csdn.net/iaau0908/article/details/54021518\n</code></pre>\n<p>虚拟环境创建多了我们就会发现，<br>\n 有时候使用相同版本的环境，一些常用的库是需要重新安装的，<br>\n 那么能不能创建一个基础环境，默认拥有这些库，然后在这个基础环境上继续安装三方库呢？</p>\n<p>本文经过试验发现是可行的:</p>\n<ol>\n<li>\n<p>创建基础虚拟环境  <code>mkvirtualenv &lt;环境名称&gt; [-p空格python其他版本的解释器路径]</code> .  例如  <code>mkvirtualenv py34 -p c:\\Python34\\python.exe</code></p>\n</li>\n<li>\n<p>切换到虚拟环境 <code>workon py34</code>  , 然后安装一下三方库，然后复制 <code>py34</code>  这个文件夹备份一下；</p>\n</li>\n<li>\n<p>接着复制这个 <code>py34</code>  文件夹，把复制后的文件夹改名为我们需要需要的文件夹例如 <code>new34</code></p>\n</li>\n<li>\n<p>进入 <code>new34文件夹</code> ，用任意编辑器全路径搜索 <code>py34</code>  (替换虚拟环境的路径)</p>\n</li>\n<li>\n<p>删除 <code>new34/Scripts</code>  下的 <code>pip.exe, pip3.exe, pip3.x.exe, easy_install.exe</code>  (因为安装路径硬编码到这里面了，改不了，需要重新安装)</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/douniwan007009/article/details/81463958\">https://blog.csdn.net/douniwan007009/article/details/81463958</a> 按方式二，源码安装  <code>setuptools</code>  后再用 <code>easy_install pip</code>  安装 pip 后，完成；<br>\n 如果有问题，就继续按照方式一的源码安装 pip;</p>\n</li>\n<li>\n<p>在 <code>new34</code>  环境下 用 <code>pip show 三方库</code>  来看一些库的位置，确保正确.</p>\n</li>\n</ol>\n",
            "tags": [
                "Python",
                "virtualenvwrapper",
                "virtualenv"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqtclient.html",
            "url": "https://pyqt5.com/pyqtclient.html",
            "title": "PyQtClient例子客户端",
            "date_published": "2019-02-02T07:15:06.000Z",
            "content_html": "<p><img src=\"/images/1.gif\" alt=\"1.gif\"> 对本博客所写的项目 PyQt 例子进行一个客户端的编写，客户端主要实现一些动画效果，更换皮肤，运行例子等功能。<img src=\"/images/2.gif\" alt=\"2.gif\"></p>\n<span id=\"more\"></span>\n<h2 id=\"项目地址\"><a class=\"markdownIt-Anchor\" href=\"#项目地址\">#</a> 项目地址</h2>\n<div class=\"github-widget\" data-repo=\"PyQt5/PyQtClient\"></div>\n<h2 id=\"windows客户端下载\"><a class=\"markdownIt-Anchor\" href=\"#windows客户端下载\">#</a> Windows 客户端下载</h2>\n<ol>\n<li><a href=\"https://github.com/PyQt5/PyQtClient/releases/download/1.0.1/PyQtClient-x86-win32-exe.7z\">包含部分例子</a></li>\n<li><a href=\"https://github.com/PyQt5/PyQtClient/releases/download/1.0.1/PyQtClient-x86-win32-exe.7z\">不包含例子</a></li>\n<li><a href=\"https://pan.baidu.com/s/14j9tMqGlAy_8y3067xh-vw\">百度网盘</a> 提取码: nadv</li>\n</ol>\n<h2 id=\"效果图\"><a class=\"markdownIt-Anchor\" href=\"#效果图\">#</a> 效果图</h2>\n<p><img src=\"https://github.com/PyQt5/PyQtClient/raw/master/ScreenShot/PyQtClient.gif\" alt=\"PyQtClient\"></p>\n",
            "tags": [
                "PyQt"
            ]
        }
    ]
}