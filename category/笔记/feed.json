{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"笔记\" category",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/macm1pyqt.html",
            "url": "https://pyqt5.com/macm1pyqt.html",
            "title": "如何在Mac M1上快速安装PyQt5",
            "date_published": "2023-10-07T06:08:06.000Z",
            "content_html": "<p>由于官方并没有在 M1 上编译 PyQt 导致安装存在一些问题。<br>\nM1 上的 Python 不能直接使用 x64 的 PyQt5。但是 M1 上可以运行 x64 的 Python。所以通过安装 x64 的 Python 然后再安装 PyQt5 即可。</p>\n<span id=\"more\"></span>\n<p><strong>1. 安装 Python</strong><br>\n<a href=\"https://www.python.org/ftp/python/3.9.13/python-3.9.13-macosx10.9.pkg\">python-3.9.13-macosx10.9.pkg</a></p>\n<p><strong>2. 勾选自定义同时只勾选安装 pip</strong></p>\n<p><img src=\"/images/macpyqtstep1.png\" alt=\"step1.png\"></p>\n<p><img src=\"/images/macpyqtstep2.png\" alt=\"step1.png\"></p>\n<p><strong>3. 设置 pip 源</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class=\"token function\">install</span> pqi\n/Library/Frameworks/Python.framework/Versions/3.9/bin/pqi use tuna<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>4. 安装 PyQt5</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class=\"token function\">install</span> PyQt5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>5. 测试</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Library/Frameworks/Python.framework/Versions/3.9/bin/python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/images/macpyqtstep3.png\" alt=\"step3.png\"></p>\n<p>📢📢📢</p>\n<p>也可以直接安装 <a href=\"https://docs.anaconda.com/free/miniconda/miniconda-install/\">Miniconda</a></p>\n<p>然后：conda install -c conda-forge pyqt</p>\n",
            "tags": [
                "PyQt",
                "Mac",
                "M1"
            ]
        },
        {
            "id": "https://pyqt5.com/studynotes.html",
            "url": "https://pyqt5.com/studynotes.html",
            "title": "PyQt学习心得",
            "date_published": "2019-08-26T01:00:00.000Z",
            "content_html": "<p>在学习 PyQt 的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习 PyQt 的方法，提高自身的学习能力。</p>\n<span id=\"more\"></span>\n<h2 id=\"python基础\"><a class=\"markdownIt-Anchor\" href=\"#python基础\">#</a> Python 基础</h2>\n<p>在学习和使用 PyQt 之前需要熟练使用 Python，经过对 QQ 群里经常提问的问题的分析，发现大部分人对 Python 中的基础知识掌握不牢固导致很多基础问题，如果要想更好的使用 Python 以及它的扩展必需要进行系统的学习。这里列举一下常用的知识点。</p>\n<ol>\n<li>类　　　　　　　 　<a href=\"https://www.runoob.com/python3/python3-class.html\">参考资料</a></li>\n<li>类的继承</li>\n<li>类的多继承</li>\n<li>类方法重写　　　　 <a href=\"https://www.runoob.com/w3cnote/python-extends-init.html\">参考资料</a></li>\n<li>类中的 super 函数　　<a href=\"https://www.runoob.com/python/python-func-super.html\">参考资料</a></li>\n<li>函数调用 / 参数类型</li>\n<li>对象调用 (参考第 1 点)</li>\n</ol>\n<p>必须熟练掌握上面的知识点后入门 PyQt 才比较容易，如果初学者对上面的知识点还不是很了解，本文不适合继续往下阅读。</p>\n<h2 id=\"设计师\"><a class=\"markdownIt-Anchor\" href=\"#设计师\">#</a> 设计师</h2>\n<p>Qt 设计师除了方便快速设计一些简单的界面外，其实笔者觉得更大的作用在于帮助用户熟悉各类控件、属性、信号等</p>\n<ol>\n<li>这里建议初学者不要急于求成，打开设计师新建一个 <code>Widget</code>  的窗口，比如</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_create.png\" alt=\"desiger_create\"></p>\n<ol start=\"2\">\n<li>然后把左侧的所有控件挨个拖动到中间的窗口中，比如这里拖动一个<strong> Push Button</strong> 按钮</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_drag.png\" alt=\"desiger_drag\"></p>\n<ol start=\"3\">\n<li>在设计师右下角的属性编辑器中列举了该控件的所有父类，意味着可以调用和重写父类的所有方法，建议初学者把这个属性编辑器的所有属性挨个调整看看效果，部分控件可能需要<strong> Ctrl+R</strong> 预览界面才能看到，同时像<strong> QListWidget，QTreeWidget，QTableWidget</strong> 等某些控件需要在控件上右键增加数据才可以</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_property.png\" alt=\"desiger_property\"><br>\n<img src=\"/images/studynotes/desiger_property2.png\" alt=\"desiger_property2\"></p>\n<ol start=\"4\">\n<li>两个控件之间简单的信号槽关联可以通过设计师快速的设置</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_signal.png\" alt=\"desiger_signal\"><br>\n<img src=\"/images/studynotes/desiger_signal2.png\" alt=\"desiger_signal2\"></p>\n<ol start=\"5\">\n<li>提高进阶的方法，当你需要手动写代码实现界面的时候，不妨把 UI 文件转出 PY 文件，看看是如何构造的（这里涉及到布局等知识见后文）</li>\n</ol>\n<h2 id=\"布局\"><a class=\"markdownIt-Anchor\" href=\"#布局\">#</a> 布局</h2>\n<p>Qt 界面提供了方便的 4 种基本布局，<strong>QVboxLayout，QHboxLayout，QFormLayout，QGridLayout</strong>，初学者需要数量掌握这 4 种布局外加 2 种拉伸器（占位挤压）</p>\n<p>首先需要知道 Qt 界面的中控件的层级顺序以及 parent，parent 的作用既作为子控件的父元素也可以自动管理 Qt 的对象（具体可以搜索下关于 Qt parent 的资料）</p>\n<ol>\n<li>在没有布局的情况下，在设计师中拖动摆放的控件是一层一层的叠加覆盖，此时每个添加的子控件的 parent 都是最外层的控件</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_stack.png\" alt=\"desiger_stack\"></p>\n<ol start=\"2\">\n<li>如果需要界面中的控件自动适应高度宽度，此时则需要使用 4 种布局来包裹里面的子控件，注意的是：布局不是控件不能设置高度宽度和样式等，是一个抽象的东西，就好比是一根橡皮筋包裹几个矩形的物品；布局也可以设置一些属性（在设计师属性编辑器中），比如设置两者直接的间距，设置距离上下左右的间距，设置比例等</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_layout.png\" alt=\"desiger_layout\"></p>\n<ol start=\"3\">\n<li>在没有布局或者有布局的时候。可以添加容器控件（<strong>QWidget，QFrame，QGroupBox，QScrollArea，QToolBox，QTabWidget，QStackedWidget，QMidArea，QDockWidget</strong>）这些容器可以放置子控件，从而循环嵌套。</li>\n</ol>\n<h2 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>在 PyQt5.5 的时候自带了一个例子文件夹（后面的版本没有的话可以下载 PyQt5 源码，里面有个 examples 文件夹），想要熟练的掌握 PyQt 还需要从自带的例子中学习，必须要每个例子都运行一次然后看看这个例子实现了什么，这样才能记忆深刻。<br>\n同时很多开发者在<a href=\"https://github.com/PyQt5/PyQt\"> https://github.com/PyQt5/PyQt</a> 分享了各类进阶例子，同时也欢迎大家共同完善该项目，提供更多更好的例子。另外也可以下载该项目的客户端<a href=\"https://github.com/PyQt5/PyQtClient/releases\"> PyQtClient</a> 软件，支持运行其中的例子</p>\n<p>建议在更深入的学习 PyQt 之前多看看一些例子。</p>\n<h2 id=\"文档\"><a class=\"markdownIt-Anchor\" href=\"#文档\">#</a> 文档</h2>\n<p>接下来要说的就是 Qt 的 api 文档，<a href=\"https://doc.qt.io/qt-5/classes.html\">官网文档</a>，这里其实不要害怕是英文就不想看，觉得看不懂了，其实官网的文档还是比较简洁的，而且函数名也比较直观就能知道意思。也可以用谷歌浏览器打开右键翻译，基本上都能看懂。笔者前期写过一篇<a href=\"/viewapi.html\">如何查阅 Qt 文档</a>的文档可以阅读学习一番。</p>\n<p>这里就拿<a href=\"https://doc.qt.io/qt-5/qwebengineview.html\"> QWebEngineView</a> 举一个例子，首先初学者在使用这个浏览器控件时候，会有诸多的问题比如：Cookie，拦截器等就不知道如何去调用函数来设置</p>\n<ol>\n<li>首先打开官网文档 <a href=\"https://doc.qt.io/qt-5/qwebengineview.html\">https://doc.qt.io/qt-5/qwebengineview.html</a>，可以看到只有少量的函数可以调用，寻找一番并没有发现和 Cookie 相关的东西，这个时候就需要把重点放在有特俗返回值的函数上，比如：</li>\n</ol>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">QWebEngineHistory *\t          history() const\nQWebEnginePage *\t          page() const\nQWebEngineSettings *\t      settings() const<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这三个函数返回了一个类实例，就意味着可以调用其中的方法。</p>\n<ol start=\"2\">\n<li>\n<p>点击<strong> page ()<strong> 打开 <a href=\"https://doc.qt.io/qt-5/qwebenginepage.html\">https://doc.qt.io/qt-5/qwebenginepage.html</a>，发现没有 cookie 相关的东西，只有</strong> QWebEngineProfile *\tprofile () const</strong> 这个函数比较可疑。</p>\n</li>\n<li>\n<p>点击 **profile ()** 打开 <a href=\"https://doc.qt.io/qt-5/qwebengineprofile.html\">https://doc.qt.io/qt-5/qwebengineprofile.html</a>，在浏览器中搜索 <code>cookie</code>  发现这个类中包含大量和 cookie 相关的东西，比如：**QWebEngineCookieStore *\tcookieStore ()`** 从名字上可以猜测大概意思为 cookie 储存</p>\n</li>\n<li>\n<p>点击 **cookieStore ()** 打开 <a href=\"https://doc.qt.io/qt-5/qwebenginecookiestore.html\">https://doc.qt.io/qt-5/qwebenginecookiestore.html</a>，此时就会发现这个类里面包含了删除和设置 cookie 的方法。</p>\n</li>\n<li>\n<p>但是找到了这些方法后，面对初学者又一个问题来了，该如何去用？根据上面 4 点整理一下，把他们当做简单的 Python 对象，方法和操作方法和 class 一样的。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">self<span class=\"token punctuation\">.</span>webview <span class=\"token operator\">=</span> QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 得到page</span>\npage <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>webview<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 得到profile</span>\nprofile <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 得到cookieStore</span>\ncookieStore <span class=\"token operator\">=</span> profile<span class=\"token punctuation\">.</span>cookieStore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 清空cookie</span>\ncookieStore<span class=\"token punctuation\">.</span>deleteAllCookies<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用简短代码来表达就是</span>\ncookieStore <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>webview<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cookieStore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncookieStore<span class=\"token punctuation\">.</span>deleteAllCookies<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"异常调试\"><a class=\"markdownIt-Anchor\" href=\"#异常调试\">#</a> 异常调试</h2>\n<p>可能有时候由于粗心，或者调用了一些非法函数，参数错误等会导致程序出现一些异常，首先第一步复制最后一行的错误去百度或者谷歌搜索，大多时候能找到问题所在。其次如果搜索不到或者自己的异常可能是由于某个变量的值不对引起的，就需要在编辑器中打断点使用 DEBUG 模式调试变量值（如果不会可以采用麻烦一点的办法：用 <code>print</code>  打印出变量值）</p>\n<p>遇到问题后首先需要自己多调试排查问题，不要一遇到问题就去问，自己多尝试一个一个排查直到找到问题所在并解决，这也是一种提高自身能力的地方。</p>\n<h2 id=\"检索资料\"><a class=\"markdownIt-Anchor\" href=\"#检索资料\">#</a> 检索资料</h2>\n<p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。信息检索是每个程序猿必备的能力之一，其好处在于可以更快更准确的在茫茫网络海洋中找到自己所需要的东西，这个过程需要长期不断积累和练习。</p>\n<ol>\n<li>中文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt 拖拽</li>\n<li>英文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt Drag Drop</li>\n</ol>\n<h2 id=\"片尾\"><a class=\"markdownIt-Anchor\" href=\"#片尾\">#</a> 片尾</h2>\n<p>好了，笔者基本上的学习过程就整理如上，这并不是说每个人都适合这样的方法，但至少笔者是这样一步一步走过来的。当你养成了一个学习、发现和解决问题的好习惯时就会慢慢得心应手。</p>\n",
            "tags": [
                "PyQt"
            ]
        },
        {
            "id": "https://pyqt5.com/QPropertyAnimation.html",
            "url": "https://pyqt5.com/QPropertyAnimation.html",
            "title": "PyQt属性动画(QPropertyAnimation)",
            "date_published": "2019-05-08T07:43:06.000Z",
            "content_html": "<p><code>QPropertyAnimation</code>  继承自 <code>QVariantAnimation</code> ，其作为 Qt 的属性动画用于针对控件的属性或者继承自 <code>QObject</code>  的对象中定义的属性做修改，<br>\n简单来说就是基类是 <code>QObject</code>  且定义了属性变量，就可以用 <code>QPropertyAnimation</code>  来做属性动画。同时也可以通过 <code>pyqtProperty</code>  来增加自定义属性。</p>\n<span id=\"more\"></span>\n<p>首先，通过构造函数 <code>QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)</code>  创建一个对象，其中</p>\n<ol>\n<li>第一个参数是动画作用的对象，也可以通过 <code>setTargetObject</code>  设置</li>\n<li>第二个参数是属性名，在 py3 中类型是 bytes，也可以通过 <code>setPropertyName</code>  设置</li>\n</ol>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>一些常见的设置函数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">setPropertyName</td>\n<td style=\"text-align:left\">设置属性名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setTargetObject</td>\n<td style=\"text-align:left\">设置动画作用对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setDuration</td>\n<td style=\"text-align:left\">设置动画持续时间（毫秒）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setStartValue</td>\n<td style=\"text-align:left\">设置开始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setEndValue</td>\n<td style=\"text-align:left\">设置结束值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setEasingCurve</td>\n<td style=\"text-align:left\">设置动画曲线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setKeyValueAt</td>\n<td style=\"text-align:left\">插入线性值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setLoopCount</td>\n<td style=\"text-align:left\">设置循环次数（-1 为永久）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>比如这个例子：</p>\n<ol>\n<li>修改控件的 <code>geometry</code>  大小</li>\n<li>修改自定义属性</li>\n<li>修改进度条的 value 值</li>\n</ol>\n<p><img src=\"/images/QPropertyAnimation.gif\" alt=\"QPropertyAnimation\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年5月8日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n\"\"\"</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> QPropertyAnimation<span class=\"token punctuation\">,</span> QRect<span class=\"token punctuation\">,</span> pyqtProperty<span class=\"token punctuation\">,</span> QEasingCurve\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span> QPushButton<span class=\"token punctuation\">,</span> QVBoxLayout<span class=\"token punctuation\">,</span>\\\n    QLabel<span class=\"token punctuation\">,</span> QProgressBar<span class=\"token punctuation\">,</span> QSpacerItem<span class=\"token punctuation\">,</span> QSizePolicy\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token string\">'Irony'</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'属性动画测试'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>doStart<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>buttonc <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'自定义属性 测试'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buttonc<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>doStartCustom<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>progressbar <span class=\"token operator\">=</span> QProgressBar<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>progressbar<span class=\"token punctuation\">.</span>setRange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span>QSpacerItem<span class=\"token punctuation\">(</span>\n            <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> QSizePolicy<span class=\"token punctuation\">.</span>Fixed<span class=\"token punctuation\">,</span> QSizePolicy<span class=\"token punctuation\">.</span>Fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonc<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>progressbar<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 进度条动画</span>\n        self<span class=\"token punctuation\">.</span>progressStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 此处是自定义属性，并通过动画修改后，设置QLabel的值</span>\n    <span class=\"token decorator annotation punctuation\">@pyqtProperty</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value\n\n    <span class=\"token decorator annotation punctuation\">@value<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> v\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'当前值：&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">doStart</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 第一个参数是要执行的对象</span>\n        animation <span class=\"token operator\">=</span> QPropertyAnimation<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">b'geometry'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setDuration<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 持续时间</span>\n        <span class=\"token comment\"># 缓和曲线风格,加了曲线动画会很大程度影响</span>\n        animation<span class=\"token punctuation\">.</span>setEasingCurve<span class=\"token punctuation\">(</span>QEasingCurve<span class=\"token punctuation\">.</span>OutBounce<span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setStartValue<span class=\"token punctuation\">(</span>QRect<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setEndValue<span class=\"token punctuation\">(</span>QRect<span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">.</span>DeleteWhenStopped<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">doStartCustom</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 自定义属性动画</span>\n        <span class=\"token comment\"># 由于定义的属性是在继承的QWidget, 所以第一个参数是self</span>\n        <span class=\"token comment\"># 第二个参数就是 value</span>\n        animation <span class=\"token operator\">=</span> QPropertyAnimation<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">b'value'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setDuration<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 持续时间</span>\n        animation<span class=\"token punctuation\">.</span>setStartValue<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setEndValue<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">.</span>DeleteWhenStopped<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">progressStart</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 进度条动画</span>\n        <span class=\"token comment\"># 这里 value是QProgressBar自带的属性，具体可以看文档</span>\n        <span class=\"token comment\"># https://doc.qt.io/qt-5/qprogressbar.html#properties</span>\n        animation <span class=\"token operator\">=</span> QPropertyAnimation<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>progressbar<span class=\"token punctuation\">,</span> <span class=\"token string\">b'value'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setDuration<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 持续时间</span>\n        animation<span class=\"token punctuation\">.</span>setLoopCount<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 这里采用插入线性值,第一个参数的范围是（0-1）</span>\n        <span class=\"token comment\"># 第二个参数的范围是进度（最小值-最大值）</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>progressbar<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>setKeyValueAt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>progressbar<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        animation<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">.</span>DeleteWhenStopped<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> Window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "PyQt",
                "动画"
            ]
        },
        {
            "id": "https://pyqt5.com/viewapi.html",
            "url": "https://pyqt5.com/viewapi.html",
            "title": "如何查阅Qt文档",
            "date_published": "2019-05-04T12:50:20.000Z",
            "content_html": "<p>很多网友在问有没有 PyQt5 的文档之类的问题，在 PyQt4 的时候 PyQt 官网有了英文版的文档，随后有网友翻译成了中文。不过现在 PyQt5 官方的文档都指向了 C<ins> 的 Qt 文档，其实 C</ins> 的 Qt API 文档结构很清晰，翻阅很容易的，需要注意几点。</p>\n<span id=\"more\"></span>\n<p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。</p>\n<p>拿 Qt C++ 文档来说，官网地址是：<a href=\"https://doc.qt.io/qt-5/qtwidgets-module.html\">https://doc.qt.io/qt-5/qtwidgets-module.html</a> 这里面记录了所有控件的详细函数文档。</p>\n<p>比如拿 输入框  <code>QLineEdit</code>  来说，怎么去查询它的用法和信号槽等资料？</p>\n<p><a href=\"https://doc.qt.io/qt-5/qlineedit.html\">https://doc.qt.io/qt-5/qlineedit.html</a></p>\n<h2 id=\"左侧目录\"><a class=\"markdownIt-Anchor\" href=\"#左侧目录\">#</a> 左侧目录</h2>\n<p>在文档左侧目录中有如下几个：</p>\n<p>Properties - 控件里的属性（比如宽高等，通常需要当作函数调用）</p>\n<p>Public Slots - 这个是控件自己的槽函数（当作普通函数就行）</p>\n<p>Signals - 这个是输入框的包含的信号</p>\n<p>Public Functions、Reimplemented Public Functions、Static Public Members、Protected Functions、Reimplemented Protected Functions - 这几个都是函数列表</p>\n<p><img src=\"/images/howtoviewapi1.png\" alt=\"howtoviewapi1\"></p>\n<h2 id=\"类说明\"><a class=\"markdownIt-Anchor\" href=\"#类说明\">#</a> 类说明</h2>\n<p><img src=\"/images/howtoviewapi2.png\" alt=\"howtoviewapi2\"></p>\n<p>这里有两个注意点</p>\n<ol>\n<li>红色方框内的表示该控件（输入框）继承于 <code>QWidget</code> ，所以该控件（输入框）拥有父类的所有方法和信号，当当前文档找不到相关资料和函数时，可以去父类找找看。</li>\n<li>紫色方框内表示列举所有的方法（包括父类）</li>\n</ol>\n<h2 id=\"函数列表\"><a class=\"markdownIt-Anchor\" href=\"#函数列表\">#</a> 函数列表</h2>\n<p><img src=\"/images/howtoviewapi3.png\" alt=\"howtoviewapi3\"></p>\n<p>这里列举的就是该控件（输入框）的函数，同理点击上面的紫色方框是查看所有方法，一般这里主要用来查询你需要的功能函数，Qt 的函数名比较容易理解，比如：只读 ReadOnly，选择文字：setSelection。</p>\n<p>所以再查下这部分资料的时候建议在浏览器中 Ctrl + F 打开浏览器的搜索框，并输入英文关键词来检索你所需要的函数在哪里。</p>\n<p><img src=\"/images/howtoviewapi8.png\" alt=\"howtoviewapi8\"></p>\n<h2 id=\"槽函数\"><a class=\"markdownIt-Anchor\" href=\"#槽函数\">#</a> 槽函数</h2>\n<p><img src=\"/images/howtoviewapi4.png\" alt=\"howtoviewapi4\"></p>\n<p>这部分列举的是槽函数，其实在 PyQt 中槽函数可以当作普通的函数。普通的函数也可以作为槽函数，直接通过信号连接即可，注意方框所示，还有很多函数是在父类里面。</p>\n<h2 id=\"信号\"><a class=\"markdownIt-Anchor\" href=\"#信号\">#</a> 信号</h2>\n<p><img src=\"/images/howtoviewapi5.png\" alt=\"howtoviewapi5\"></p>\n<p>这部分列举了该控件（输入框）所定义的信号，主要还是看名字，大多都能知道是做什么的，比如：</p>\n<ol>\n<li>editingFinished - 编辑完成信号</li>\n<li>returnPressed - 回车键信号</li>\n<li>textChanged (const QString &amp;text) - 内容改变信号</li>\n</ol>\n<p>这里还有个问题就是参数问题，一般 &amp; 后面的 text 作为参数传递到槽函数中</p>\n<h2 id=\"函数详细说明\"><a class=\"markdownIt-Anchor\" href=\"#函数详细说明\">#</a> 函数详细说明</h2>\n<p>当不明确这个函数是做什么的，可以点击该函数跳转到下面的说明，比如回车键信号 <code>returnPressed</code></p>\n<p><img src=\"/images/howtoviewapi6.png\" alt=\"howtoviewapi6\"></p>\n<p>如图上所示，用翻译插件翻译，大部分就明白了，如下：</p>\n<p><img src=\"/images/howtoviewapi7.png\" alt=\"howtoviewapi7\"></p>\n<h2 id=\"关于如何搜索资料\"><a class=\"markdownIt-Anchor\" href=\"#关于如何搜索资料\">#</a> 关于如何搜索资料</h2>\n<p>比如当你要搜索输入框内容改变事件，一般建议两种搜索，且搜索的时候用空格把关键词分开搜索，而且直接用控件名</p>\n<ol>\n<li>中文搜索引擎：QLineEdit 内容 改变</li>\n<li>英文搜索引擎：QLineEdit text change</li>\n</ol>\n",
            "tags": [
                "PyQt"
            ]
        },
        {
            "id": "https://pyqt5.com/speedgithub.html",
            "url": "https://pyqt5.com/speedgithub.html",
            "title": "解决GitHub下载速度缓慢的问题",
            "date_published": "2019-04-18T00:59:06.000Z",
            "content_html": "<p>由于 Github 的下载走的是 AWS - 亚马逊的路线，，so slow，跟乌龟一样慢。。照着一些方法改了 hosts 文件，偶尔能提提速度。</p>\n<span id=\"more\"></span>\n<h2 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> Windows</h2>\n<p>Hosts 文件的路径是：</p>\n<p>C:\\Windows\\System32\\drivers\\etc</p>\n<h2 id=\"mac\"><a class=\"markdownIt-Anchor\" href=\"#mac\">#</a> Mac</h2>\n<p>终端内输入：</p>\n<p>sudo vim /etc/hosts</p>\n<h2 id=\"追加域名的ip地址\"><a class=\"markdownIt-Anchor\" href=\"#追加域名的ip地址\">#</a> 追加域名的 IP 地址</h2>\n<p>利用 https://www.ipaddress.com/ 来获得以下两个 GitHub 域名的 IP 地址：</p>\n<p>(1) <a href=\"http://github.com\">github.com</a></p>\n<p>(2) <a href=\"http://github.global.ssl.fastly.net\">github.global.ssl.fastly.net</a></p>\n<p>打开网页后，利用输入框内分别查询两个域名</p>\n<p>将以上两段 IP 写入 Hosts 文件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">192.30.253.112               github.com\n151.101.185.194              github.global.ssl.fastly.net<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>保存。</p>\n<p>刷新 DNS 缓存</p>\n<p>在终端或 CMD 中，执行以下命令：</p>\n<p>ipconfig /flushdns</p>\n",
            "tags": [
                "Github"
            ]
        },
        {
            "id": "https://pyqt5.com/ffmpeghls.html",
            "url": "https://pyqt5.com/ffmpeghls.html",
            "title": "FFmpeg合成加密HLS记录",
            "date_published": "2019-01-12T11:28:06.000Z",
            "content_html": "<p>记录在某个需求中要求截图并合成加密视频文件，这里采用 FFmpeg 的管道流来实现生成 HLS 加密文件。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年3月4日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n\"\"\"</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> Popen<span class=\"token punctuation\">,</span> PIPE\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n\n<span class=\"token comment\"># p = Popen([r'D:\\soft\\ffmpeg\\bin\\ffmpeg.exe', '-y',</span>\n<span class=\"token comment\">#            '-threads', '2',</span>\n<span class=\"token comment\">#            '-f', 'image2pipe',</span>\n<span class=\"token comment\">#            '-vcodec', 'mjpeg', '-r', '24', '-i', '-',</span>\n<span class=\"token comment\">#            '-vcodec', 'h264', '-r', '24',</span>\n<span class=\"token comment\">#            #            '-encryption_scheme', 'cenc-aes-ctr',</span>\n<span class=\"token comment\">#            #            '-encryption_key', '617D8A125A284DF48E3C6B1866348A3F',</span>\n<span class=\"token comment\">#            #            '-encryption_kid', 'B326F895B6A24CC5A4DC70995728059C',</span>\n<span class=\"token comment\">#            r'F:\\Workspace\\Test\\videos\\video.mp4'], stdin=PIPE)</span>\n\np <span class=\"token operator\">=</span> Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">r'D:\\soft\\ffmpeg\\bin\\ffmpeg.exe'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-re'</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 按照实际帧率读取输入文件</span>\n           <span class=\"token string\">'-y'</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 覆盖已存在文件</span>\n           <span class=\"token string\">'-threads'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 线程数量</span>\n           <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image2pipe'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># PIPE图片流</span>\n           <span class=\"token string\">'-vcodec'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mjpeg'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 图片编码</span>\n           <span class=\"token string\">'-r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 帧率</span>\n           <span class=\"token string\">'-i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定输入流为PIPE</span>\n           <span class=\"token string\">'-vcodec'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h264'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 输出编码</span>\n           <span class=\"token string\">'-r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 帧率</span>\n           <span class=\"token string\">'-map'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">#            '-crf','20',     # 降低质量</span>\n           <span class=\"token string\">'-b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'720k'</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 码率</span>\n           <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-codec:v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'libx264'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-vbsf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h264_mp4toannexb'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token comment\"># 指定加密密匙文件</span>\n           <span class=\"token string\">'-hls_key_info_file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r'F:\\Workspace\\Test\\videokey.info'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_time'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_list_size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'-hls_wrap'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">#            '-hls_flags', 'single_file',  # 生成单个文件(有bug)</span>\n           <span class=\"token string\">r'F:\\Workspace\\Test\\videos\\playlist.m3u8'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> path <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span><span class=\"token string\">'frames'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rglob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#     print(i, path)</span>\n    p<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Python",
                "FFmpeg",
                "HLS"
            ]
        },
        {
            "id": "https://pyqt5.com/processinclass_625781186.html",
            "url": "https://pyqt5.com/processinclass_625781186.html",
            "title": "python 在类里使用进程池",
            "date_published": "2018-11-16T13:37:31.000Z",
            "content_html": "<ol>\n<li>首先， 进程池的作用就是减少进程的创建和释放 开销的， 所以在类中作为局部变量是不合适的；</li>\n<li>其次， 进程池必须在 <code>if __name__ == &quot;__main__&quot; </code> 里 ，否则会报 frozen_ 什么什么的错误；（这一点可能解释有误）;</li>\n</ol>\n<span id=\"more\"></span>\n<ol start=\"3\">\n<li>然后， 线程池的 <code>apply_async</code>  中如果传入 <code>self.xxx</code>  方法，会报 <code>multiprocessing.Pool pickling error</code>  什么的错误， 具体解释见 https://blog.csdn.net/dutsoft/article/details/70336462， 里面有解决方法，但是我没有成功（最开始测试没有现在理解的透彻， 不过应该是可以的）; 由于第 1 点 不合理， 所以有什么办法在类 函数中获取 进程池对象 po 的地址：</li>\n</ol>\n<p><img src=\"/images/processinclass1.png\" alt=\"processinclass1\"></p>\n<p>我的解决思路和方法是:</p>\n<ol>\n<li>通过 globals () 取得全局变量 ， 测试证明 ：不同文件的 <code>globals()</code>  是不同的： 如 <code>Tab2.py </code> 的  <code>globals()</code>  和 <code> main_extra_func_file.py</code>  中的  <code>globals() </code> 是不同的 ， 所以 这样在 <code>Tab2.py</code>  中取不到 po 对象；</li>\n<li>通过 <code>__main__.po</code>  来获取 （为什么会想到这个呢， 因为有时候导包 import .xxx 和 import xxx 会报  <code>__main__</code>  没有什么属性什么的）：</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getPoolObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># po 的名字在main函数中定义</span>\n<span class=\"token comment\"># __main__ 模块在sys.modules 的键是\"__mp_main__\"</span>\n    <span class=\"token keyword\">return</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span><span class=\"token string\">\"__mp_main__\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>po<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ps : (图没截好 ，  <code>rglob_worker</code>  是外部函数 ， 非类内函数 ，po = getPoolBojcet () 这一行是类内函数 ，红色箭头 2. 在的那条白色分割线 是 2 个函数。)</p>\n<p><img src=\"/images/processinclass2.png\" alt=\"processinclass2\"></p>\n<p><code>len(po._cache) == 1</code>  : po._cache 是当前有任务的进程数， ==1 表示所有任务结束；利用回调 ， 可以更轻松地进行进程通信。</p>\n",
            "tags": [
                "进程"
            ]
        },
        {
            "id": "https://pyqt5.com/daemonthread.html",
            "url": "https://pyqt5.com/daemonthread.html",
            "title": "多线程之守护线程和阻塞线程",
            "date_published": "2018-10-24T07:51:15.000Z",
            "content_html": "<p>如果你设置一个线程为守护线程，就表示你在说这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。如果你的主线程在退出的时候，不用等待那些子线程完成，那就设置这些线程的 daemon 属性。</p>\n<span id=\"more\"></span>\n<p>即在线程开始（thread.start ()）之前，调用 setDeamon（）函数，设定线程的 daemon 标志。</p>\n<p>（thread.setDaemon (True)）就表示这个线程 “不重要”。</p>\n<p>如果你想等待子线程完成再退出，那就什么都不用做，或者显示地调用 thread.setDaemon (False)，设置 daemon 的值为 false。新的子线程会继承父线程的 daemon 标志。</p>\n<p>整个 Python 会在所有的非守护线程退出后才会结束，即进程中没有非守护线程存在的时候才结束。</p>\n<p>setDaemon () 函数要放在 start 之前设置才行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程开启：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程结束：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程开启：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># t.setDaemon(True)</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程关闭：\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 Python 的多线程编程中，在实例代码中经常有 thread1.join () 这样的代码。那么今天咱们用实际代码来解释一下 join 函数的作用。</p>\n<p>join 的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的 join 函数。</p>\n<p>先看看这个：</p>\n<ol>\n<li>阻塞主进程，专注于执行多线程中的程序。</li>\n<li>多线程多 join 的情况下，依次执行各线程的 join 方法，前头一个结束了才能执行后面一个。</li>\n<li>无参数，则等待到该线程结束，才开始执行下一个线程的 join。</li>\n<li>参数 timeout 为线程的阻塞时间，如 timeout=2 就是罩着这个线程 2s 以后，就不管他了，继续执行下面的代码。</li>\n<li>下面的例子是一次阻塞子线程，每个子线程都会等上个子线程 join 结束才会执行，如果注释掉 t.join 则会同时执行 5 个子线程，多线程在做网络访问的时候可以减少等待时间，那么在一个工作流程中可以将访问网络接口的情况做成多线程。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span class=\"token punctuation\">,</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello main start\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>func<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Python",
                "线程"
            ]
        },
        {
            "id": "https://pyqt5.com/cgitb.html",
            "url": "https://pyqt5.com/cgitb.html",
            "title": "异常捕获之cgitb模块",
            "date_published": "2018-09-17T15:17:06.000Z",
            "content_html": "<p><code>cgitb</code>  模块为 <code>Python</code>  脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以 HTML 格式展示 cgi 脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。</p>\n<span id=\"more\"></span>\n<h2 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h2>\n<p>当编辑器中无法显示错误信息时，尤其是 <code>PyQt</code> ，可以尝试在 cmd 中运行代码，或者使用此模块来得到错误信息。</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<h3 id=\"cgitbenable\"><a class=\"markdownIt-Anchor\" href=\"#cgitbenable\">#</a> cgitb.enable</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cgitb<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">(</span>display<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> logdir<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数说明</p>\n<ol>\n<li>display 1，发送至浏览器；0， 不发送</li>\n<li>logdir 如果有的话，写到该目录下</li>\n<li>context 显示错误代码周围的代码行数</li>\n<li>format 是否显示为 HTML，除了’html’之外的所有值，都会显示为纯文本</li>\n</ol>\n<h3 id=\"cgitbhandle\"><a class=\"markdownIt-Anchor\" href=\"#cgitbhandle\">#</a> cgitb.handle</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cgitb<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数说明</p>\n<ol>\n<li>如果你想用 cgitb 处理异常，你可以调用这个函数。</li>\n<li>info 应当是含有异常类型、异常值和 traceback 对象的三元组</li>\n<li>如同 sys.exc_info () 返回的那样。如果不提供 info，则从 sys.exc_info 中获取。</li>\n</ol>\n<h2 id=\"如何使用\"><a class=\"markdownIt-Anchor\" href=\"#如何使用\">#</a> 如何使用</h2>\n<p>以下代码放在最开始执行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cgitb\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>excepthook <span class=\"token operator\">=</span> cgitb<span class=\"token punctuation\">.</span>Hook<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "异常"
            ]
        }
    ]
}