{
    "version": "https://jsonfeed.org/version/1",
    "title": "PyQt • All posts by \"教程\" category",
    "description": "Python PyQt PyQt6 PyQt5 PyQt4 PySide PySide2 PySide6",
    "home_page_url": "https://pyqt5.com",
    "items": [
        {
            "id": "https://pyqt5.com/pytest_qt_modal_625781186.html",
            "url": "https://pyqt5.com/pytest_qt_modal_625781186.html",
            "title": "pytest-qt 测试模态窗体.",
            "date_published": "2024-04-30T01:46:52.392Z",
            "content_html": "<p>步骤分别是 :</p>\n<ol>\n<li>\n<p>点击 开始扫描 弹出 选择路径窗口；</p>\n</li>\n<li>\n<p>勾选路基；</p>\n</li>\n</ol>\n<p>3. 点击确定；</p>\n<span id=\"more\"></span>\n<p>大概想测一下这个界面 :</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-c1ed0bd52808c5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>步骤分别是 :</p>\n<ol>\n<li>\n<p>点击 开始扫描 弹出 选择路径窗口；</p>\n</li>\n<li>\n<p>勾选路基；</p>\n</li>\n</ol>\n<p>3. 点击确定；</p>\n<p>需要测试的函数 :</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-b5265859d74b269d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>测试函数 :</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-58f4310a54a815ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>可以发现断言失败 .</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/10769157-939c73b5be19c21e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>官方文档：测试模态窗体.</p>\n<p><a href=\"https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html\">https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html</a></p>\n<p>用的是官方的  <code>monkeypatch</code>  方式 .</p>\n<p>大致意思就是替换  <code>FileSelectPathDialog</code>  类的 exec 函数.</p>\n",
            "tags": [
                "pytest-qt"
            ]
        },
        {
            "id": "https://pyqt5.com/bindsignals.html",
            "url": "https://pyqt5.com/bindsignals.html",
            "title": "三种方式绑定信号槽",
            "date_published": "2019-05-04T08:07:06.000Z",
            "content_html": "<p>网上关于 PyQt5 的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在 PyQt5 中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>\n这几种方式各有各的优点和缺点。</p>\n<span id=\"more\"></span>\n<h2 id=\"方式一\"><a class=\"markdownIt-Anchor\" href=\"#方式一\">#</a> 方式一</h2>\n<p>这个方式是最开始接触设计师的时候知道的，主要是通过控件的 <code>objectName</code>  和 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  提供的连接函数来自动完成注册，<br>\n比如带有按钮的界面 ui 文件转成 py 文件后会发现如下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">self<span class=\"token punctuation\">.</span>pushButton <span class=\"token operator\">=</span> QtWidgets<span class=\"token punctuation\">.</span>QPushButton<span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span>QtCore<span class=\"token punctuation\">.</span>QRect<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setObjectName<span class=\"token punctuation\">(</span><span class=\"token string\">\"pushButton\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 通过这里自动完成连接信号槽</span>\nQtCore<span class=\"token punctuation\">.</span>QMetaObject<span class=\"token punctuation\">.</span>connectSlotsByName<span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时只需要继承该 UI 文件类然后增加如下方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token decorator annotation punctuation\">@pyqtSlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里解释一下， <code>@pyqtSlot()</code>  装饰器把函数 <code>on_pushButton_clicked</code>  包装为一个槽函数，<br>\n而 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  这句代码的意思就是自动去寻找满足的槽函数</p>\n<p><font color=red>注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足 <code>on_控件的objectName_控件的信号</code> 这样下划线连接起来的函数名才能被识别，<br>\n比如按钮的点击： <code>on_pushButton_clicked</code> 、勾选框的选中： <code>on_checkbox_toggled(self, checked)</code></p>\n<h2 id=\"方式二\"><a class=\"markdownIt-Anchor\" href=\"#方式二\">#</a> 方式二</h2>\n<p>这种方式则直接通过代码里调用控件的信号的 <code>connect</code>  方法来进行绑定，比如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 按钮点击函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">doClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绑定点击信号</span>\nself<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>doClicked<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><font color=red>注意： <code>connect</code>  的是函数名字</font>， <code>self.sender()</code>  这句代码是获取信号发送者（比如这里就是得到这个按钮对象），<br>\n用处在于有时候要循环创建一堆按钮</p>\n<h2 id=\"方式三\"><a class=\"markdownIt-Anchor\" href=\"#方式三\">#</a> 方式三</h2>\n<p>通过参数这种方式其实比较特殊，在 PyQt 中大部分存在，但是在 PySide 中则很少，原因是两者的封装方式不同。</p>\n<p>同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token comment\"># 按钮点击函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">doClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\npushButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> clicked<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>doClicked<span class=\"token punctuation\">,</span> minimumHeight<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里可以通过参数（信号名字） = 函数来绑定信号</p>\n<p>同时也可以设置其它参数，比如<br>\n <code>button.setMinimumHeight(40)</code>  也可以像参数里那样设置 <code>minimumHeight=40</code></p>\n",
            "tags": [
                "PyQt",
                "信号"
            ]
        },
        {
            "id": "https://pyqt5.com/runnablesignal_625781186.html",
            "url": "https://pyqt5.com/runnablesignal_625781186.html",
            "title": "QRunnable线程池发信号",
            "date_published": "2019-04-30T07:58:09.000Z",
            "content_html": "<p>因为只有继承 <code>QObject</code>  的类才能有信号和自定义信号，而 <code>QRunnable</code>  并不是继承自 <code>QObject</code> ，也不能用多继承的方式，这里考虑定义个全局的 QObject 变量用来存放一些定义好的可复用的信号。</p>\n<span id=\"more\"></span>\n<p>pools 是  <code>QThreadPool</code>  实例</p>\n<h2 id=\"看图说话\"><a class=\"markdownIt-Anchor\" href=\"#看图说话\">#</a> 看图说话</h2>\n<ol>\n<li><img src=\"/images/runnablesignal1.png\" alt=\"runnablesignal1\"></li>\n<li>定义一个全局信号类<br>\n<img src=\"/images/runnablesignal2.png\" alt=\"runnablesignal2\"></li>\n<li>在 QRunnable 中发送<br>\n<img src=\"/images/runnablesignal3.png\" alt=\"runnablesignal3\"></li>\n</ol>\n",
            "tags": [
                "PyQt",
                "信号",
                "线程"
            ]
        },
        {
            "id": "https://pyqt5.com/viewpyindesigner_625781186.html",
            "url": "https://pyqt5.com/viewpyindesigner_625781186.html",
            "title": "如何和设计师中查看ui转换的py代码",
            "date_published": "2019-04-30T05:11:09.000Z",
            "content_html": "<p>通过 设计师  查看 ui 转换的 py 代码</p>\n<p>当初我刚学 pyqt 的时候，也有很多疑惑，用什么属性把控件加到布局，改了这个属性会发生什么，为什么这个会这样，那个会那样 。。。 。。。</p>\n<p>后来就看 ui 转成的 py 代码，注释一下，什么效果消失了，就是那个 api 引起的 。</p>\n<span id=\"more\"></span>\n<p>再来后发现了官方文档，查一查函数就行了 .</p>\n<p>但是有些 api 文档找起来麻烦，用设计师点几下就行了，然后把转换出来的代码拷贝一下就完事了.</p>\n<p>可是需要单独把 ui 转为 py 文件，之后再删除这个文件也是很烦的一件事 .</p>\n<p>好，话不多说，接下来手把手教你如何快速在 ui 中查看 py 代码 .</p>\n<p>官方也考虑过这种情况，所以 设计师中 是有这个功能的，但是 qt 的是没问题的，pyqt 的毕竟是绑定过来的，所以正常来说 你点击之后会弹出一个找不到应用程序的提示 .</p>\n<p>看到这个东西是不是很眼熟，我们用的命令 pyuic5 和这个东西应该是一样的 .</p>\n<p><img src=\"/images/viewpyindesigner1.jpg\" alt=\"viewpyindesigner1\"></p>\n<p>所以接下来，我们找找电脑上有没有这个东西</p>\n<p><img src=\"/images/viewpyindesigner2.jpg\" alt=\"viewpyindesigner2\"></p>\n<p>果然在 pyqt5-toos 文件夹下有这个东西，</p>\n<p>我们根据第一张图的提示，把这个东西拷贝到相应的目录 (如果没有那个 bin 文件夹，手动创建),</p>\n<p><img src=\"/images/viewpyindesigner3.jpg\" alt=\"viewpyindesigner3\"></p>\n<p>好了，大功告成！</p>\n",
            "tags": [
                "PyQt",
                "Designer",
                "设计师"
            ]
        },
        {
            "id": "https://pyqt5.com/showframe.html",
            "url": "https://pyqt5.com/showframe.html",
            "title": "PyQt5调整窗口显示边框",
            "date_published": "2019-04-26T14:19:26.000Z",
            "content_html": "<p>在 <code>windows</code>  某些场景下调整窗口大小或者移动后就会导致里面的内容重绘（速度慢，卡顿，闪烁），其实在以前 <code>windows</code>  在低配置设备为了减少这种频繁绘制的情况，默认会开启这种效果，不过目前设备越来越好了就关闭了该功能。具体是在控制面板中 -&gt; 调整 <code>Windows</code>  的外观和性能 -&gt; 去掉勾选 拖动时显示窗口内容。</p>\n<span id=\"more\"></span>\n<p>由于这个开关是全局状态的，而我们只需要在自己的窗口中实现该效果有两种方式。</p>\n<ol>\n<li>一种是自己绘制一个边框效果，放开鼠标时才操作真正的窗口。</li>\n<li>二是替换窗口的处理过程函数 <code>wndproc</code>  处理 <code>WM_NCLBUTTONDOWN</code>  消息事件。</li>\n</ol>\n<p>今天讲第二种方法：</p>\n<ol>\n<li>需要了解  <code>SystemParametersInfo</code>  API 函数</li>\n<li><code>SPI_GETDRAGFULLWINDOWS</code> ：确定是否允许拖拉到最大窗口</li>\n<li><code>SPI_SETDRAGFULLWINDOWS</code> ：设置是否允许拖至最大窗口</li>\n</ol>\n<p>效果就是这样的：</p>\n<p><img src=\"/PyQt/Demo/ScreenShot/ShowFrameWhenDrag.gif\" alt=\"ShowFrameWhenDrag\"></p>\n<p>正如图片所看的那样，窗体在移动的时候，窗体并没有绘制出来，而是绘制出窗体的边框，等到窗体不在移动的时候就直接把窗体图像数据全部绘制出来，这样就避免了窗体在移动的时候出现闪烁的现象。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h2>\n<p><a href=\"https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py\">https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年4月23日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: ShowFrameWhenDrag\n@description: 调整窗口显示边框\n\"\"\"</span>\n<span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> sizeof<span class=\"token punctuation\">,</span> windll<span class=\"token punctuation\">,</span> c_int<span class=\"token punctuation\">,</span> byref<span class=\"token punctuation\">,</span> c_long<span class=\"token punctuation\">,</span> c_void_p<span class=\"token punctuation\">,</span> c_ulong<span class=\"token punctuation\">,</span> c_longlong<span class=\"token punctuation\">,</span>\\\n    c_ulonglong<span class=\"token punctuation\">,</span> WINFUNCTYPE<span class=\"token punctuation\">,</span> c_uint\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span> QVBoxLayout<span class=\"token punctuation\">,</span> QLabel\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token string\">'Irony'</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n<span class=\"token keyword\">if</span> sizeof<span class=\"token punctuation\">(</span>c_long<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sizeof<span class=\"token punctuation\">(</span>c_void_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    WPARAM <span class=\"token operator\">=</span> c_ulong\n    LPARAM <span class=\"token operator\">=</span> c_long\n<span class=\"token keyword\">elif</span> sizeof<span class=\"token punctuation\">(</span>c_longlong<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sizeof<span class=\"token punctuation\">(</span>c_void_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    WPARAM <span class=\"token operator\">=</span> c_ulonglong\n    LPARAM <span class=\"token operator\">=</span> c_longlong\n\nWM_NCLBUTTONDOWN <span class=\"token operator\">=</span> <span class=\"token number\">0x00a1</span>\nGWL_WNDPROC <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span>\nSPI_GETDRAGFULLWINDOWS <span class=\"token operator\">=</span> <span class=\"token number\">38</span>\nSPI_SETDRAGFULLWINDOWS <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\nWNDPROC <span class=\"token operator\">=</span> WINFUNCTYPE<span class=\"token punctuation\">(</span>c_long<span class=\"token punctuation\">,</span> c_void_p<span class=\"token punctuation\">,</span> c_uint<span class=\"token punctuation\">,</span> WPARAM<span class=\"token punctuation\">,</span> LPARAM<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    CallWindowProc <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>CallWindowProcW\n    SetWindowLong <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>SetWindowLongW\n    SystemParametersInfo <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>SystemParametersInfoW\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    CallWindowProc <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>CallWindowProcA\n    SetWindowLong <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>SetWindowLongA\n    SystemParametersInfo <span class=\"token operator\">=</span> windll<span class=\"token punctuation\">.</span>user32<span class=\"token punctuation\">.</span>SystemParametersInfoA\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">GetDragFullwindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rv <span class=\"token operator\">=</span> c_int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    SystemParametersInfo<span class=\"token punctuation\">(</span>SPI_GETDRAGFULLWINDOWS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> byref<span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">.</span>value\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">SetDragFullwindows</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    SystemParametersInfo<span class=\"token punctuation\">(</span>SPI_SETDRAGFULLWINDOWS<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'拖动或者调整窗口试试看'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 重点替换窗口处理过程</span>\n        self<span class=\"token punctuation\">.</span>_newwndproc <span class=\"token operator\">=</span> WNDPROC<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_wndproc<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_oldwndproc <span class=\"token operator\">=</span> SetWindowLong<span class=\"token punctuation\">(</span>\n            <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>winId<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GWL_WNDPROC<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_newwndproc<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_wndproc</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hwnd<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> wparam<span class=\"token punctuation\">,</span> lparam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> WM_NCLBUTTONDOWN<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 获取系统本身是否已经开启</span>\n            isDragFullWindow <span class=\"token operator\">=</span> GetDragFullwindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> isDragFullWindow <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 开启虚线框</span>\n                SetDragFullwindows<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 系统本身处理</span>\n                ret <span class=\"token operator\">=</span> CallWindowProc<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>_oldwndproc<span class=\"token punctuation\">,</span> hwnd<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> wparam<span class=\"token punctuation\">,</span> lparam<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 关闭虚线框</span>\n                SetDragFullwindows<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> ret\n        <span class=\"token keyword\">return</span> CallWindowProc<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_oldwndproc<span class=\"token punctuation\">,</span> hwnd<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> wparam<span class=\"token punctuation\">,</span> lparam<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> Window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"片尾\"><a class=\"markdownIt-Anchor\" href=\"#片尾\">#</a> 片尾</h2>\n<p>替换窗口过程可以处理很多系统窗口的处理过程，更多需要读者自行去发现。</p>\n",
            "tags": [
                "PyQt",
                "边框"
            ]
        },
        {
            "id": "https://pyqt5.com/issignalconnected.html",
            "url": "https://pyqt5.com/issignalconnected.html",
            "title": "PyQt5判断信号是否连接",
            "date_published": "2019-04-26T14:06:26.000Z",
            "content_html": "<p>在 <code>PyQt</code>  中某些情况下需要取消原来的信号连接，此时需要使用 <code>disconnect</code>  方法，但是在逻辑不严谨的情况下可能会导致多次调用 <code>disconnect</code>  方法而导致报错，当然可以通过 try except 来包裹代码。这里通过  <code>isSignalConnected</code>  来判断信号是否连接。</p>\n<span id=\"more\"></span>\n<p>在 QOjbect 文档中这样写到：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">static const QMetaMethod valueChangedSignal &#x3D; QMetaMethod::fromSignal(&amp;MyObject::valueChanged);\nif (isSignalConnected(valueChangedSignal)) &#123;\n    QByteArray data;\n    data &#x3D; get_the_value();       &#x2F;&#x2F; expensive operation\n    emit valueChanged(data);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过直接传入信号就行了，但是这在 PyQt 中不可行。需要这么做</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年2月24日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: IsSignalConnected\n@description: 判断信号是否连接\n\"\"\"</span>\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span> QVBoxLayout<span class=\"token punctuation\">,</span> QPushButton<span class=\"token punctuation\">,</span> QTextBrowser\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019 Irony'</span>\n__Version__ <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'已连接'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> clicked<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>doTest<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'未连接'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>retView <span class=\"token operator\">=</span> QTextBrowser<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>retView<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> doTest<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>retView<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n        # button1 clicked 是否连接: %s\n        # button2 clicked 是否连接: %s\n        \"\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            self<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">,</span> <span class=\"token string\">'clicked()'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> isSignalConnected<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"判断信号是否连接\n        :param obj:        对象\n        :param name:       信号名，如 clicked()\n        \"\"\"</span>\n        index <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indexOfMethod<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> method<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>isSignalConnected<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> Window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"效果图\"><a class=\"markdownIt-Anchor\" href=\"#效果图\">#</a> 效果图</h2>\n<p><img src=\"/PyQt/Demo/ScreenShot/IsSignalConnected.png\" alt=\"IsSignalConnected\"></p>\n",
            "tags": [
                "PyQt",
                "信号"
            ]
        },
        {
            "id": "https://pyqt5.com/pyqtclientmac.html",
            "url": "https://pyqt5.com/pyqtclientmac.html",
            "title": "在Mac上以正确的姿势使用PyQtClient看Demo",
            "date_published": "2019-04-02T09:18:43.000Z",
            "content_html": "<p>由于 PyQtClient 只提供了 Windows 的版本，这里记录下编译后在 Mac 上运行。</p>\n<span id=\"more\"></span>\n<h2 id=\"下载项目\"><a class=\"markdownIt-Anchor\" href=\"#下载项目\">#</a> 下载项目</h2>\n<p>安装 git 略。没有的东西可以都先去试试 brew install xxx。没安装 homebrew 的建议使用搜索引擎</p>\n<p><code>git clone https://github.com/PyQt5/PyQtClient.git</code></p>\n<h2 id=\"配置环境\"><a class=\"markdownIt-Anchor\" href=\"#配置环境\">#</a> 配置环境</h2>\n<ol>\n<li>打开 IDE 配置 python 环境，使用 anaconda 比较方便</li>\n<li>推荐用 pycharm，我是习惯了用 idea。anaconda 安装可以去官网下载。</li>\n<li>环境原因，选择新建一个 python 3.6 p.s. 我取的环境名字就是 3.6 所以后面的 3.6 其实是这个原因</li>\n</ol>\n<h2 id=\"conda源\"><a class=\"markdownIt-Anchor\" href=\"#conda源\">#</a> conda 源</h2>\n<p>最好是加环境变量，不加也可以，就是以后用到的都需要指定路径，不太常用，我就没加</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels conda-forge\n~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels defaults\n~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels r\n~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels bioconda\n~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"pip源\"><a class=\"markdownIt-Anchor\" href=\"#pip源\">#</a> pip 源</h2>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir ~&#x2F;.pip &amp;&amp; vim ~&#x2F;.pip&#x2F;pip.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[global]\nindex-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;\n[install]\ntrusted-host &#x3D; mirrors.aliyun.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装编译依赖\"><a class=\"markdownIt-Anchor\" href=\"#安装编译依赖\">#</a> 安装编译依赖</h2>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.conda&#x2F;envs&#x2F;3.6&#x2F;bin&#x2F;pip install -r PyQtClient&#x2F;requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行提示没有 webkit，开始手动编译</p>\n<ol>\n<li><code>wget http://download.qt.io/archive/qt/5.9/5.9.0/qt-opensource-mac-x64-5.9.0.dmg</code></li>\n<li><code>wget https://github.com/annulen/webkit/releases/download/qtwebkit-5.212.0-alpha2/qtwebkit-5.212.0_alpha2-qt59-darwin-x64.tar.xz</code></li>\n<li><code>wget https://www.riverbankcomputing.com/static/Downloads/PyQt5/5.10.1/PyQt5_gpl-5.10.1.zip</code></li>\n<li><code>wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.8/sip-4.19.8.tar.gz</code></li>\n<li>编译 sip： <code>~/.conda/envs/3.6/bin/python configure.py --platform macx-g++ &amp;&amp; make &amp;&amp; sudo make install</code></li>\n<li><a href=\"http://xn--Webkit-hg9py82f.so\">编译 Webkit.so</a> 没有 qmake 和 sip 的环境变量， 所以后面都是手动指定的</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.conda&#x2F;envs&#x2F;3.6&#x2F;bin&#x2F;python configure.py --confirm-license --no-designer-plugin --no-qml-plugin --disable&#x3D;dbus --disable&#x3D;QAxContainer --disable&#x3D;QtAndroidExtras --disable&#x3D;QtBluetooth --disable&#x3D;QtDBus --disable&#x3D;QtDesigner --disable&#x3D;Enginio --disable&#x3D;QtLocation --disable&#x3D;QtMacExtras --disable&#x3D;QtMultimedia --disable&#x3D;QtMultimediaWidgets --disable&#x3D;QtNfc --disable&#x3D;QtSerialPort --disable&#x3D;QtSql --disable&#x3D;QtSvg --disable&#x3D;QtTest --disable&#x3D;QtWinExtras --disable&#x3D;QtX11Extras --disable&#x3D;QtXml --disable&#x3D;QtXmlPatterns --disable&#x3D;pylupdate --disable&#x3D;pyrcc --qmake&#x3D;~&#x2F;Qt5.9.0&#x2F;5.9&#x2F;clang_64&#x2F;bin&#x2F;qmake --sip&#x3D;~&#x2F;.conda&#x2F;3.6&#x2F;bin&#x2F;sip &amp;&amp; make &amp;&amp; sudo make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"插曲\"><a class=\"markdownIt-Anchor\" href=\"#插曲\">#</a> 插曲</h2>\n<ol>\n<li>libcurl 版本要求 10.0，而我的是 9.0，原因是前面我自己摸索，乱装依赖，所以遇到了</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;anaconda3&#x2F;bin&#x2F;conda install -n 3.6 -c conda-forge libcurl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li>结果这个 libcurl 10.0.0 是装上了，可是 pygit2 版本不对了，conda 给升级了，PyQtClient 里 requirements.txt 要求这个包的版本（pygit2==0.27.2）几乎决定了其他的环境版本。后来还是老实的用 conda 去装了。这个连 python 版本什么的都会跟着变的。最后降级的结果是 python 3.6.7</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;anaconda3&#x2F;bin&#x2F;conda install -n 3.6 -c conda-forge libgit2&#x3D;&#x3D;0.27.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>至此总算是启动正常了。</p>\n",
            "tags": [
                "PyQt"
            ]
        },
        {
            "id": "https://pyqt5.com/calljava.html",
            "url": "https://pyqt5.com/calljava.html",
            "title": "Python调用Java对Excel截图",
            "date_published": "2019-03-12T13:15:06.000Z",
            "content_html": "<p>有的时候会遇到一些奇葩的需求，就是用 Excel 做报表，但是需要对里面的数据进行填充并生成报表图片，发送出去。这里记录用 python 调用 jar 包对 excel 文件进行公式计算和截图，数据填充可以用 xlrd 或者 openpyxl</p>\n<span id=\"more\"></span>\n<p>利用 <code>jpype</code>  模块初始化 java 虚拟机加载 jar 包然后执行其中的功能。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nCreated on 2019年3月12日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: CallJava\n@description: \n\"\"\"</span>\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">import</span> jpype\n\n\n__Author__ <span class=\"token operator\">=</span> <span class=\"token string\">'Irony'</span>\n__Copyright__ <span class=\"token operator\">=</span> <span class=\"token string\">'Copyright (c) 2019'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Workbook <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.Workbook'</span><span class=\"token punctuation\">)</span>\n    ImageFormat <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.ImageFormat'</span><span class=\"token punctuation\">)</span>\n    ImageOrPrintOptions <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'com.aspose.cells.ImageOrPrintOptions'</span><span class=\"token punctuation\">)</span>\n    SheetRender <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span><span class=\"token string\">'com.aspose.cells.SheetRender'</span><span class=\"token punctuation\">)</span>\n\n    book <span class=\"token operator\">=</span> Workbook<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'data/test.xlsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存为html</span>\n    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'data/index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 保存为pdf</span>\n    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'data/test.pdf'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 截图</span>\n    imgOptions <span class=\"token operator\">=</span> ImageOrPrintOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># imgOptions.setQuality(100)</span>\n    imgOptions<span class=\"token punctuation\">.</span>setOnePagePerSheet<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 输出图片格式</span>\n<span class=\"token comment\">#     imgOptions.setImageFormat(ImageFormat.getJpeg())</span>\n    imgOptions<span class=\"token punctuation\">.</span>setImageFormat<span class=\"token punctuation\">(</span>ImageFormat<span class=\"token punctuation\">.</span>getPng<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 计算</span>\n    CalculationOptions <span class=\"token operator\">=</span> jpype<span class=\"token punctuation\">.</span>JClass<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'com.aspose.cells.CalculationOptions'</span><span class=\"token punctuation\">)</span>\n    opt <span class=\"token operator\">=</span> CalculationOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 对Sheet1中的公式进行计算</span>\n    sheet <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>getWorksheets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">)</span>\n    sheet<span class=\"token punctuation\">.</span>calculateFormula<span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置区域</span>\n    pageSetup <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span>getPageSetup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 去掉边距</span>\n    pageSetup<span class=\"token punctuation\">.</span>setBottomMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setLeftMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setRightMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setTopMargin<span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置要截图的区域(对角线)</span>\n    pageSetup<span class=\"token punctuation\">.</span>setPrintArea<span class=\"token punctuation\">(</span><span class=\"token string\">'A0:C2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Create a SheetRender object for the target sheet</span>\n    sr <span class=\"token operator\">=</span> SheetRender<span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> imgOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> page <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>sr<span class=\"token punctuation\">.</span>getPageCount<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Generate an image for the worksheet</span>\n        sr<span class=\"token punctuation\">.</span>toImage<span class=\"token punctuation\">(</span>\n            page<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%d.png'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># emm这里不知道什么用绝对路径就报错</span>\n    libs <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;&#125;;&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'libs/bcprov-jdk16-146.jar'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'libs/aspose-cells-19.2.jar'</span>\n    <span class=\"token punctuation\">)</span>\n    command <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jpype<span class=\"token punctuation\">.</span>getDefaultJVMPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-ea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmn128m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xms512M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmx512M'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-Djava.class.path=&#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>libs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n    jpype<span class=\"token punctuation\">.</span>startJVM<span class=\"token punctuation\">(</span>jpype<span class=\"token punctuation\">.</span>getDefaultJVMPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-ea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmn128m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xms512M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-Xmx512M'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'-Djava.class.path=&#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>libs<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 解决多线程问题</span>\n    jpype<span class=\"token punctuation\">.</span>attachThreadToJVM<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 对excel截图</span>\n    convertToImage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 关闭虚拟机</span>\n    jpype<span class=\"token punctuation\">.</span>shutdownJVM<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'截图完成'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"附件\"><a class=\"markdownIt-Anchor\" href=\"#附件\">#</a> 附件</h2>\n<p><a href=\"/files/%E8%B0%83%E7%94%A8java%E7%94%9F%E6%88%90%E6%8A%A5%E8%A1%A8.7z\">调用 java 生成报表.7z</a></p>\n<p>解压后进入 whls 文件夹安装对应版本的 jpype 包</p>\n<h2 id=\"效果图\"><a class=\"markdownIt-Anchor\" href=\"#效果图\">#</a> 效果图</h2>\n<p><img src=\"/images/calljava.png\" alt=\"calljava\"></p>\n",
            "tags": [
                "Python",
                "截图"
            ]
        },
        {
            "id": "https://pyqt5.com/webviewnew.html",
            "url": "https://pyqt5.com/webviewnew.html",
            "title": "PyQt5编译QWebView与QWebEngineView共存",
            "date_published": "2019-01-12T11:28:06.000Z",
            "content_html": "<p>在 PyQt5.5 过后移除了 <code>QWebView</code>  控件，改用 <code>QWebEngineView</code> ，但是这个刚开始用起来不是很方便，最近在整理一些例子的时候需要同时使用 <code>QWebView</code>  和 <code>QWebEngineView</code> ，故希望把 <code>QWebView</code>  重新加入到后面的 PyQt5 版本中，查看 PyQt5.10.1 的源码发现里面其实是有 <code>QWebView</code>  的，只是因为 Qt5.10.1 中没有编译好的 dll 等导致无法编译。</p>\n<span id=\"more\"></span>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<ol>\n<li>安装 VS2015</li>\n<li>安装 Qt5.10.1</li>\n<li>前往 <a href=\"https://github.com/annulen/webkit/releases\">https://github.com/annulen/webkit/releases</a> 下载对应的文件，比如：qtwebkit-5.212.0_alpha2-qt59-msvc2015-x86.zip</li>\n<li>下载 PyQt5.10.1 源码</li>\n<li>下载对应版本的 sip 源码</li>\n</ol>\n<h2 id=\"编译\"><a class=\"markdownIt-Anchor\" href=\"#编译\">#</a> 编译</h2>\n<ol>\n<li>设置环境变量 <code>set PATH=D:\\soft\\Qt\\Qt5.10.1\\5.10.1\\msvc2015\\bin;%PATH%</code></li>\n<li>首先进入 vs2015 命令行编译 sip 并安装， <code>python configure.py &amp;&amp; nmake &amp;&amp; nmake install</code></li>\n<li>进入 PyQt5.10.1 源码编译安装即可</li>\n<li>如果要减少 PyQt5.10.1 的编译可以试试以下代码</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">D:\\soft\\Python35\\python configure.py --confirm-license --no-designer-plugin --no-qml-plugin --disable&#x3D;dbus --disable&#x3D;QAxContainer --disable&#x3D;QtAndroidExtras --disable&#x3D;QtBluetooth --disable&#x3D;QtDBus --disable&#x3D;QtDesigner --disable&#x3D;Enginio --disable&#x3D;QtLocation --disable&#x3D;QtMacExtras --disable&#x3D;QtMultimedia --disable&#x3D;QtMultimediaWidgets --disable&#x3D;QtNfc --disable&#x3D;QtSerialPort --disable&#x3D;QtSql --disable&#x3D;QtSvg --disable&#x3D;QtTest --disable&#x3D;QtWinExtras --disable&#x3D;QtX11Extras --disable&#x3D;QtXml --disable&#x3D;QtXmlPatterns --disable&#x3D;pylupdate --disable&#x3D;pyrcc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": [
                "PyQt",
                "QWebView",
                "浏览器"
            ]
        }
    ]
}