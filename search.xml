<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytest-qt 测试模态窗体.</title>
      <link href="/pytest_qt_modal_625781186.html"/>
      <url>/pytest_qt_modal_625781186.html</url>
      
        <content type="html"><![CDATA[<p>步骤分别是 :</p><ol><li><p>点击 开始扫描 弹出 选择路径窗口；</p></li><li><p>勾选路基；</p></li></ol><p>3. 点击确定；</p><span id="more"></span><p>大概想测一下这个界面 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-c1ed0bd52808c5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>步骤分别是 :</p><ol><li><p>点击 开始扫描 弹出 选择路径窗口；</p></li><li><p>勾选路基；</p></li></ol><p>3. 点击确定；</p><p>需要测试的函数 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-b5265859d74b269d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>测试函数 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-58f4310a54a815ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>可以发现断言失败 .</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-939c73b5be19c21e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>官方文档：测试模态窗体.</p><p><a href="https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html">https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html</a></p><p>用的是官方的  <code>monkeypatch</code>  方式 .</p><p>大致意思就是替换  <code>FileSelectPathDialog</code>  类的 exec 函数.</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest-qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Mac M1上快速安装PyQt5</title>
      <link href="/macm1pyqt.html"/>
      <url>/macm1pyqt.html</url>
      
        <content type="html"><![CDATA[<p>由于官方并没有在 M1 上编译 PyQt 导致安装存在一些问题。<br>M1 上的 Python 不能直接使用 x64 的 PyQt5。但是 M1 上可以运行 x64 的 Python。所以通过安装 x64 的 Python 然后再安装 PyQt5 即可。</p><span id="more"></span><p><strong>1. 安装 Python</strong><br><a href="https://www.python.org/ftp/python/3.9.13/python-3.9.13-macosx10.9.pkg">python-3.9.13-macosx10.9.pkg</a></p><p><strong>2. 勾选自定义同时只勾选安装 pip</strong></p><p><img src="/images/macpyqtstep1.png" alt="step1.png"></p><p><img src="/images/macpyqtstep2.png" alt="step1.png"></p><p><strong>3. 设置 pip 源</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class="token function">install</span> pqi/Library/Frameworks/Python.framework/Versions/3.9/bin/pqi use tuna<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4. 安装 PyQt5</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class="token function">install</span> PyQt5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5. 测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/macpyqtstep3.png" alt="step3.png"></p><p>📢📢📢</p><p>也可以直接安装 <a href="https://docs.anaconda.com/free/miniconda/miniconda-install/">Miniconda</a></p><p>然后：conda install -c conda-forge pyqt</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> Mac </tag>
            
            <tag> M1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 判断屏幕等宽字符串的长度 　</title>
      <link href="/equal_str_width_625781186.html"/>
      <url>/equal_str_width_625781186.html</url>
      
        <content type="html"><![CDATA[<p>判断屏幕等宽字符串的长度？</p><span id="more"></span><p>判断屏幕等宽字符串的长度？</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-58b19652011e153a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>【新手】重庆 - 搬砖 - NoWait 22:41:50  @北京 - BUG 开发 - 黑择明 求指点<br>【专家】北京 - BUG 开发 - 黑择明  22:43:04  fontMetrics<br>【专家】 <a href="https://pyqt.site">https://pyqt.site</a> (892768447) 22:43:54  QFontMetrics<br>【专家】 <a href="https://pyqt.site">https://pyqt.site</a> (892768447) 22:44:09  通过 QLabel.font ().fontMetrics () 得到</p><p>【新手】重庆 - 搬砖 - NoWait 22:52:00<br><a href="https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size">https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size</a><br><img src="https://upload-images.jianshu.io/upload_images/10769157-9dc2f83609106252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>【新手】重庆 - 搬砖 - NoWait 22:53:15  感觉和 fontMetrics 应该是差不多的</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-411570eeadf51793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><p>【专家】北京 - BUG 开发 - 黑择明       (996742224) 11:29:04<br>fm = QFontMetrics(QFont())<br>fm.width(“qweqwe”)</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改pyuic代替pyside2-uic.</title>
      <link href="/use_pyuic_insteadof_pyside2uic.html"/>
      <url>/use_pyuic_insteadof_pyside2uic.html</url>
      
        <content type="html"><![CDATA[<p>修改 pyuic 代替 pyside2-uic</p><span id="more"></span><p>修改 pyuic 代替 pyside2-uic.</p><p>最近看到挺多人用 pyside2 的 uic 编译 ui 文件有问题 .<br> 写个解决办法.</p><p>首先，<br> <code>pip install qtpy</code>  ,<br> 这个是兼容 pyqt5 和 pyside2 的，无缝转换 .</p><p>然后，<br> 修改 pyqt5 的 uic ,</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-2ed1053f322c26a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>最后用 pyuic5 , 生成 Ui_XXX.py 文件 .</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 PySide2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt学习心得</title>
      <link href="/studynotes.html"/>
      <url>/studynotes.html</url>
      
        <content type="html"><![CDATA[<p>在学习 PyQt 的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习 PyQt 的方法，提高自身的学习能力。</p><span id="more"></span><h2 id="python基础"><a class="markdownIt-Anchor" href="#python基础">#</a> Python 基础</h2><p>在学习和使用 PyQt 之前需要熟练使用 Python，经过对 QQ 群里经常提问的问题的分析，发现大部分人对 Python 中的基础知识掌握不牢固导致很多基础问题，如果要想更好的使用 Python 以及它的扩展必需要进行系统的学习。这里列举一下常用的知识点。</p><ol><li>类　　　　　　　 　<a href="https://www.runoob.com/python3/python3-class.html">参考资料</a></li><li>类的继承</li><li>类的多继承</li><li>类方法重写　　　　 <a href="https://www.runoob.com/w3cnote/python-extends-init.html">参考资料</a></li><li>类中的 super 函数　　<a href="https://www.runoob.com/python/python-func-super.html">参考资料</a></li><li>函数调用 / 参数类型</li><li>对象调用 (参考第 1 点)</li></ol><p>必须熟练掌握上面的知识点后入门 PyQt 才比较容易，如果初学者对上面的知识点还不是很了解，本文不适合继续往下阅读。</p><h2 id="设计师"><a class="markdownIt-Anchor" href="#设计师">#</a> 设计师</h2><p>Qt 设计师除了方便快速设计一些简单的界面外，其实笔者觉得更大的作用在于帮助用户熟悉各类控件、属性、信号等</p><ol><li>这里建议初学者不要急于求成，打开设计师新建一个 <code>Widget</code>  的窗口，比如</li></ol><p><img src="/images/studynotes/desiger_create.png" alt="desiger_create"></p><ol start="2"><li>然后把左侧的所有控件挨个拖动到中间的窗口中，比如这里拖动一个<strong> Push Button</strong> 按钮</li></ol><p><img src="/images/studynotes/desiger_drag.png" alt="desiger_drag"></p><ol start="3"><li>在设计师右下角的属性编辑器中列举了该控件的所有父类，意味着可以调用和重写父类的所有方法，建议初学者把这个属性编辑器的所有属性挨个调整看看效果，部分控件可能需要<strong> Ctrl+R</strong> 预览界面才能看到，同时像<strong> QListWidget，QTreeWidget，QTableWidget</strong> 等某些控件需要在控件上右键增加数据才可以</li></ol><p><img src="/images/studynotes/desiger_property.png" alt="desiger_property"><br><img src="/images/studynotes/desiger_property2.png" alt="desiger_property2"></p><ol start="4"><li>两个控件之间简单的信号槽关联可以通过设计师快速的设置</li></ol><p><img src="/images/studynotes/desiger_signal.png" alt="desiger_signal"><br><img src="/images/studynotes/desiger_signal2.png" alt="desiger_signal2"></p><ol start="5"><li>提高进阶的方法，当你需要手动写代码实现界面的时候，不妨把 UI 文件转出 PY 文件，看看是如何构造的（这里涉及到布局等知识见后文）</li></ol><h2 id="布局"><a class="markdownIt-Anchor" href="#布局">#</a> 布局</h2><p>Qt 界面提供了方便的 4 种基本布局，<strong>QVboxLayout，QHboxLayout，QFormLayout，QGridLayout</strong>，初学者需要数量掌握这 4 种布局外加 2 种拉伸器（占位挤压）</p><p>首先需要知道 Qt 界面的中控件的层级顺序以及 parent，parent 的作用既作为子控件的父元素也可以自动管理 Qt 的对象（具体可以搜索下关于 Qt parent 的资料）</p><ol><li>在没有布局的情况下，在设计师中拖动摆放的控件是一层一层的叠加覆盖，此时每个添加的子控件的 parent 都是最外层的控件</li></ol><p><img src="/images/studynotes/desiger_stack.png" alt="desiger_stack"></p><ol start="2"><li>如果需要界面中的控件自动适应高度宽度，此时则需要使用 4 种布局来包裹里面的子控件，注意的是：布局不是控件不能设置高度宽度和样式等，是一个抽象的东西，就好比是一根橡皮筋包裹几个矩形的物品；布局也可以设置一些属性（在设计师属性编辑器中），比如设置两者直接的间距，设置距离上下左右的间距，设置比例等</li></ol><p><img src="/images/studynotes/desiger_layout.png" alt="desiger_layout"></p><ol start="3"><li>在没有布局或者有布局的时候。可以添加容器控件（<strong>QWidget，QFrame，QGroupBox，QScrollArea，QToolBox，QTabWidget，QStackedWidget，QMidArea，QDockWidget</strong>）这些容器可以放置子控件，从而循环嵌套。</li></ol><h2 id="例子"><a class="markdownIt-Anchor" href="#例子">#</a> 例子</h2><p>在 PyQt5.5 的时候自带了一个例子文件夹（后面的版本没有的话可以下载 PyQt5 源码，里面有个 examples 文件夹），想要熟练的掌握 PyQt 还需要从自带的例子中学习，必须要每个例子都运行一次然后看看这个例子实现了什么，这样才能记忆深刻。<br>同时很多开发者在<a href="https://github.com/PyQt5/PyQt"> https://github.com/PyQt5/PyQt</a> 分享了各类进阶例子，同时也欢迎大家共同完善该项目，提供更多更好的例子。另外也可以下载该项目的客户端<a href="https://github.com/PyQt5/PyQtClient/releases"> PyQtClient</a> 软件，支持运行其中的例子</p><p>建议在更深入的学习 PyQt 之前多看看一些例子。</p><h2 id="文档"><a class="markdownIt-Anchor" href="#文档">#</a> 文档</h2><p>接下来要说的就是 Qt 的 api 文档，<a href="https://doc.qt.io/qt-5/classes.html">官网文档</a>，这里其实不要害怕是英文就不想看，觉得看不懂了，其实官网的文档还是比较简洁的，而且函数名也比较直观就能知道意思。也可以用谷歌浏览器打开右键翻译，基本上都能看懂。笔者前期写过一篇<a href="/viewapi.html">如何查阅 Qt 文档</a>的文档可以阅读学习一番。</p><p>这里就拿<a href="https://doc.qt.io/qt-5/qwebengineview.html"> QWebEngineView</a> 举一个例子，首先初学者在使用这个浏览器控件时候，会有诸多的问题比如：Cookie，拦截器等就不知道如何去调用函数来设置</p><ol><li>首先打开官网文档 <a href="https://doc.qt.io/qt-5/qwebengineview.html">https://doc.qt.io/qt-5/qwebengineview.html</a>，可以看到只有少量的函数可以调用，寻找一番并没有发现和 Cookie 相关的东西，这个时候就需要把重点放在有特俗返回值的函数上，比如：</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QWebEngineHistory *          history() constQWebEnginePage *          page() constQWebEngineSettings *      settings() const<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三个函数返回了一个类实例，就意味着可以调用其中的方法。</p><ol start="2"><li><p>点击<strong> page ()<strong> 打开 <a href="https://doc.qt.io/qt-5/qwebenginepage.html">https://doc.qt.io/qt-5/qwebenginepage.html</a>，发现没有 cookie 相关的东西，只有</strong> QWebEngineProfile *profile () const</strong> 这个函数比较可疑。</p></li><li><p>点击 **profile ()** 打开 <a href="https://doc.qt.io/qt-5/qwebengineprofile.html">https://doc.qt.io/qt-5/qwebengineprofile.html</a>，在浏览器中搜索 <code>cookie</code>  发现这个类中包含大量和 cookie 相关的东西，比如：**QWebEngineCookieStore *cookieStore ()`** 从名字上可以猜测大概意思为 cookie 储存</p></li><li><p>点击 **cookieStore ()** 打开 <a href="https://doc.qt.io/qt-5/qwebenginecookiestore.html">https://doc.qt.io/qt-5/qwebenginecookiestore.html</a>，此时就会发现这个类里面包含了删除和设置 cookie 的方法。</p></li><li><p>但是找到了这些方法后，面对初学者又一个问题来了，该如何去用？根据上面 4 点整理一下，把他们当做简单的 Python 对象，方法和操作方法和 class 一样的。</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>webview <span class="token operator">=</span> QWebEngineView<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到page</span>page <span class="token operator">=</span> self<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到profile</span>profile <span class="token operator">=</span> page<span class="token punctuation">.</span>profile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到cookieStore</span>cookieStore <span class="token operator">=</span> profile<span class="token punctuation">.</span>cookieStore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空cookie</span>cookieStore<span class="token punctuation">.</span>deleteAllCookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 用简短代码来表达就是</span>cookieStore <span class="token operator">=</span> self<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cookieStore<span class="token punctuation">(</span><span class="token punctuation">)</span>cookieStore<span class="token punctuation">.</span>deleteAllCookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常调试"><a class="markdownIt-Anchor" href="#异常调试">#</a> 异常调试</h2><p>可能有时候由于粗心，或者调用了一些非法函数，参数错误等会导致程序出现一些异常，首先第一步复制最后一行的错误去百度或者谷歌搜索，大多时候能找到问题所在。其次如果搜索不到或者自己的异常可能是由于某个变量的值不对引起的，就需要在编辑器中打断点使用 DEBUG 模式调试变量值（如果不会可以采用麻烦一点的办法：用 <code>print</code>  打印出变量值）</p><p>遇到问题后首先需要自己多调试排查问题，不要一遇到问题就去问，自己多尝试一个一个排查直到找到问题所在并解决，这也是一种提高自身能力的地方。</p><h2 id="检索资料"><a class="markdownIt-Anchor" href="#检索资料">#</a> 检索资料</h2><p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。信息检索是每个程序猿必备的能力之一，其好处在于可以更快更准确的在茫茫网络海洋中找到自己所需要的东西，这个过程需要长期不断积累和练习。</p><ol><li>中文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt 拖拽</li><li>英文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt Drag Drop</li></ol><h2 id="片尾"><a class="markdownIt-Anchor" href="#片尾">#</a> 片尾</h2><p>好了，笔者基本上的学习过程就整理如上，这并不是说每个人都适合这样的方法，但至少笔者是这样一步一步走过来的。当你养成了一个学习、发现和解决问题的好习惯时就会慢慢得心应手。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 状态机模块 　</title>
      <link href="/python_statemachine_625781186.html"/>
      <url>/python_statemachine_625781186.html</url>
      
        <content type="html"><![CDATA[<p>用状态来取代 if…else 判断。</p><span id="more"></span><p>GUI 涉及到挺多的状态改变，以前一直用 if…else 来判断，最近读了设计模式，发现有个状态模式，随后发现了状态机这个东西 .</p><p>python 的状态机模块挺多的，不过好像很多都不更新了.<br> 推荐 2 个状态机模块，但是也没有太深入的使用经验，就跑跑例子，以后有更详细的 pyqt 例子再补上 .</p><p>1:  <code>pip install python-statemachine</code></p><p>官方例子 : <a href="https://github.com/fgmacedo/python-statemachine">https://github.com/fgmacedo/python-statemachine</a></p><p>2. <code>pip install state_machine</code></p><p>官方例子 : <a href="https://github.com/jtushman/state_machine">https://github.com/jtushman/state_machine</a></p><p>1 的 最近一次更新在 6 个月以前，使用 <code>类继承</code> 和 <code>mixin</code>  方式，不过有些地方不如 2 个人性化；</p><p>2 的设计更人性化一些，包括状态改变 <code>before</code>  和  <code>after</code>  , 不过由于是装饰器实现的动态增加属性，有些地方编辑器智能提示可能就靠不上了.</p><p>两者实现实现方式不一样，有兴趣可以读读源码 .</p><ol start="3"><li>qt 内置状态机框架</li></ol><p><a href="https://blog.csdn.net/amnes1a/article/details/62418196">https://blog.csdn.net/amnes1a/article/details/62418196</a></p><p><a href="https://blog.csdn.net/dongfenghuojian/article/details/78187131">https://blog.csdn.net/dongfenghuojian/article/details/78187131</a></p><p><a href="http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html">http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html</a> (系列教程)</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在pyqt中使用python全局钩子模块</title>
      <link href="/pyqt5_hook_key_625781186.html"/>
      <url>/pyqt5_hook_key_625781186.html</url>
      
        <content type="html"><![CDATA[<p>在某些时候需要为自己的软件增加全局键盘监听，比如软件最小化隐藏后可以通过热键唤醒，又或者比如像 QQ 一样可以全局热键截图。这里介绍几个方法实现在 PyQt 中使用 Python 全局钩子模块实现全局热键功能。</p><span id="more"></span><ol><li><code>pyHook3</code></li></ol><p>安装命令 :  <code>pip install pyhook3</code></p><p><a href="https://blog.csdn.net/q871063970/article/details/86648386">https://blog.csdn.net/q871063970/article/details/86648386</a></p><p>似乎将 pyhook 支持 py3 版本的了？没有太多研究.</p><p>缺点：只支持 win 平台.</p><p>2. <code>keyboard</code>  &amp;  <code>mouse</code></p><p>安装命令:  <code>pip install keyboard mouse</code></p><pre class="line-numbers language-none"><code class="language-none">from PyQt5 import  QtGui, QtWidgets, QtCorefrom PyQt5.QtCore import *from PyQt5.QtGui import *from PyQt5.QtWidgets import *import keyboardclass Window(QWidget):    def __init__(self, *args, **kwargs):        super(Window, self).__init__(*args, **kwargs)        layout &#x3D; QVBoxLayout(self)        self.testBtn &#x3D; QPushButton(self)        layout.addWidget(self.testBtn)        keyboard.add_hotkey(&#39;ctrl+shift+x&#39;, lambda:print(&#39;triggered&#39;, &#39;hotkey&#39;))        keyboard.add_hotkey(&#39;ctrl+shift+c&#39;, self.abc,args&#x3D;(&#39;aa&#39;,&quot;bb&quot;,&quot;cc&quot;))    def abc(self,a,b,c):        print(a,b,c)        if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    import sys    from PyQt5.QtWidgets import QApplication    app &#x3D; QApplication(sys.argv)    w &#x3D; Window()    w.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更详细例子 : <a href="https://github.com/PyQt5/PyQt/blob/63c6376358acb1863313fb5593097e6e0210cad6/Test/%E5%85%A8%E5%B1%80%E7%83%AD%E9%94%AE/HotKey.py">pyqt 中使用 keyboard 全局热键</a></p><p>优点：跨平台；</p><p>缺点：模块名字取得太差，不容易被发现.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyqt hook key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像读文章一样读源码</title>
      <link href="/read_open_source.html"/>
      <url>/read_open_source.html</url>
      
        <content type="html"><![CDATA[<p>使用 snoop, 像读文章一样读源码。</p><span id="more"></span><p>不得不说 开源项目没有一个提纲 ， 看起来太操蛋了。问了作者， 作者说 ， 你运行下主函数， 然后慢慢跟 。。。<br><img src="https://upload-images.jianshu.io/upload_images/10769157-b274b7acaecf49bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>没有目的地概览 ， 不知不觉就追究到细节里面去了。</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-1304cc87fcd42cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>所以这一篇文章的目地就是 ， 如何在没有提纲的情况下 ， 能更好的只关注流程 ， 而不是细节 。</p><p>开始 ：</p><ol><li>python DEBUG 模块介绍 :<br>　前段时间看过挺多文章提到 pysoonper 这个调试模块，有兴趣的可以百度一下.<br> 个人尝试了一下，篇幅过大的 DEBUG 不适合用 pysoonper , 因为没有缩进！<br>　这几天偶然遇到一个二次封装的模块<a href="%5Bhttps://github.com/alexmojaki/snoop%5D(https://github.com/alexmojaki/snoop)"> snoop</a>, 完美地解决了这个问题.</li><li>操作步骤 :</li></ol><ul><li>1 .  在 <code>eric6.py</code>  的 <code>main()</code>  函数上加 snoop 装饰器；<br><img src="https://upload-images.jianshu.io/upload_images/10769157-74129f6a6c303b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li><li>2 . 用 vscode 打开  <code>eric6start_.log</code>   文件 (8 层深度 log 文件 34W 行，pycharm 对大文件支持很差);<br><img src="https://upload-images.jianshu.io/upload_images/10769157-ae946c117a082c24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="log文件"></li></ul><p>发现可以折叠 ， 但是最大可折叠等级只到 5 级 ， 而且无法对对应等级折叠 ， 有点遗憾 。也许是.log 格式选得不太好， 不知道是否有更好的后缀格式。</p><ul><li>3 . vscode 配置 log 文件关键字高亮；<br>安装高亮插件<br><img src="https://upload-images.jianshu.io/upload_images/10769157-8f6fee2356d7071d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br> 配置高亮关键字<br><img src="https://upload-images.jianshu.io/upload_images/10769157-a135fd015409b3da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>将 <code>call</code>  和 <code>return</code>  给加进去.</p><ul><li>4 . 增加阶段关键字；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/10769157-c39d01a02149e808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eric6启动阶段"></p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-aef5704c36824dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>加 <code>#000</code>  是为了方便搜索 。<br>需要自己手动折叠 。<br>可以发现 每个 <code>splash.showMessage()</code>  都是一个阶段 ， 展开折叠之后就是每个阶段具体执行细节 。</p><hr><h3 id="ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢"><a class="markdownIt-Anchor" href="#ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢">#</a> ps: vscode 阅读 log 文件还是有一些不方便的地方，除了在 2. 中提到的，还有包括关闭文件再打开，折叠状态不会保留，有其他更好的方式 请留言告诉我，谢谢.</h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> debug </tag>
            
            <tag> snoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 获取子进程print信息 　</title>
      <link href="/pyqt_get_subprocess_pipeline_625781186.html"/>
      <url>/pyqt_get_subprocess_pipeline_625781186.html</url>
      
        <content type="html"><![CDATA[<p>在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。</p><span id="more"></span><p>问题所在：</p><p><img src="https://i.loli.net/2019/05/24/5ce793171984f27031.png" alt="image.png"></p><p>如果模块都由自己开发， 正常操作</p><p><img src="https://i.loli.net/2019/05/24/5ce7933994a0090037.png" alt="image.png"></p><p>但是因为不能改，所以只能拦截：<br>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pythonPath <span class="token operator">=</span> self<span class="token punctuation">.</span>pythonPath_cb<span class="token punctuation">.</span>currentText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> suffix <span class="token operator">==</span> <span class="token string">"py"</span><span class="token punctuation">:</span>    <span class="token comment"># 首次</span>    self<span class="token punctuation">.</span>pyCommand <span class="token operator">=</span> <span class="token punctuation">[</span>pythonPath<span class="token punctuation">,</span> path<span class="token punctuation">]</span>    self<span class="token punctuation">.</span>modifiedReloadPython<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modifiedReloadPython</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path_<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>path_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 子进程调用</span>    self<span class="token punctuation">.</span>p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pyCommand<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>    <span class="token comment"># self.stdoutWorker.p = self.p</span>    self<span class="token punctuation">.</span>stdoutWorker <span class="token operator">=</span> Worker<span class="token punctuation">(</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>stdoutWorker<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>error_te<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"PYDEBUG:\n"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>stdoutWorker<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_signal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p <span class="token operator">=</span> p    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            QApplication<span class="token punctuation">.</span>processEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>p <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> self<span class="token punctuation">.</span>p<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># line = line.strip()</span>                <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">b''</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        info <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>info<span class="token punctuation">)</span>                    <span class="token keyword">except</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> subprocess.Popen </tag>
            
            <tag> 拦截print </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QtWebkit和QWebEngineView与Javascript交互</title>
      <link href="/qtwebjs.html"/>
      <url>/qtwebjs.html</url>
      
        <content type="html"><![CDATA[<p>以前还是 <code>QWebView</code>  的时候和 <code>Javascript</code>  交互起来很方便，但是到了 Qt5.6 以后改用了 <code>QWebEngineView</code> ，并通过其提供的 <code>qwebchannel.js</code>  来进行交互。可能是由于刚出来的原因，这玩意儿有个 bug 就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对 <code>QWebView</code>  和 <code>QWebEngineView</code>  与 Js 交互都做了一个示例。</p><span id="more"></span><h2 id="说明"><a class="markdownIt-Anchor" href="#说明">#</a> 说明</h2><ol><li>针对 <code>QWebView</code>  通过 <code>QWebFrame</code>  的 <code>addToJavaScriptWindowObject</code>  把对象传递到 <code>Javascript</code>  中</li><li>针对 <code>QWebEngineView</code>  通过 <code>QWebChannel.registerObject('Bridge', QObject)</code>  把对象传递到 <code>Javascript</code>  中</li><li>可以通过 <code>@pyqtSlot</code>  装饰器来申明该方法可以暴露给 <code>Javascript</code>  调用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>针对 <code>QWebView</code>  在 <code>Javascript</code>  中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）</span>Bridge<span class="token punctuation">.</span>windowTitleChanged<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"标题被修改为："</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定自定义的信号customSignal</span>Bridge<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"收到自定义信号内容："</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>针对 <code>QWebEngineView</code>  在 <code>Javascript</code>  中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">QWebChannel</span><span class="token punctuation">(</span>qt<span class="token punctuation">.</span>webChannelTransport<span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">channel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>Bridge <span class="token operator">=</span> channel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>Bridge<span class="token punctuation">;</span>                <span class="token comment">// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）</span>        Bridge<span class="token punctuation">.</span>windowTitleChanged<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"标题被修改为："</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 绑定自定义的信号customSignal</span>        Bridge<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"收到自定义信号内容："</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><code>QWebView</code> ： <a href="https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py">https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py</a></p><p><code>QWebEngineView</code> ： <a href="https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py">https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py</a></p><ol><li>针对 <code>QWebView</code>  的核心实现</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span>QWebView<span class="token punctuation">)</span><span class="token punctuation">:</span>    customSignal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>WebView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initSettings<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 暴露接口对象</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>javaScriptWindowObjectCleared<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_exposeInterface<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_exposeInterface</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向Js暴露调用本地方法接口        """</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addToJavaScriptWindowObject<span class="token punctuation">(</span><span class="token string">'Bridge'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>    <span class="token comment"># 注意pyqtSlot用于把该函数暴露给js可以调用</span>    <span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sendCustomSignal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 发送自定义信号</span>        self<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'当前时间: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>针对 <code>QWebEngineView</code>  的核心实现</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WebEngineView</span><span class="token punctuation">(</span>QWebEngineView<span class="token punctuation">)</span><span class="token punctuation">:</span>    customSignal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>WebEngineView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> QWebChannel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment"># 把自身对象传递进去</span>        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>registerObject<span class="token punctuation">(</span><span class="token string">'Bridge'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token comment"># 设置交互接口</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setWebChannel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>channel<span class="token punctuation">)</span>    <span class="token comment"># 注意pyqtSlot用于把该函数暴露给js可以调用</span>    <span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sendCustomSignal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 发送自定义信号</span>        self<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'当前时间: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QWebEngineView/ScreenShot/JsSignals.gif" alt="JsSignals"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> QWebView </tag>
            
            <tag> QWebEngineView </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5窗口翻转动画</title>
      <link href="/flipwidgetanimation.html"/>
      <url>/flipwidgetanimation.html</url>
      
        <content type="html"><![CDATA[<p>QQ 的界面一直是用来模仿练习做界面的好东西，这里就有一个类似 QQ 登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了 <code>QStackedWidget</code>  包含两个控件做切换，同时单独使用一个窗口做动画绘制。</p><span id="more"></span><h2 id="原理说明"><a class="markdownIt-Anchor" href="#原理说明">#</a> 原理说明</h2><ol><li>用了两个 <code>QLabel</code>  来显示模拟的图片界面，并实现鼠标点击模拟真实的窗口对应位置点击</li><li>用了 <code>QStackedWidget</code>  来存放上面的两个界面 <code>QLabel</code></li><li>点击切换时主要是对上面的两个界面进行截图并传递给翻转动画窗口</li><li>通过 <code>setWindowOpacity</code>  控制主窗口的显示隐藏（保留任务栏），当然也可以用 <code>hide</code></li><li>动画窗口 <code>FlipWidget.py</code>  主要实现两张图片的翻转显示，考虑到 0-90 和 90-180 之前的情况，以及图片的缩放动画</li></ol><h2 id="核心实现"><a class="markdownIt-Anchor" href="#核心实现">#</a> 核心实现</h2><ol><li>主要是在 <code>paintEvent</code>  方法中使用 <code>QTransform</code>  对 <code>QPainter</code>  进行圆心变换以及 <code>rotate</code>  设置翻转角度</li><li>同时根据翻转的角度范围对图片进行切换和缩放</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>FlipWidget<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>paintEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'image1'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'image2'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>isVisible<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>SmoothPixmapTransform<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 变换</span>        transform <span class="token operator">=</span> QTransform<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 把圆心设置为矩形中心</span>        transform<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_angle <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>_angle <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token comment"># 当翻转角度在90范围内显示第一张图，且从大图缩放到小图的过程</span>            painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 设置翻转角度</span>            transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_angle<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>YAxis<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setTransform<span class="token punctuation">(</span>transform<span class="token punctuation">)</span>            <span class="token comment"># 缩放图片高度</span>            width <span class="token operator">=</span> self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>                         <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_angle <span class="token operator">/</span> self<span class="token punctuation">.</span>Scale<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            image <span class="token operator">=</span> self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span>                Qt<span class="token punctuation">.</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>                QPointF<span class="token punctuation">(</span><span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 当翻转角度在90范围内显示第二张图，且从小图缩放到原图的过程</span>            painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_angle <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                angle <span class="token operator">=</span> <span class="token number">180</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_angle            <span class="token keyword">else</span><span class="token punctuation">:</span>                angle <span class="token operator">=</span> self<span class="token punctuation">.</span>_angle <span class="token operator">-</span> <span class="token number">180</span>            <span class="token comment"># 设置翻转角度， 注意这里角度有差异</span>            transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>angle<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>YAxis<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setTransform<span class="token punctuation">(</span>transform<span class="token punctuation">)</span>            <span class="token comment"># 缩放图片高度</span>            width <span class="token operator">=</span> self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>                         <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>Scale <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            image <span class="token operator">=</span> self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span>                Qt<span class="token punctuation">.</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>                QPointF<span class="token punctuation">(</span><span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py">https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py</a></p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QPropertyAnimation/ScreenShot/FlipWidgetAnimation.gif" alt="FlipWidgetAnimation"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 动画 </tag>
            
            <tag> 翻转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt属性动画(QPropertyAnimation)</title>
      <link href="/QPropertyAnimation.html"/>
      <url>/QPropertyAnimation.html</url>
      
        <content type="html"><![CDATA[<p><code>QPropertyAnimation</code>  继承自 <code>QVariantAnimation</code> ，其作为 Qt 的属性动画用于针对控件的属性或者继承自 <code>QObject</code>  的对象中定义的属性做修改，<br>简单来说就是基类是 <code>QObject</code>  且定义了属性变量，就可以用 <code>QPropertyAnimation</code>  来做属性动画。同时也可以通过 <code>pyqtProperty</code>  来增加自定义属性。</p><span id="more"></span><p>首先，通过构造函数 <code>QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)</code>  创建一个对象，其中</p><ol><li>第一个参数是动画作用的对象，也可以通过 <code>setTargetObject</code>  设置</li><li>第二个参数是属性名，在 py3 中类型是 bytes，也可以通过 <code>setPropertyName</code>  设置</li></ol><h2 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> 函数</h2><p>一些常见的设置函数</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">setPropertyName</td><td style="text-align:left">设置属性名</td></tr><tr><td style="text-align:left">setTargetObject</td><td style="text-align:left">设置动画作用对象</td></tr><tr><td style="text-align:left">setDuration</td><td style="text-align:left">设置动画持续时间（毫秒）</td></tr><tr><td style="text-align:left">setStartValue</td><td style="text-align:left">设置开始值</td></tr><tr><td style="text-align:left">setEndValue</td><td style="text-align:left">设置结束值</td></tr><tr><td style="text-align:left">setEasingCurve</td><td style="text-align:left">设置动画曲线</td></tr><tr><td style="text-align:left">setKeyValueAt</td><td style="text-align:left">插入线性值</td></tr><tr><td style="text-align:left">setLoopCount</td><td style="text-align:left">设置循环次数（-1 为永久）</td></tr></tbody></table><h2 id="示例"><a class="markdownIt-Anchor" href="#示例">#</a> 示例</h2><p>比如这个例子：</p><ol><li>修改控件的 <code>geometry</code>  大小</li><li>修改自定义属性</li><li>修改进度条的 value 值</li></ol><p><img src="/images/QPropertyAnimation.gif" alt="QPropertyAnimation"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年5月8日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: @description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QPropertyAnimation<span class="token punctuation">,</span> QRect<span class="token punctuation">,</span> pyqtProperty<span class="token punctuation">,</span> QEasingCurve<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span>\    QLabel<span class="token punctuation">,</span> QProgressBar<span class="token punctuation">,</span> QSpacerItem<span class="token punctuation">,</span> QSizePolicy__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'属性动画测试'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doStart<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonc <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'自定义属性 测试'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonc<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doStartCustom<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>progressbar <span class="token operator">=</span> QProgressBar<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>QSpacerItem<span class="token punctuation">(</span>            <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> QSizePolicy<span class="token punctuation">.</span>Fixed<span class="token punctuation">,</span> QSizePolicy<span class="token punctuation">.</span>Fixed<span class="token punctuation">)</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonc<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>progressbar<span class="token punctuation">)</span>        <span class="token comment"># 进度条动画</span>        self<span class="token punctuation">.</span>progressStart<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 此处是自定义属性，并通过动画修改后，设置QLabel的值</span>    <span class="token decorator annotation punctuation">@pyqtProperty</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value    <span class="token decorator annotation punctuation">@value<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> v        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'当前值：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">doStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 第一个参数是要执行的对象</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">,</span> <span class="token string">b'geometry'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        <span class="token comment"># 缓和曲线风格,加了曲线动画会很大程度影响</span>        animation<span class="token punctuation">.</span>setEasingCurve<span class="token punctuation">(</span>QEasingCurve<span class="token punctuation">.</span>OutBounce<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">doStartCustom</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 自定义属性动画</span>        <span class="token comment"># 由于定义的属性是在继承的QWidget, 所以第一个参数是self</span>        <span class="token comment"># 第二个参数就是 value</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">b'value'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        animation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">progressStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 进度条动画</span>        <span class="token comment"># 这里 value是QProgressBar自带的属性，具体可以看文档</span>        <span class="token comment"># https://doc.qt.io/qt-5/qprogressbar.html#properties</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>progressbar<span class="token punctuation">,</span> <span class="token string">b'value'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        animation<span class="token punctuation">.</span>setLoopCount<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 这里采用插入线性值,第一个参数的范围是（0-1）</span>        <span class="token comment"># 第二个参数的范围是进度（最小值-最大值）</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查阅Qt文档</title>
      <link href="/viewapi.html"/>
      <url>/viewapi.html</url>
      
        <content type="html"><![CDATA[<p>很多网友在问有没有 PyQt5 的文档之类的问题，在 PyQt4 的时候 PyQt 官网有了英文版的文档，随后有网友翻译成了中文。不过现在 PyQt5 官方的文档都指向了 C<ins> 的 Qt 文档，其实 C</ins> 的 Qt API 文档结构很清晰，翻阅很容易的，需要注意几点。</p><span id="more"></span><p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。</p><p>拿 Qt C++ 文档来说，官网地址是：<a href="https://doc.qt.io/qt-5/qtwidgets-module.html">https://doc.qt.io/qt-5/qtwidgets-module.html</a> 这里面记录了所有控件的详细函数文档。</p><p>比如拿 输入框  <code>QLineEdit</code>  来说，怎么去查询它的用法和信号槽等资料？</p><p><a href="https://doc.qt.io/qt-5/qlineedit.html">https://doc.qt.io/qt-5/qlineedit.html</a></p><h2 id="左侧目录"><a class="markdownIt-Anchor" href="#左侧目录">#</a> 左侧目录</h2><p>在文档左侧目录中有如下几个：</p><p>Properties - 控件里的属性（比如宽高等，通常需要当作函数调用）</p><p>Public Slots - 这个是控件自己的槽函数（当作普通函数就行）</p><p>Signals - 这个是输入框的包含的信号</p><p>Public Functions、Reimplemented Public Functions、Static Public Members、Protected Functions、Reimplemented Protected Functions - 这几个都是函数列表</p><p><img src="/images/howtoviewapi1.png" alt="howtoviewapi1"></p><h2 id="类说明"><a class="markdownIt-Anchor" href="#类说明">#</a> 类说明</h2><p><img src="/images/howtoviewapi2.png" alt="howtoviewapi2"></p><p>这里有两个注意点</p><ol><li>红色方框内的表示该控件（输入框）继承于 <code>QWidget</code> ，所以该控件（输入框）拥有父类的所有方法和信号，当当前文档找不到相关资料和函数时，可以去父类找找看。</li><li>紫色方框内表示列举所有的方法（包括父类）</li></ol><h2 id="函数列表"><a class="markdownIt-Anchor" href="#函数列表">#</a> 函数列表</h2><p><img src="/images/howtoviewapi3.png" alt="howtoviewapi3"></p><p>这里列举的就是该控件（输入框）的函数，同理点击上面的紫色方框是查看所有方法，一般这里主要用来查询你需要的功能函数，Qt 的函数名比较容易理解，比如：只读 ReadOnly，选择文字：setSelection。</p><p>所以再查下这部分资料的时候建议在浏览器中 Ctrl + F 打开浏览器的搜索框，并输入英文关键词来检索你所需要的函数在哪里。</p><p><img src="/images/howtoviewapi8.png" alt="howtoviewapi8"></p><h2 id="槽函数"><a class="markdownIt-Anchor" href="#槽函数">#</a> 槽函数</h2><p><img src="/images/howtoviewapi4.png" alt="howtoviewapi4"></p><p>这部分列举的是槽函数，其实在 PyQt 中槽函数可以当作普通的函数。普通的函数也可以作为槽函数，直接通过信号连接即可，注意方框所示，还有很多函数是在父类里面。</p><h2 id="信号"><a class="markdownIt-Anchor" href="#信号">#</a> 信号</h2><p><img src="/images/howtoviewapi5.png" alt="howtoviewapi5"></p><p>这部分列举了该控件（输入框）所定义的信号，主要还是看名字，大多都能知道是做什么的，比如：</p><ol><li>editingFinished - 编辑完成信号</li><li>returnPressed - 回车键信号</li><li>textChanged (const QString &amp;text) - 内容改变信号</li></ol><p>这里还有个问题就是参数问题，一般 &amp; 后面的 text 作为参数传递到槽函数中</p><h2 id="函数详细说明"><a class="markdownIt-Anchor" href="#函数详细说明">#</a> 函数详细说明</h2><p>当不明确这个函数是做什么的，可以点击该函数跳转到下面的说明，比如回车键信号 <code>returnPressed</code></p><p><img src="/images/howtoviewapi6.png" alt="howtoviewapi6"></p><p>如图上所示，用翻译插件翻译，大部分就明白了，如下：</p><p><img src="/images/howtoviewapi7.png" alt="howtoviewapi7"></p><h2 id="关于如何搜索资料"><a class="markdownIt-Anchor" href="#关于如何搜索资料">#</a> 关于如何搜索资料</h2><p>比如当你要搜索输入框内容改变事件，一般建议两种搜索，且搜索的时候用空格把关键词分开搜索，而且直接用控件名</p><ol><li>中文搜索引擎：QLineEdit 内容 改变</li><li>英文搜索引擎：QLineEdit text change</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐编辑器LiClipse</title>
      <link href="/suggesteditor.html"/>
      <url>/suggesteditor.html</url>
      
        <content type="html"><![CDATA[<p>关于 Python 的开发编辑器有很多，每个人有每个人的喜好，经常看到很多在问什么编辑器好用，有人推荐 Sublime，有人推荐 Pycharm 等等，这里就不去比较其它编辑器的优缺点了，只谈谈关于 LiClipse 这个编辑器在初级使用阶段的智能提示功能等。开箱即用，支持多种语言，RST，Markdown 和 HTML 编辑器的 HTML 预览。</p><span id="more"></span><p>其实 LiClipse 这个编辑器就是以前的 PyDev 插件的独立版本，基于 Eclipse 编辑器开发，去掉了 Java 的相关开发功能，关于软件的详细说明可以去官网查看： <a href="http://www.liclipse.com/">http://www.liclipse.com/</a></p><p>编辑器只需要少量的配置，打开即可使用，快速自动 import，也可以根据需要安装自己所需的插件，比如 json、svn、主题插件等。个人推荐：适合刚入门的新手使用</p><p>由于新版的 PyQt 和 PyDev 去掉了详细的函数提示，所以 PyQt 的智能提示只有函数和返回值，并没有英文注释，但是以前的比如 PyQt4 的智能提示应该是有详细的英文注释提示。</p><h2 id="界面预览"><a class="markdownIt-Anchor" href="#界面预览">#</a> 界面预览</h2><ol><li>主界面<br><img src="/images/editor1.png" alt="editor1"></li><li>鼠标悬停提示<br><img src="/images/editor2.png" alt="editor2"></li><li>输入提示<br><img src="/images/editor3.png" alt="editor3"></li><li>Git 面板<br><img src="/images/editor4.png" alt="editor4"></li><li>全局搜索（Ctrl + H）<br><img src="/images/editor5.png" alt="editor5"><br><img src="/images/editor6.png" alt="editor6"></li></ol><h2 id="自动导包"><a class="markdownIt-Anchor" href="#自动导包">#</a> 自动导包</h2><p>其实这个功能我是非常喜欢的，通过按下快捷键即可自动寻找包名导入，快捷键 Ctrl + Shift + O</p><p><img src="/images/editor_import.png" alt="editor_import"></p><p>也可以在标红的代码上按下 Ctrl + F1 进行导入</p><p><img src="/images/editor_import2.png" alt="editor_import2"></p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置">#</a> 配置</h2><p>打开编辑器后首先要配置【Window -&gt; Preferences】的就是 Python 的环境变量，可以同时添加多个 Python 版本</p><p><img src="/images/editor_env.png" alt="editor_env"></p><h2 id="tab等设置"><a class="markdownIt-Anchor" href="#tab等设置">#</a> Tab 等设置</h2><ol><li>Insert spaces for tabs        tab 转空格</li><li>Show line numbers             显示行号</li></ol><p><img src="/images/editor_tab.png" alt="editor_tab"></p><h2 id="模版"><a class="markdownIt-Anchor" href="#模版">#</a> 模版</h2><p>这个功能可以快速插入自己定义好的模版代码，比如  <code>if __name__ == '__main__':</code>  等等，比如我这里配置的创建文件的模版</p><p><img src="/images/editor_tpl.png" alt="editor_tpl"></p><h2 id="常用快捷键"><a class="markdownIt-Anchor" href="#常用快捷键">#</a> 常用快捷键</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">格式化对齐</td><td style="text-align:center">Ctrl + Shift + F</td></tr><tr><td style="text-align:center">自动导包</td><td style="text-align:center">Ctrl + Shift + O</td></tr><tr><td style="text-align:center">快捷提示</td><td style="text-align:center">Alt + /</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种方式绑定信号槽</title>
      <link href="/bindsignals.html"/>
      <url>/bindsignals.html</url>
      
        <content type="html"><![CDATA[<p>网上关于 PyQt5 的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在 PyQt5 中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>这几种方式各有各的优点和缺点。</p><span id="more"></span><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一">#</a> 方式一</h2><p>这个方式是最开始接触设计师的时候知道的，主要是通过控件的 <code>objectName</code>  和 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  提供的连接函数来自动完成注册，<br>比如带有按钮的界面 ui 文件转成 py 文件后会发现如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token comment"># 通过这里自动完成连接信号槽</span>QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时只需要继承该 UI 文件类然后增加如下方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'button clicked'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里解释一下， <code>@pyqtSlot()</code>  装饰器把函数 <code>on_pushButton_clicked</code>  包装为一个槽函数，<br>而 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  这句代码的意思就是自动去寻找满足的槽函数</p><p><font color=red>注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足 <code>on_控件的objectName_控件的信号</code> 这样下划线连接起来的函数名才能被识别，<br>比如按钮的点击： <code>on_pushButton_clicked</code> 、勾选框的选中： <code>on_checkbox_toggled(self, checked)</code></p><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二">#</a> 方式二</h2><p>这种方式则直接通过代码里调用控件的信号的 <code>connect</code>  方法来进行绑定，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按钮点击函数</span><span class="token keyword">def</span> <span class="token function">doClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token comment"># 绑定点击信号</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doClicked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=red>注意： <code>connect</code>  的是函数名字</font>， <code>self.sender()</code>  这句代码是获取信号发送者（比如这里就是得到这个按钮对象），<br>用处在于有时候要循环创建一堆按钮</p><h2 id="方式三"><a class="markdownIt-Anchor" href="#方式三">#</a> 方式三</h2><p>通过参数这种方式其实比较特殊，在 PyQt 中大部分存在，但是在 PySide 中则很少，原因是两者的封装方式不同。</p><p>同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按钮点击函数</span><span class="token keyword">def</span> <span class="token function">doClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'按钮'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>doClicked<span class="token punctuation">,</span> minimumHeight<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以通过参数（信号名字） = 函数来绑定信号</p><p>同时也可以设置其它参数，比如<br> <code>button.setMinimumHeight(40)</code>  也可以像参数里那样设置 <code>minimumHeight=40</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 信号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 拷贝虚拟环境(一) 　</title>
      <link href="/virtualenvpy_625781186.html"/>
      <url>/virtualenvpy_625781186.html</url>
      
        <content type="html"><![CDATA[<p>通常来说，刚开始使用 python 的时候都是把包装到全局路径，随着各个项目安装的包越来越多，之后每开始一个项目，pycharm 创建索引的时间都越来越漫长，所以不可避免得开始使用虚拟环境。<br>经过一番了解 ，虚拟环境的优点有这些：</p><ul><li>改善 pycharm 索引时间；</li><li>各个项目的库不会冲突；</li><li>理论上虚拟环境可以给同版本的操作系统使用 (未试验过);</li><li>pip freeze &gt; requestment.txt 导出的依赖清晰；</li><li>各个版本的 python 共存；</li><li>…</li></ul><span id="more"></span><p>python 虚拟环境库除了自带的 venv , 还有三方库 <code>virtualenv</code>  , 此外 在 <code>virtualenv</code>  基础上又开发了 <code>virtualenvwrapper(virtualenvwrapper_win)</code>  来管理</p><p>本文基于 <code>virtualenvwrapper</code>  创建的虚拟环境来讲解.</p><pre><code>以下是收集的一些virtualenvwrapper配置教程:# linux平台https://www.cnblogs.com/netfoxman/p/5994697.html# window平台https://blog.csdn.net/shaququ/article/details/54292043  　https://blog.csdn.net/iaau0908/article/details/54021518</code></pre><p>虚拟环境创建多了我们就会发现，<br> 有时候使用相同版本的环境，一些常用的库是需要重新安装的，<br> 那么能不能创建一个基础环境，默认拥有这些库，然后在这个基础环境上继续安装三方库呢？</p><p>本文经过试验发现是可行的:</p><ol><li><p>创建基础虚拟环境  <code>mkvirtualenv &lt;环境名称&gt; [-p空格python其他版本的解释器路径]</code> .  例如  <code>mkvirtualenv py34 -p c:\Python34\python.exe</code></p></li><li><p>切换到虚拟环境 <code>workon py34</code>  , 然后安装一下三方库，然后复制 <code>py34</code>  这个文件夹备份一下；</p></li><li><p>接着复制这个 <code>py34</code>  文件夹，把复制后的文件夹改名为我们需要需要的文件夹例如 <code>new34</code></p></li><li><p>进入 <code>new34文件夹</code> ，用任意编辑器全路径搜索 <code>py34</code>  (替换虚拟环境的路径)</p></li><li><p>删除 <code>new34/Scripts</code>  下的 <code>pip.exe, pip3.exe, pip3.x.exe, easy_install.exe</code>  (因为安装路径硬编码到这里面了，改不了，需要重新安装)</p></li><li><p><a href="https://blog.csdn.net/douniwan007009/article/details/81463958">https://blog.csdn.net/douniwan007009/article/details/81463958</a> 按方式二，源码安装  <code>setuptools</code>  后再用 <code>easy_install pip</code>  安装 pip 后，完成；<br> 如果有问题，就继续按照方式一的源码安装 pip;</p></li><li><p>在 <code>new34</code>  环境下 用 <code>pip show 三方库</code>  来看一些库的位置，确保正确.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> virtualenvwrapper </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QRunnable线程池发信号</title>
      <link href="/runnablesignal_625781186.html"/>
      <url>/runnablesignal_625781186.html</url>
      
        <content type="html"><![CDATA[<p>因为只有继承 <code>QObject</code>  的类才能有信号和自定义信号，而 <code>QRunnable</code>  并不是继承自 <code>QObject</code> ，也不能用多继承的方式，这里考虑定义个全局的 QObject 变量用来存放一些定义好的可复用的信号。</p><span id="more"></span><p>pools 是  <code>QThreadPool</code>  实例</p><h2 id="看图说话"><a class="markdownIt-Anchor" href="#看图说话">#</a> 看图说话</h2><ol><li><img src="/images/runnablesignal1.png" alt="runnablesignal1"></li><li>定义一个全局信号类<br><img src="/images/runnablesignal2.png" alt="runnablesignal2"></li><li>在 QRunnable 中发送<br><img src="/images/runnablesignal3.png" alt="runnablesignal3"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 信号 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何和设计师中查看ui转换的py代码</title>
      <link href="/viewpyindesigner_625781186.html"/>
      <url>/viewpyindesigner_625781186.html</url>
      
        <content type="html"><![CDATA[<p>通过 设计师  查看 ui 转换的 py 代码</p><p>当初我刚学 pyqt 的时候，也有很多疑惑，用什么属性把控件加到布局，改了这个属性会发生什么，为什么这个会这样，那个会那样 。。。 。。。</p><p>后来就看 ui 转成的 py 代码，注释一下，什么效果消失了，就是那个 api 引起的 。</p><span id="more"></span><p>再来后发现了官方文档，查一查函数就行了 .</p><p>但是有些 api 文档找起来麻烦，用设计师点几下就行了，然后把转换出来的代码拷贝一下就完事了.</p><p>可是需要单独把 ui 转为 py 文件，之后再删除这个文件也是很烦的一件事 .</p><p>好，话不多说，接下来手把手教你如何快速在 ui 中查看 py 代码 .</p><p>官方也考虑过这种情况，所以 设计师中 是有这个功能的，但是 qt 的是没问题的，pyqt 的毕竟是绑定过来的，所以正常来说 你点击之后会弹出一个找不到应用程序的提示 .</p><p>看到这个东西是不是很眼熟，我们用的命令 pyuic5 和这个东西应该是一样的 .</p><p><img src="/images/viewpyindesigner1.jpg" alt="viewpyindesigner1"></p><p>所以接下来，我们找找电脑上有没有这个东西</p><p><img src="/images/viewpyindesigner2.jpg" alt="viewpyindesigner2"></p><p>果然在 pyqt5-toos 文件夹下有这个东西，</p><p>我们根据第一张图的提示，把这个东西拷贝到相应的目录 (如果没有那个 bin 文件夹，手动创建),</p><p><img src="/images/viewpyindesigner3.jpg" alt="viewpyindesigner3"></p><p>好了，大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> Designer </tag>
            
            <tag> 设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5调整窗口显示边框</title>
      <link href="/showframe.html"/>
      <url>/showframe.html</url>
      
        <content type="html"><![CDATA[<p>在 <code>windows</code>  某些场景下调整窗口大小或者移动后就会导致里面的内容重绘（速度慢，卡顿，闪烁），其实在以前 <code>windows</code>  在低配置设备为了减少这种频繁绘制的情况，默认会开启这种效果，不过目前设备越来越好了就关闭了该功能。具体是在控制面板中 -&gt; 调整 <code>Windows</code>  的外观和性能 -&gt; 去掉勾选 拖动时显示窗口内容。</p><span id="more"></span><p>由于这个开关是全局状态的，而我们只需要在自己的窗口中实现该效果有两种方式。</p><ol><li>一种是自己绘制一个边框效果，放开鼠标时才操作真正的窗口。</li><li>二是替换窗口的处理过程函数 <code>wndproc</code>  处理 <code>WM_NCLBUTTONDOWN</code>  消息事件。</li></ol><p>今天讲第二种方法：</p><ol><li>需要了解  <code>SystemParametersInfo</code>  API 函数</li><li><code>SPI_GETDRAGFULLWINDOWS</code> ：确定是否允许拖拉到最大窗口</li><li><code>SPI_SETDRAGFULLWINDOWS</code> ：设置是否允许拖至最大窗口</li></ol><p>效果就是这样的：</p><p><img src="/PyQt/Demo/ScreenShot/ShowFrameWhenDrag.gif" alt="ShowFrameWhenDrag"></p><p>正如图片所看的那样，窗体在移动的时候，窗体并没有绘制出来，而是绘制出窗体的边框，等到窗体不在移动的时候就直接把窗体图像数据全部绘制出来，这样就避免了窗体在移动的时候出现闪烁的现象。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py">https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年4月23日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: ShowFrameWhenDrag@description: 调整窗口显示边框"""</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> sizeof<span class="token punctuation">,</span> windll<span class="token punctuation">,</span> c_int<span class="token punctuation">,</span> byref<span class="token punctuation">,</span> c_long<span class="token punctuation">,</span> c_void_p<span class="token punctuation">,</span> c_ulong<span class="token punctuation">,</span> c_longlong<span class="token punctuation">,</span>\    c_ulonglong<span class="token punctuation">,</span> WINFUNCTYPE<span class="token punctuation">,</span> c_uint<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QLabel__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">if</span> sizeof<span class="token punctuation">(</span>c_long<span class="token punctuation">)</span> <span class="token operator">==</span> sizeof<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    WPARAM <span class="token operator">=</span> c_ulong    LPARAM <span class="token operator">=</span> c_long<span class="token keyword">elif</span> sizeof<span class="token punctuation">(</span>c_longlong<span class="token punctuation">)</span> <span class="token operator">==</span> sizeof<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    WPARAM <span class="token operator">=</span> c_ulonglong    LPARAM <span class="token operator">=</span> c_longlongWM_NCLBUTTONDOWN <span class="token operator">=</span> <span class="token number">0x00a1</span>GWL_WNDPROC <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>SPI_GETDRAGFULLWINDOWS <span class="token operator">=</span> <span class="token number">38</span>SPI_SETDRAGFULLWINDOWS <span class="token operator">=</span> <span class="token number">37</span>WNDPROC <span class="token operator">=</span> WINFUNCTYPE<span class="token punctuation">(</span>c_long<span class="token punctuation">,</span> c_void_p<span class="token punctuation">,</span> c_uint<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    CallWindowProc <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>CallWindowProcW    SetWindowLong <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowLongW    SystemParametersInfo <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SystemParametersInfoW<span class="token keyword">except</span><span class="token punctuation">:</span>    CallWindowProc <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>CallWindowProcA    SetWindowLong <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowLongA    SystemParametersInfo <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SystemParametersInfoA<span class="token keyword">def</span> <span class="token function">GetDragFullwindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rv <span class="token operator">=</span> c_int<span class="token punctuation">(</span><span class="token punctuation">)</span>    SystemParametersInfo<span class="token punctuation">(</span>SPI_GETDRAGFULLWINDOWS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byref<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> rv<span class="token punctuation">.</span>value<span class="token keyword">def</span> <span class="token function">SetDragFullwindows</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    SystemParametersInfo<span class="token punctuation">(</span>SPI_SETDRAGFULLWINDOWS<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">'拖动或者调整窗口试试看'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 重点替换窗口处理过程</span>        self<span class="token punctuation">.</span>_newwndproc <span class="token operator">=</span> WNDPROC<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_wndproc<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_oldwndproc <span class="token operator">=</span> SetWindowLong<span class="token punctuation">(</span>            <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>winId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GWL_WNDPROC<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_newwndproc<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_wndproc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> msg <span class="token operator">==</span> WM_NCLBUTTONDOWN<span class="token punctuation">:</span>            <span class="token comment"># 获取系统本身是否已经开启</span>            isDragFullWindow <span class="token operator">=</span> GetDragFullwindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> isDragFullWindow <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment"># 开启虚线框</span>                SetDragFullwindows<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment"># 系统本身处理</span>                ret <span class="token operator">=</span> CallWindowProc<span class="token punctuation">(</span>                    self<span class="token punctuation">.</span>_oldwndproc<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span>                <span class="token comment"># 关闭虚线框</span>                SetDragFullwindows<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> ret        <span class="token keyword">return</span> CallWindowProc<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_oldwndproc<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="片尾"><a class="markdownIt-Anchor" href="#片尾">#</a> 片尾</h2><p>替换窗口过程可以处理很多系统窗口的处理过程，更多需要读者自行去发现。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 边框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5判断信号是否连接</title>
      <link href="/issignalconnected.html"/>
      <url>/issignalconnected.html</url>
      
        <content type="html"><![CDATA[<p>在 <code>PyQt</code>  中某些情况下需要取消原来的信号连接，此时需要使用 <code>disconnect</code>  方法，但是在逻辑不严谨的情况下可能会导致多次调用 <code>disconnect</code>  方法而导致报错，当然可以通过 try except 来包裹代码。这里通过  <code>isSignalConnected</code>  来判断信号是否连接。</p><span id="more"></span><p>在 QOjbect 文档中这样写到：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static const QMetaMethod valueChangedSignal &#x3D; QMetaMethod::fromSignal(&amp;MyObject::valueChanged);if (isSignalConnected(valueChangedSignal)) &#123;    QByteArray data;    data &#x3D; get_the_value();       &#x2F;&#x2F; expensive operation    emit valueChanged(data);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过直接传入信号就行了，但是这在 PyQt 中不可行。需要这么做</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年2月24日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: IsSignalConnected@description: 判断信号是否连接"""</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QTextBrowser__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button1 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'已连接'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>doTest<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'未连接'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retView <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>retView<span class="token punctuation">)</span>    <span class="token keyword">def</span> doTest<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>retView<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""        # button1 clicked 是否连接: %s        # button2 clicked 是否连接: %s        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>            self<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">,</span> <span class="token string">'clicked()'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">,</span> <span class="token string">'clicked()'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断信号是否连接        :param obj:        对象        :param name:       信号名，如 clicked()        """</span>        index <span class="token operator">=</span> obj<span class="token punctuation">.</span>metaObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>indexOfMethod<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            method <span class="token operator">=</span> obj<span class="token punctuation">.</span>metaObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>method<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            <span class="token keyword">if</span> method<span class="token punctuation">:</span>                <span class="token keyword">return</span> obj<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>method<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/Demo/ScreenShot/IsSignalConnected.png" alt="IsSignalConnected"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 信号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5无边框圆角阴影</title>
      <link href="/shadowradius.html"/>
      <url>/shadowradius.html</url>
      
        <content type="html"><![CDATA[<p>在做 PyQt 窗口开发中经常会遇到要做一些无边框不规则的窗口，可能还会带有阴影效果，这里演示做一个简单的无边框圆角的窗口，原理就在于背景窗口的透明和一层有色背景控件的叠加。</p><span id="more"></span><h2 id="原理说明"><a class="markdownIt-Anchor" href="#原理说明">#</a> 原理说明</h2><ol><li>黑色（方便说明）的 <code>QDialog</code>  或者 <code>QWidget</code>  作为全透明无边框窗口。</li><li>其中白色的 <code>QWidget</code>  才是主要显示圆角和阴影的窗口，用于承载其它控件的显示。</li><li>注意红色和紫色的方框内的层次。</li><li>另：如果要熟悉纯代码编写请看 <a href="https://github.com/PyQt5/PyQt/blob/master/Demo/FramelessDialog.py">FramelessDialog.py</a></li></ol><p>如图：</p><p><img src="/PyQt/Demo/ScreenShot/FramelessDialog1.png" alt="FramelessDialog1"></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/Demo/FramelessDialog.py">https://github.com/PyQt5/PyQt/blob/master/Demo/FramelessDialog.py</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年4月25日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: FramelessWidget@description: 无边框圆角带阴影窗口 """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QDialog<span class="token punctuation">,</span> QGraphicsDropShadowEffect<span class="token keyword">from</span> frameless <span class="token keyword">import</span> Ui_Dialog__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019'</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mPos <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>close<span class="token punctuation">)</span>        <span class="token comment"># 重点</span>        <span class="token comment"># 无边框</span>        self<span class="token punctuation">.</span>setWindowFlags<span class="token punctuation">(</span>self<span class="token punctuation">.</span>windowFlags<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Qt<span class="token punctuation">.</span>FramelessWindowHint<span class="token punctuation">)</span>        <span class="token comment"># 背景透明（就是ui中黑色背景的那个控件）</span>        self<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WA_TranslucentBackground<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 添加阴影</span>        effect <span class="token operator">=</span> QGraphicsDropShadowEffect<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        effect<span class="token punctuation">.</span>setBlurRadius<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>        effect<span class="token punctuation">.</span>setOffset<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        effect<span class="token punctuation">.</span>setColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setGraphicsEffect<span class="token punctuation">(</span>effect<span class="token punctuation">)</span>    <span class="token comment"># 加上简单的移动功能</span>    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""鼠标点击事件"""</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>button<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>LeftButton<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mPos <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''鼠标弹起事件'''</span>        self<span class="token punctuation">.</span>mPos <span class="token operator">=</span> <span class="token boolean">None</span>        event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>buttons<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>LeftButton <span class="token keyword">and</span> self<span class="token punctuation">.</span>mPos<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>move<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mapToGlobal<span class="token punctuation">(</span>event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>mPos<span class="token punctuation">)</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/Demo/ScreenShot/FramelessDialog.png" alt="FramelessDialog"></p><h2 id="下载"><a class="markdownIt-Anchor" href="#下载">#</a> 下载</h2><p><a href="/files/%E6%97%A0%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92%E9%98%B4%E5%BD%B1.zip">无边框圆角阴影.zip</a></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 阴影 </tag>
            
            <tag> 无边框 </tag>
            
            <tag> 圆角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决GitHub下载速度缓慢的问题</title>
      <link href="/speedgithub.html"/>
      <url>/speedgithub.html</url>
      
        <content type="html"><![CDATA[<p>由于 Github 的下载走的是 AWS - 亚马逊的路线，，so slow，跟乌龟一样慢。。照着一些方法改了 hosts 文件，偶尔能提提速度。</p><span id="more"></span><h2 id="windows"><a class="markdownIt-Anchor" href="#windows">#</a> Windows</h2><p>Hosts 文件的路径是：</p><p>C:\Windows\System32\drivers\etc</p><h2 id="mac"><a class="markdownIt-Anchor" href="#mac">#</a> Mac</h2><p>终端内输入：</p><p>sudo vim /etc/hosts</p><h2 id="追加域名的ip地址"><a class="markdownIt-Anchor" href="#追加域名的ip地址">#</a> 追加域名的 IP 地址</h2><p>利用 https://www.ipaddress.com/ 来获得以下两个 GitHub 域名的 IP 地址：</p><p>(1) <a href="http://github.com">github.com</a></p><p>(2) <a href="http://github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></p><p>打开网页后，利用输入框内分别查询两个域名</p><p>将以上两段 IP 写入 Hosts 文件中：</p><pre class="line-numbers language-none"><code class="language-none">192.30.253.112               github.com151.101.185.194              github.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存。</p><p>刷新 DNS 缓存</p><p>在终端或 CMD 中，执行以下命令：</p><p>ipconfig /flushdns</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Mac上以正确的姿势使用PyQtClient看Demo</title>
      <link href="/pyqtclientmac.html"/>
      <url>/pyqtclientmac.html</url>
      
        <content type="html"><![CDATA[<p>由于 PyQtClient 只提供了 Windows 的版本，这里记录下编译后在 Mac 上运行。</p><span id="more"></span><h2 id="下载项目"><a class="markdownIt-Anchor" href="#下载项目">#</a> 下载项目</h2><p>安装 git 略。没有的东西可以都先去试试 brew install xxx。没安装 homebrew 的建议使用搜索引擎</p><p><code>git clone https://github.com/PyQt5/PyQtClient.git</code></p><h2 id="配置环境"><a class="markdownIt-Anchor" href="#配置环境">#</a> 配置环境</h2><ol><li>打开 IDE 配置 python 环境，使用 anaconda 比较方便</li><li>推荐用 pycharm，我是习惯了用 idea。anaconda 安装可以去官网下载。</li><li>环境原因，选择新建一个 python 3.6 p.s. 我取的环境名字就是 3.6 所以后面的 3.6 其实是这个原因</li></ol><h2 id="conda源"><a class="markdownIt-Anchor" href="#conda源">#</a> conda 源</h2><p>最好是加环境变量，不加也可以，就是以后用到的都需要指定路径，不太常用，我就没加</p><pre class="line-numbers language-none"><code class="language-none">~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels conda-forge~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels defaults~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels r~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels bioconda~&#x2F;anaconda3&#x2F;bin&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pip源"><a class="markdownIt-Anchor" href="#pip源">#</a> pip 源</h2><pre class="line-numbers language-none"><code class="language-none">mkdir ~&#x2F;.pip &amp;&amp; vim ~&#x2F;.pip&#x2F;pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[global]index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;[install]trusted-host &#x3D; mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装编译依赖"><a class="markdownIt-Anchor" href="#安装编译依赖">#</a> 安装编译依赖</h2><pre class="line-numbers language-none"><code class="language-none">~&#x2F;.conda&#x2F;envs&#x2F;3.6&#x2F;bin&#x2F;pip install -r PyQtClient&#x2F;requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行提示没有 webkit，开始手动编译</p><ol><li><code>wget http://download.qt.io/archive/qt/5.9/5.9.0/qt-opensource-mac-x64-5.9.0.dmg</code></li><li><code>wget https://github.com/annulen/webkit/releases/download/qtwebkit-5.212.0-alpha2/qtwebkit-5.212.0_alpha2-qt59-darwin-x64.tar.xz</code></li><li><code>wget https://www.riverbankcomputing.com/static/Downloads/PyQt5/5.10.1/PyQt5_gpl-5.10.1.zip</code></li><li><code>wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.8/sip-4.19.8.tar.gz</code></li><li>编译 sip： <code>~/.conda/envs/3.6/bin/python configure.py --platform macx-g++ &amp;&amp; make &amp;&amp; sudo make install</code></li><li><a href="http://xn--Webkit-hg9py82f.so">编译 Webkit.so</a> 没有 qmake 和 sip 的环境变量， 所以后面都是手动指定的</li></ol><pre class="line-numbers language-none"><code class="language-none">~&#x2F;.conda&#x2F;envs&#x2F;3.6&#x2F;bin&#x2F;python configure.py --confirm-license --no-designer-plugin --no-qml-plugin --disable&#x3D;dbus --disable&#x3D;QAxContainer --disable&#x3D;QtAndroidExtras --disable&#x3D;QtBluetooth --disable&#x3D;QtDBus --disable&#x3D;QtDesigner --disable&#x3D;Enginio --disable&#x3D;QtLocation --disable&#x3D;QtMacExtras --disable&#x3D;QtMultimedia --disable&#x3D;QtMultimediaWidgets --disable&#x3D;QtNfc --disable&#x3D;QtSerialPort --disable&#x3D;QtSql --disable&#x3D;QtSvg --disable&#x3D;QtTest --disable&#x3D;QtWinExtras --disable&#x3D;QtX11Extras --disable&#x3D;QtXml --disable&#x3D;QtXmlPatterns --disable&#x3D;pylupdate --disable&#x3D;pyrcc --qmake&#x3D;~&#x2F;Qt5.9.0&#x2F;5.9&#x2F;clang_64&#x2F;bin&#x2F;qmake --sip&#x3D;~&#x2F;.conda&#x2F;3.6&#x2F;bin&#x2F;sip &amp;&amp; make &amp;&amp; sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插曲"><a class="markdownIt-Anchor" href="#插曲">#</a> 插曲</h2><ol><li>libcurl 版本要求 10.0，而我的是 9.0，原因是前面我自己摸索，乱装依赖，所以遇到了</li></ol><pre class="line-numbers language-none"><code class="language-none">~&#x2F;anaconda3&#x2F;bin&#x2F;conda install -n 3.6 -c conda-forge libcurl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>结果这个 libcurl 10.0.0 是装上了，可是 pygit2 版本不对了，conda 给升级了，PyQtClient 里 requirements.txt 要求这个包的版本（pygit2==0.27.2）几乎决定了其他的环境版本。后来还是老实的用 conda 去装了。这个连 python 版本什么的都会跟着变的。最后降级的结果是 python 3.6.7</li></ol><pre class="line-numbers language-none"><code class="language-none">~&#x2F;anaconda3&#x2F;bin&#x2F;conda install -n 3.6 -c conda-forge libgit2&#x3D;&#x3D;0.27.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此总算是启动正常了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python调用Java对Excel截图</title>
      <link href="/calljava.html"/>
      <url>/calljava.html</url>
      
        <content type="html"><![CDATA[<p>有的时候会遇到一些奇葩的需求，就是用 Excel 做报表，但是需要对里面的数据进行填充并生成报表图片，发送出去。这里记录用 python 调用 jar 包对 excel 文件进行公式计算和截图，数据填充可以用 xlrd 或者 openpyxl</p><span id="more"></span><p>利用 <code>jpype</code>  模块初始化 java 虚拟机加载 jar 包然后执行其中的功能。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年3月12日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: CallJava@description: """</span><span class="token keyword">import</span> os<span class="token keyword">import</span> jpype__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019'</span><span class="token keyword">def</span> <span class="token function">convertToImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Workbook <span class="token operator">=</span> jpype<span class="token punctuation">.</span>JClass<span class="token punctuation">(</span><span class="token string">'com.aspose.cells.Workbook'</span><span class="token punctuation">)</span>    ImageFormat <span class="token operator">=</span> jpype<span class="token punctuation">.</span>JClass<span class="token punctuation">(</span><span class="token string">'com.aspose.cells.ImageFormat'</span><span class="token punctuation">)</span>    ImageOrPrintOptions <span class="token operator">=</span> jpype<span class="token punctuation">.</span>JClass<span class="token punctuation">(</span>        <span class="token string">'com.aspose.cells.ImageOrPrintOptions'</span><span class="token punctuation">)</span>    SheetRender <span class="token operator">=</span> jpype<span class="token punctuation">.</span>JClass<span class="token punctuation">(</span><span class="token string">'com.aspose.cells.SheetRender'</span><span class="token punctuation">)</span>    book <span class="token operator">=</span> Workbook<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'data/test.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 保存为html</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'data/index.html'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>    <span class="token comment"># 保存为pdf</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'data/test.pdf'</span><span class="token punctuation">)</span>    <span class="token comment"># 截图</span>    imgOptions <span class="token operator">=</span> ImageOrPrintOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># imgOptions.setQuality(100)</span>    imgOptions<span class="token punctuation">.</span>setOnePagePerSheet<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 输出图片格式</span><span class="token comment">#     imgOptions.setImageFormat(ImageFormat.getJpeg())</span>    imgOptions<span class="token punctuation">.</span>setImageFormat<span class="token punctuation">(</span>ImageFormat<span class="token punctuation">.</span>getPng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算</span>    CalculationOptions <span class="token operator">=</span> jpype<span class="token punctuation">.</span>JClass<span class="token punctuation">(</span>        <span class="token string">'com.aspose.cells.CalculationOptions'</span><span class="token punctuation">)</span>    opt <span class="token operator">=</span> CalculationOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对Sheet1中的公式进行计算</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>getWorksheets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Sheet1'</span><span class="token punctuation">)</span>    sheet<span class="token punctuation">.</span>calculateFormula<span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 设置区域</span>    pageSetup <span class="token operator">=</span> sheet<span class="token punctuation">.</span>getPageSetup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 去掉边距</span>    pageSetup<span class="token punctuation">.</span>setBottomMargin<span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">)</span>    pageSetup<span class="token punctuation">.</span>setLeftMargin<span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">)</span>    pageSetup<span class="token punctuation">.</span>setRightMargin<span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">)</span>    pageSetup<span class="token punctuation">.</span>setTopMargin<span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">)</span>    <span class="token comment"># 设置要截图的区域(对角线)</span>    pageSetup<span class="token punctuation">.</span>setPrintArea<span class="token punctuation">(</span><span class="token string">'A0:C2'</span><span class="token punctuation">)</span>    <span class="token comment"># Create a SheetRender object for the target sheet</span>    sr <span class="token operator">=</span> SheetRender<span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> imgOptions<span class="token punctuation">)</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span>getPageCount<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Generate an image for the worksheet</span>        sr<span class="token punctuation">.</span>toImage<span class="token punctuation">(</span>            page<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'%d.png'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># emm这里不知道什么用绝对路径就报错</span>    libs <span class="token operator">=</span> <span class="token string">'&#123;&#125;;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token string">'libs/bcprov-jdk16-146.jar'</span><span class="token punctuation">,</span>        <span class="token string">'libs/aspose-cells-19.2.jar'</span>    <span class="token punctuation">)</span>    command <span class="token operator">=</span> <span class="token punctuation">(</span>jpype<span class="token punctuation">.</span>getDefaultJVMPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token string">'-ea'</span><span class="token punctuation">,</span> <span class="token string">'-Xmn128m'</span><span class="token punctuation">,</span> <span class="token string">'-Xms512M'</span><span class="token punctuation">,</span> <span class="token string">'-Xmx512M'</span><span class="token punctuation">,</span>                   <span class="token string">'-Djava.class.path=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>libs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>    jpype<span class="token punctuation">.</span>startJVM<span class="token punctuation">(</span>jpype<span class="token punctuation">.</span>getDefaultJVMPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token string">'-ea'</span><span class="token punctuation">,</span> <span class="token string">'-Xmn128m'</span><span class="token punctuation">,</span> <span class="token string">'-Xms512M'</span><span class="token punctuation">,</span> <span class="token string">'-Xmx512M'</span><span class="token punctuation">,</span>                   <span class="token string">'-Djava.class.path=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>libs<span class="token punctuation">)</span>                   <span class="token punctuation">)</span>    <span class="token comment"># 解决多线程问题</span>    jpype<span class="token punctuation">.</span>attachThreadToJVM<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对excel截图</span>    convertToImage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 关闭虚拟机</span>    jpype<span class="token punctuation">.</span>shutdownJVM<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'截图完成'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附件"><a class="markdownIt-Anchor" href="#附件">#</a> 附件</h2><p><a href="/files/%E8%B0%83%E7%94%A8java%E7%94%9F%E6%88%90%E6%8A%A5%E8%A1%A8.7z">调用 java 生成报表.7z</a></p><p>解压后进入 whls 文件夹安装对应版本的 jpype 包</p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/images/calljava.png" alt="calljava"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQtClient例子客户端</title>
      <link href="/pyqtclient.html"/>
      <url>/pyqtclient.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/1.gif" alt="1.gif"> 对本博客所写的项目 PyQt 例子进行一个客户端的编写，客户端主要实现一些动画效果，更换皮肤，运行例子等功能。<img src="/images/2.gif" alt="2.gif"></p><span id="more"></span><h2 id="项目地址"><a class="markdownIt-Anchor" href="#项目地址">#</a> 项目地址</h2><div class="github-widget" data-repo="PyQt5/PyQtClient"></div><h2 id="windows客户端下载"><a class="markdownIt-Anchor" href="#windows客户端下载">#</a> Windows 客户端下载</h2><ol><li><a href="https://github.com/PyQt5/PyQtClient/releases/download/1.0.1/PyQtClient-x86-win32-exe.7z">包含部分例子</a></li><li><a href="https://github.com/PyQt5/PyQtClient/releases/download/1.0.1/PyQtClient-x86-win32-exe.7z">不包含例子</a></li><li><a href="https://pan.baidu.com/s/14j9tMqGlAy_8y3067xh-vw">百度网盘</a> 提取码: nadv</li></ol><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="https://github.com/PyQt5/PyQtClient/raw/master/ScreenShot/PyQtClient.gif" alt="PyQtClient"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg合成加密HLS记录</title>
      <link href="/ffmpeghls.html"/>
      <url>/ffmpeghls.html</url>
      
        <content type="html"><![CDATA[<p>记录在某个需求中要求截图并合成加密视频文件，这里采用 FFmpeg 的管道流来实现生成 HLS 加密文件。</p><span id="more"></span><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年3月4日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: @description: """</span><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token comment"># p = Popen([r'D:\soft\ffmpeg\bin\ffmpeg.exe', '-y',</span><span class="token comment">#            '-threads', '2',</span><span class="token comment">#            '-f', 'image2pipe',</span><span class="token comment">#            '-vcodec', 'mjpeg', '-r', '24', '-i', '-',</span><span class="token comment">#            '-vcodec', 'h264', '-r', '24',</span><span class="token comment">#            #            '-encryption_scheme', 'cenc-aes-ctr',</span><span class="token comment">#            #            '-encryption_key', '617D8A125A284DF48E3C6B1866348A3F',</span><span class="token comment">#            #            '-encryption_kid', 'B326F895B6A24CC5A4DC70995728059C',</span><span class="token comment">#            r'F:\Workspace\Test\videos\video.mp4'], stdin=PIPE)</span>p <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">r'D:\soft\ffmpeg\bin\ffmpeg.exe'</span><span class="token punctuation">,</span>           <span class="token string">'-re'</span><span class="token punctuation">,</span>   <span class="token comment"># 按照实际帧率读取输入文件</span>           <span class="token string">'-y'</span><span class="token punctuation">,</span>        <span class="token comment"># 覆盖已存在文件</span>           <span class="token string">'-threads'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span>  <span class="token comment"># 线程数量</span>           <span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'image2pipe'</span><span class="token punctuation">,</span>  <span class="token comment"># PIPE图片流</span>           <span class="token string">'-vcodec'</span><span class="token punctuation">,</span> <span class="token string">'mjpeg'</span><span class="token punctuation">,</span>  <span class="token comment"># 图片编码</span>           <span class="token string">'-r'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">,</span>  <span class="token comment"># 帧率</span>           <span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span>  <span class="token comment"># 指定输入流为PIPE</span>           <span class="token string">'-vcodec'</span><span class="token punctuation">,</span> <span class="token string">'h264'</span><span class="token punctuation">,</span>  <span class="token comment"># 输出编码</span>           <span class="token string">'-r'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">,</span>  <span class="token comment"># 帧率</span>           <span class="token string">'-map'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment">#            '-crf','20',     # 降低质量</span>           <span class="token string">'-b'</span><span class="token punctuation">,</span> <span class="token string">'720k'</span><span class="token punctuation">,</span>        <span class="token comment"># 码率</span>           <span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'hls'</span><span class="token punctuation">,</span>           <span class="token string">'-codec:v'</span><span class="token punctuation">,</span> <span class="token string">'libx264'</span><span class="token punctuation">,</span>           <span class="token string">'-vbsf'</span><span class="token punctuation">,</span> <span class="token string">'h264_mp4toannexb'</span><span class="token punctuation">,</span>           <span class="token comment"># 指定加密密匙文件</span>           <span class="token string">'-hls_key_info_file'</span><span class="token punctuation">,</span> <span class="token string">r'F:\Workspace\Test\videokey.info'</span><span class="token punctuation">,</span>           <span class="token string">'-hls_time'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span>           <span class="token string">'-hls_list_size'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span>           <span class="token string">'-hls_wrap'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment">#            '-hls_flags', 'single_file',  # 生成单个文件(有bug)</span>           <span class="token string">r'F:\Workspace\Test\videos\playlist.m3u8'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> path <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'frames'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">'*.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#     print(i, path)</span>    p<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> HLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5编译QWebView与QWebEngineView共存</title>
      <link href="/webviewnew.html"/>
      <url>/webviewnew.html</url>
      
        <content type="html"><![CDATA[<p>在 PyQt5.5 过后移除了 <code>QWebView</code>  控件，改用 <code>QWebEngineView</code> ，但是这个刚开始用起来不是很方便，最近在整理一些例子的时候需要同时使用 <code>QWebView</code>  和 <code>QWebEngineView</code> ，故希望把 <code>QWebView</code>  重新加入到后面的 PyQt5 版本中，查看 PyQt5.10.1 的源码发现里面其实是有 <code>QWebView</code>  的，只是因为 Qt5.10.1 中没有编译好的 dll 等导致无法编译。</p><span id="more"></span><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作">#</a> 准备工作</h2><ol><li>安装 VS2015</li><li>安装 Qt5.10.1</li><li>前往 <a href="https://github.com/annulen/webkit/releases">https://github.com/annulen/webkit/releases</a> 下载对应的文件，比如：qtwebkit-5.212.0_alpha2-qt59-msvc2015-x86.zip</li><li>下载 PyQt5.10.1 源码</li><li>下载对应版本的 sip 源码</li></ol><h2 id="编译"><a class="markdownIt-Anchor" href="#编译">#</a> 编译</h2><ol><li>设置环境变量 <code>set PATH=D:\soft\Qt\Qt5.10.1\5.10.1\msvc2015\bin;%PATH%</code></li><li>首先进入 vs2015 命令行编译 sip 并安装， <code>python configure.py &amp;&amp; nmake &amp;&amp; nmake install</code></li><li>进入 PyQt5.10.1 源码编译安装即可</li><li>如果要减少 PyQt5.10.1 的编译可以试试以下代码</li></ol><pre class="line-numbers language-none"><code class="language-none">D:\soft\Python35\python configure.py --confirm-license --no-designer-plugin --no-qml-plugin --disable&#x3D;dbus --disable&#x3D;QAxContainer --disable&#x3D;QtAndroidExtras --disable&#x3D;QtBluetooth --disable&#x3D;QtDBus --disable&#x3D;QtDesigner --disable&#x3D;Enginio --disable&#x3D;QtLocation --disable&#x3D;QtMacExtras --disable&#x3D;QtMultimedia --disable&#x3D;QtMultimediaWidgets --disable&#x3D;QtNfc --disable&#x3D;QtSerialPort --disable&#x3D;QtSql --disable&#x3D;QtSvg --disable&#x3D;QtTest --disable&#x3D;QtWinExtras --disable&#x3D;QtX11Extras --disable&#x3D;QtXml --disable&#x3D;QtXmlPatterns --disable&#x3D;pylupdate --disable&#x3D;pyrcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> QWebView </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5之图片轮播</title>
      <link href="/pageswitching.html"/>
      <url>/pageswitching.html</url>
      
        <content type="html"><![CDATA[<p>之前看到了 <code>QStackedWidget</code>  做切换动画，让界面不那么生硬，于是参考了 <a href="http://qt.shoutwiki.com/wiki/Extending_QStackedWidget_for_sliding_page_animations_in_Qt">http://qt.shoutwiki.com/wiki/Extending_QStackedWidget_for_sliding_page_animations_in_Qt</a> 做了一个 <code>QStackedWidget</code>  的切换动画，然后利用 <code>QStackedWidget</code>  结合多个 <code>QLabel</code>  显示图片来做一个轮播效果。</p><p>其实在写之前也在网上找了很多例子，参看过后发现大多例子都是利用到了 <code>paintEvent</code>  去绘制，这样其实还是比较麻烦，个人觉得更好的方式是使用 <code>QPropertyAnimation</code>  属性动画修改控件中 <code>QLabel</code>  图片控件的 pos 位置属性就可以达到移动效果了。</p><span id="more"></span><ol><li>比较核心的算法就是要计算当前页面和下一个页面的位置偏移量，比如:</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算偏移量</span>offsetX <span class="token operator">=</span> self<span class="token punctuation">.</span>frameRect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span>offsetY <span class="token operator">=</span> self<span class="token punctuation">.</span>frameRect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span>w_next<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">)</span><span class="token keyword">if</span> direction <span class="token operator">==</span> self<span class="token punctuation">.</span>BOTTOM2TOP<span class="token punctuation">:</span>    offsetX <span class="token operator">=</span> <span class="token number">0</span>    offsetY <span class="token operator">=</span> <span class="token operator">-</span>offsetY<span class="token keyword">elif</span> direction <span class="token operator">==</span> self<span class="token punctuation">.</span>TOP2BOTTOM<span class="token punctuation">:</span>    offsetX <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">elif</span> direction <span class="token operator">==</span> self<span class="token punctuation">.</span>RIGHT2LEFT<span class="token punctuation">:</span>    offsetX <span class="token operator">=</span> <span class="token operator">-</span>offsetX    offsetY <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">elif</span> direction <span class="token operator">==</span> self<span class="token punctuation">.</span>LEFT2RIGHT<span class="token punctuation">:</span>    offsetY <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 重新定位显示区域外部/旁边的下一个窗口小部件</span>pnext <span class="token operator">=</span> w_next<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>pnow <span class="token operator">=</span> w_now<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>_pnow <span class="token operator">=</span> pnow<span class="token comment"># 移动到指定位置并显示</span>w_next<span class="token punctuation">.</span>move<span class="token punctuation">(</span>pnext<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> offsetX<span class="token punctuation">,</span> pnext<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> offsetY<span class="token punctuation">)</span>w_next<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>w_next<span class="token punctuation">.</span>raise_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>其次是对这两个页面增加关联 <code>pos</code>  属性的 <code>QPropertyAnimation</code>  动画，然后加入到并行动画组 <code>QParallelAnimationGroup</code>  中再启动即可。</p></li><li><p>对 <code>QStackedWidget</code>  的 <code>setCurrentIndex</code>  和 <code>setCurrentWidget</code>  这两个函数进行了覆盖重写达到及时手动调用这两个函数也会产生动画效果的目的。</p></li></ol><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/PageSwitching.py">https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/PageSwitching.py</a></p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QPropertyAnimation/ScreenShot/PageSwitching.gif" alt="PageSwitching"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 动画 </tag>
            
            <tag> 轮播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 在类里使用进程池</title>
      <link href="/processinclass_625781186.html"/>
      <url>/processinclass_625781186.html</url>
      
        <content type="html"><![CDATA[<ol><li>首先， 进程池的作用就是减少进程的创建和释放 开销的， 所以在类中作为局部变量是不合适的；</li><li>其次， 进程池必须在 <code>if __name__ == &quot;__main__&quot; </code> 里 ，否则会报 frozen_ 什么什么的错误；（这一点可能解释有误）;</li></ol><span id="more"></span><ol start="3"><li>然后， 线程池的 <code>apply_async</code>  中如果传入 <code>self.xxx</code>  方法，会报 <code>multiprocessing.Pool pickling error</code>  什么的错误， 具体解释见 https://blog.csdn.net/dutsoft/article/details/70336462， 里面有解决方法，但是我没有成功（最开始测试没有现在理解的透彻， 不过应该是可以的）; 由于第 1 点 不合理， 所以有什么办法在类 函数中获取 进程池对象 po 的地址：</li></ol><p><img src="/images/processinclass1.png" alt="processinclass1"></p><p>我的解决思路和方法是:</p><ol><li>通过 globals () 取得全局变量 ， 测试证明 ：不同文件的 <code>globals()</code>  是不同的： 如 <code>Tab2.py </code> 的  <code>globals()</code>  和 <code> main_extra_func_file.py</code>  中的  <code>globals() </code> 是不同的 ， 所以 这样在 <code>Tab2.py</code>  中取不到 po 对象；</li><li>通过 <code>__main__.po</code>  来获取 （为什么会想到这个呢， 因为有时候导包 import .xxx 和 import xxx 会报  <code>__main__</code>  没有什么属性什么的）：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPoolObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># po 的名字在main函数中定义</span><span class="token comment"># __main__ 模块在sys.modules 的键是"__mp_main__"</span>    <span class="token keyword">return</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"__mp_main__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>po<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ps : (图没截好 ，  <code>rglob_worker</code>  是外部函数 ， 非类内函数 ，po = getPoolBojcet () 这一行是类内函数 ，红色箭头 2. 在的那条白色分割线 是 2 个函数。)</p><p><img src="/images/processinclass2.png" alt="processinclass2"></p><p><code>len(po._cache) == 1</code>  : po._cache 是当前有任务的进程数， ==1 表示所有任务结束；利用回调 ， 可以更轻松地进行进程通信。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5之QSlider滑动条点击定位</title>
      <link href="/jumpslider.html"/>
      <url>/jumpslider.html</url>
      
        <content type="html"><![CDATA[<p><code>QSlider</code>  在通常情况下支持鼠标点击可以任意拖动，或者鼠标点击则往鼠标点击的方向移动一小格，这种移动一小格通常情况下用起来很不方便，比如我要做一个播放器的播放进度条，肯定是点击某个位置就直接跳到该位置，为此需要对  <code>QSlider</code>  的鼠标事件 <code>mousePressEvent</code>  进行重写。</p><span id="more"></span><h2 id="实现方法"><a class="markdownIt-Anchor" href="#实现方法">#</a> 实现方法</h2><p>一般的想法就是重写 <code>mousePressEvent</code>  后，得到鼠标点击的 x 和 y 点然后进行比例换算，再通过 <code>setValue</code>  来设置值，其实 <code>QSlider</code>  的 <code>style</code>  里面是有一个 <code>sliderValueFromPosition</code>  方法来计算值的。直接调用这个方法即可。</p><ol><li>首先通过 <code>QSlider.style().subControlRect</code>  方法计算得到滑块的区域，当鼠标点击区域在此次时则交给系统自己处理（比如按住不放拖动）</li><li>通过 <code>orientation</code>  判断滑动条的方向（横竖）</li><li>通过 <code>invertedAppearance</code>  判断滑动条是否反向（左右、上下）</li><li>通过 <code>QSlider.style().sliderValueFromPosition(最小值, 最大值, x或者y坐标, 宽度或者高度)</code>  来计算得到值</li><li>最后通过 <code>setValue</code>  来设置值</li></ol><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/QSlider/ClickJumpSlider.py">https://github.com/PyQt5/PyQt/blob/master/QSlider/ClickJumpSlider.py</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年11月5日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: JumpSlider@description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QSlider<span class="token punctuation">,</span> QStyleOptionSlider<span class="token punctuation">,</span> QStyle<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span>\    QFormLayout<span class="token punctuation">,</span> QLabel__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2018 Irony"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">JumpSlider</span><span class="token punctuation">(</span>QSlider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取上面的拉动块位置</span>        option <span class="token operator">=</span> QStyleOptionSlider<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initStyleOption<span class="token punctuation">(</span>option<span class="token punctuation">)</span>        rect <span class="token operator">=</span> self<span class="token punctuation">.</span>style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subControlRect<span class="token punctuation">(</span>            QStyle<span class="token punctuation">.</span>CC_Slider<span class="token punctuation">,</span> option<span class="token punctuation">,</span> QStyle<span class="token punctuation">.</span>SC_SliderHandle<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">if</span> rect<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 如果鼠标点击的位置在滑块上则交给Qt自行处理</span>            <span class="token builtin">super</span><span class="token punctuation">(</span>JumpSlider<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>mousePressEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>orientation<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>Horizontal<span class="token punctuation">:</span>            <span class="token comment"># 横向，要考虑invertedAppearance是否反向显示的问题</span>            self<span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sliderValueFromPosition<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                event<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>invertedAppearance<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>width<span class="token punctuation">(</span>                <span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 纵向</span>            self<span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sliderValueFromPosition<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>invertedAppearance<span class="token punctuation">(</span>                <span class="token punctuation">)</span> <span class="token keyword">else</span> event<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>TestWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QFormLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label1 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label1<span class="token punctuation">,</span> JumpSlider<span class="token punctuation">(</span>            Qt<span class="token punctuation">.</span>Horizontal<span class="token punctuation">,</span> valueChanged<span class="token operator">=</span><span class="token keyword">lambda</span> v<span class="token punctuation">:</span> self<span class="token punctuation">.</span>label1<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 横向-反向显示</span>        self<span class="token punctuation">.</span>label2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2<span class="token punctuation">,</span> JumpSlider<span class="token punctuation">(</span>            Qt<span class="token punctuation">.</span>Horizontal<span class="token punctuation">,</span> invertedAppearance<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            valueChanged<span class="token operator">=</span><span class="token keyword">lambda</span> v<span class="token punctuation">:</span> self<span class="token punctuation">.</span>label2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label3 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label3<span class="token punctuation">,</span> JumpSlider<span class="token punctuation">(</span>            Qt<span class="token punctuation">.</span>Vertical<span class="token punctuation">,</span> minimumHeight<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> valueChanged<span class="token operator">=</span><span class="token keyword">lambda</span> v<span class="token punctuation">:</span> self<span class="token punctuation">.</span>label3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 纵向反向显示</span>        self<span class="token punctuation">.</span>label4 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label4<span class="token punctuation">,</span> JumpSlider<span class="token punctuation">(</span>            Qt<span class="token punctuation">.</span>Vertical<span class="token punctuation">,</span> invertedAppearance<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            minimumHeight<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> valueChanged<span class="token operator">=</span><span class="token keyword">lambda</span> v<span class="token punctuation">:</span> self<span class="token punctuation">.</span>label4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">import</span> cgitb    sys<span class="token punctuation">.</span>excepthook <span class="token operator">=</span> cgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> TestWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QSlider/ScreenShot/ClickJumpSlider.gif" alt="ClickJumpSlider"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 滑动条 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5仿网页鼠标移动点阵特效</title>
      <link href="/rlatticeeffect.html"/>
      <url>/rlatticeeffect.html</url>
      
        <content type="html"><![CDATA[<p>Orz，前段时间有个 zz 需求，就是要做一个类似网页上很多个多点连线、鼠标移动跟随的那种炫酷特效，然后花了点时间在网上找了 js 做的，刚开始打算是嵌入 <code>QWebView</code>  来显示网页，后来研究了下 js 的算法代码，遂改用 <code>QWidget</code>  的 <code>paintEvent</code>  直接绘制。</p><span id="more"></span><h2 id="大概思路"><a class="markdownIt-Anchor" href="#大概思路">#</a> 大概思路</h2><ol><li>先根据窗口大小随机创建一些点</li><li>遍历这些点并找到与之相关联的点</li><li>在动画过程中绘制圆点和画两点之间的连线</li><li>属性动画 <code>QPropertyAnimation</code>  改变颜色的透明度</li></ol><h2 id="题外"><a class="markdownIt-Anchor" href="#题外">#</a> 题外</h2><ol><li>这里没有仔细去研究 js 里的算法优化，在浏览器里嗖嗖的就生成了，在 py 里好慢…</li><li>尽量在 py 里优化了循环操作，也简单的做了个 cython 加速也才提高了 1s ? 1 倍？..</li><li>不要只是为了好看用这玩意儿，和网页的效果一样，占 CPU !!! 没有任何意义</li><li>如果有更好的优化算法请告知，3Q</li><li>pyd 是 python3.4 生成的，删掉 pyd 也能运行</li></ol><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/RlatticeEffect.py">https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/RlatticeEffect.py</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年11月22日@author: Irony@site: https://pyqt5.com, https://github.com/892768447@email: 892768447@qq.com@file: @description: """</span><span class="token keyword">from</span> random <span class="token keyword">import</span> random<span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QPropertyAnimation<span class="token punctuation">,</span> QObject<span class="token punctuation">,</span> pyqtProperty<span class="token punctuation">,</span> QEasingCurve<span class="token punctuation">,</span>\    Qt<span class="token punctuation">,</span> QRectF<span class="token punctuation">,</span> pyqtSignal<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QColor<span class="token punctuation">,</span> QPainterPath<span class="token punctuation">,</span> QPainter<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2018 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pointtool  <span class="token comment"># @UnusedImport @UnresolvedImport</span>    getDistance <span class="token operator">=</span> pointtool<span class="token punctuation">.</span>getDistance    findClose <span class="token operator">=</span> pointtool<span class="token punctuation">.</span>findClose<span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> math    <span class="token keyword">def</span> <span class="token function">getDistance</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">findClose</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>        plen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>plen<span class="token punctuation">)</span><span class="token punctuation">:</span>            closest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>            p1 <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>plen<span class="token punctuation">)</span><span class="token punctuation">:</span>                p2 <span class="token operator">=</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                dte1 <span class="token operator">=</span> getDistance<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>                <span class="token keyword">if</span> p1 <span class="token operator">!=</span> p2<span class="token punctuation">:</span>                    placed <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token keyword">not</span> placed<span class="token punctuation">:</span>                            <span class="token keyword">if</span> <span class="token keyword">not</span> closest<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                                closest<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p2                                placed <span class="token operator">=</span> <span class="token boolean">True</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token keyword">not</span> placed<span class="token punctuation">:</span>                            <span class="token keyword">if</span> dte1 <span class="token operator">&lt;</span> getDistance<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> closest<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                closest<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p2                                placed <span class="token operator">=</span> <span class="token boolean">True</span>            p1<span class="token punctuation">.</span>closest <span class="token operator">=</span> closest<span class="token keyword">class</span> <span class="token class-name">Target</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>    valueChanged <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> ox<span class="token punctuation">,</span> y<span class="token punctuation">,</span> oy<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Point<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>originX <span class="token operator">=</span> ox        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>__y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>originY <span class="token operator">=</span> oy        <span class="token comment"># 5个闭合点</span>        self<span class="token punctuation">.</span>closest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 圆半径</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>        <span class="token comment"># 连线颜色</span>        self<span class="token punctuation">.</span>lineColor <span class="token operator">=</span> QColor<span class="token punctuation">(</span><span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">)</span>        <span class="token comment"># 圆颜色</span>        self<span class="token punctuation">.</span>circleColor <span class="token operator">=</span> QColor<span class="token punctuation">(</span><span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initAnimation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 属性动画</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'xanimation'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>xanimation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>                self<span class="token punctuation">,</span> <span class="token string">b'x'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> valueChanged<span class="token operator">=</span>self<span class="token punctuation">.</span>valueChanged<span class="token punctuation">.</span>emit<span class="token punctuation">,</span>                easingCurve<span class="token operator">=</span>QEasingCurve<span class="token punctuation">.</span>InOutSine<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>yanimation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>                self<span class="token punctuation">,</span> <span class="token string">b'y'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> valueChanged<span class="token operator">=</span>self<span class="token punctuation">.</span>valueChanged<span class="token punctuation">.</span>emit<span class="token punctuation">,</span>                easingCurve<span class="token operator">=</span>QEasingCurve<span class="token punctuation">.</span>InOutSine<span class="token punctuation">,</span>                finished<span class="token operator">=</span>self<span class="token punctuation">.</span>updateAnimation<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>updateAnimation<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updateAnimation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>xanimation<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yanimation<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        duration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span>        self<span class="token punctuation">.</span>xanimation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span>duration<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yanimation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span>duration<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>xanimation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>xanimation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>originX <span class="token operator">-</span> <span class="token number">50</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yanimation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yanimation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>originY <span class="token operator">-</span> <span class="token number">50</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>xanimation<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yanimation<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pyqtProperty</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> x    <span class="token decorator annotation punctuation">@pyqtProperty</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_y    <span class="token decorator annotation punctuation">@y<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y<span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setMouseTracking<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>target <span class="token operator">=</span> Target<span class="token punctuation">(</span>self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initPoints<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>paintEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span><span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>begin<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>fillRect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>black<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>animate<span class="token punctuation">(</span>painter<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>mouseMoveEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>        <span class="token comment"># 鼠标移动时更新xy坐标</span>        self<span class="token punctuation">.</span>target<span class="token punctuation">.</span>x <span class="token operator">=</span> event<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target<span class="token punctuation">.</span>y <span class="token operator">=</span> event<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>points<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 创建点</span>        stepX <span class="token operator">=</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">20</span>        stepY <span class="token operator">=</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">20</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stepX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stepY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ox <span class="token operator">=</span> x <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stepX                oy <span class="token operator">=</span> y <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stepY                point <span class="token operator">=</span> Point<span class="token punctuation">(</span>ox<span class="token punctuation">,</span> ox<span class="token punctuation">,</span> oy<span class="token punctuation">,</span> oy<span class="token punctuation">)</span>                point<span class="token punctuation">.</span>valueChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>points<span class="token punctuation">.</span>append<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>        t <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 每个点寻找5个闭合点</span>        findClose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>points<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">animate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> painter<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>points<span class="token punctuation">:</span>            <span class="token comment"># 检测点的范围</span>            value <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>getDistance<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">4000</span><span class="token punctuation">:</span>                <span class="token comment"># 其实就是修改颜色透明度</span>                p<span class="token punctuation">.</span>lineColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>                p<span class="token punctuation">.</span>circleColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> value <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span>lineColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>                p<span class="token punctuation">.</span>circleColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> value <span class="token operator">&lt;</span> <span class="token number">40000</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span>lineColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>                p<span class="token punctuation">.</span>circleColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span>lineColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                p<span class="token punctuation">.</span>circleColor<span class="token punctuation">.</span>setAlphaF<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># 画线条</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>lineColor<span class="token punctuation">.</span>alpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> pc <span class="token keyword">in</span> p<span class="token punctuation">.</span>closest<span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token keyword">not</span> pc<span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    path <span class="token operator">=</span> QPainterPath<span class="token punctuation">(</span><span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>moveTo<span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>lineTo<span class="token punctuation">(</span>pc<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pc<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                    painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                    painter<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>p<span class="token punctuation">.</span>lineColor<span class="token punctuation">)</span>                    painter<span class="token punctuation">.</span>drawPath<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                    painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 画圆</span>            painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>NoPen<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>p<span class="token punctuation">.</span>circleColor<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>drawRoundedRect<span class="token punctuation">(</span>QRectF<span class="token punctuation">(</span>                p<span class="token punctuation">.</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> p<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 开启动画</span>            p<span class="token punctuation">.</span>initAnimation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">import</span> cgitb    sys<span class="token punctuation">.</span>excepthook <span class="token operator">=</span> cgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QPropertyAnimation/ScreenShot/RlatticeEffect.gif" alt="RlatticeEffect"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 动画 </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QDataWidgetMapper 数据库绑定 QLineEdit控件</title>
      <link href="/datawidgetmapper_625781186.html"/>
      <url>/datawidgetmapper_625781186.html</url>
      
        <content type="html"><![CDATA[<p>qt 为操作数据库提供了一个 model+view 的模式，这样简单的出入库逻辑就不需要自己编写。</p><p><code>QDataWidgetMapper</code>  可以 将数据库的数据 映射到其他控件 。</p><p>注意：表格里的数据修改 还没有提交到数据库，需要点击提交按钮才生效。</p><span id="more"></span><p><a href="https://github.com/PyQt5/PyQt/tree/master/Test/partner_625781186/16_sqlModel/01_mapper">https://github.com/PyQt5/PyQt/tree/master/Test/partner_625781186/16_sqlModel/01_mapper</a></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#-*- coding: utf-8 -*-</span><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span>  QtWidgets<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtSql <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'./ui'</span><span class="token punctuation">)</span><span class="token keyword">from</span> Ui_MainWindow <span class="token keyword">import</span> Ui_MainWindow<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MainWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">,</span>  <span class="token operator">*</span>args<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>                <span class="token comment">#===============================   db   ======================================#</span>        <span class="token comment"># self.db = QSqlDatabase.addDatabase('QMYSQL')</span>        <span class="token comment"># self.db.setHostName("127.0.0.1")  # set address</span>        <span class="token comment"># self.db.setUserName("root")  # set user name</span>        <span class="token comment"># self.db.setPassword('123456')  # set user pwd   </span>        <span class="token comment"># self.db.setDatabaseName("database")</span>                self<span class="token punctuation">.</span>db <span class="token operator">=</span> QSqlDatabase<span class="token punctuation">.</span>addDatabase<span class="token punctuation">(</span><span class="token string">'QSQLITE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>setDatabaseName<span class="token punctuation">(</span><span class="token string">'./db/database.db'</span><span class="token punctuation">)</span>        <span class="token comment">#================================= codemodel =====================================#</span>        <span class="token comment"># 实例化model</span>        self<span class="token punctuation">.</span>codeModel <span class="token operator">=</span> QSqlRelationalTableModel<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># model设置表</span>        self<span class="token punctuation">.</span>initializeModel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>codeModel<span class="token punctuation">,</span> <span class="token string">'Mongo'</span><span class="token punctuation">)</span>        <span class="token comment"># 设置编辑策略</span>        <span class="token comment"># self.codeModel.setEditStrategy(QSqlTableModel.OnFieldChange)</span>        <span class="token comment"># !!! 这里要注意 , 只能用这个策略 , 才可以实现自动提交</span>        self<span class="token punctuation">.</span>codeModel<span class="token punctuation">.</span>setEditStrategy<span class="token punctuation">(</span>QSqlTableModel<span class="token punctuation">.</span>OnManualSubmit<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>codeView <span class="token operator">=</span> self<span class="token punctuation">.</span>createView<span class="token punctuation">(</span><span class="token string">"code_View"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>codeModel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>codeView<span class="token punctuation">)</span>          <span class="token comment">#================================ initData ==================================#</span>        <span class="token comment"># 数据映射</span>        self<span class="token punctuation">.</span>mapper <span class="token operator">=</span> QDataWidgetMapper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 提交策略</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>setSubmitPolicy<span class="token punctuation">(</span>QDataWidgetMapper<span class="token punctuation">.</span>AutoSubmit<span class="token punctuation">)</span>        <span class="token comment"># 映射的模型源</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>setModel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>codeModel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>addMapping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>addMapping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>addMapping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>addMapping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l4<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>addMapping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l5<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>toFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">#================================ pushButton ==================================#</span>        self<span class="token punctuation">.</span>sub_btn<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>submit<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sub_btn<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>codeModel<span class="token punctuation">.</span>submitAll<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pre_btn<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>toPrevious<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>next_btn<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>toNext<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">initializeModel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> tablename<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''重关联。'''</span>        model<span class="token punctuation">.</span>setTable<span class="token punctuation">(</span>tablename<span class="token punctuation">)</span><span class="token comment">#        model.setEditStrategy(QSqlTableModel.OnRowChange)</span>        model<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">createView</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''创建TableView视图'''</span>        view <span class="token operator">=</span>  QTableView<span class="token punctuation">(</span><span class="token punctuation">)</span>        view<span class="token punctuation">.</span>setModel<span class="token punctuation">(</span>model<span class="token punctuation">)</span>        view<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token comment">#列宽设置</span>        view<span class="token punctuation">.</span>horizontalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setSectionResizeMode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">#行高设置</span>        view<span class="token punctuation">.</span>verticalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setSectionResizeMode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#充满列宽</span>        view<span class="token punctuation">.</span>horizontalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setStretchLastSection<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#        view.verticalHeader().setVisible(False)#隐藏行标题</span>        <span class="token comment">#标题左对齐</span>        view<span class="token punctuation">.</span>horizontalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setDefaultAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>        <span class="token comment">#标题左对齐</span>        view<span class="token punctuation">.</span>verticalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setDefaultAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>                <span class="token keyword">return</span> view      <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys        app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>setStyle<span class="token punctuation">(</span>QStyleFactory<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">"Fusion"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ui <span class="token operator">=</span> MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    ui<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/images/datawidgetmapper.gif" alt="datawidgetmapper"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5显示.9格式的PNG图片</title>
      <link href="/qtninepatch.html"/>
      <url>/qtninepatch.html</url>
      
        <content type="html"><![CDATA[<p>做过安卓开发的和使用过 QQ 的都知道 <code>.9.png</code>  这种图片格式，效果就如 QQ 的聊天气泡一样可以拉伸，这种格式的图片允许开发人员定义可扩展区域，当需要延伸图片以填充比图片本身更大区域时，可扩展区的内容被延展；允许开发人员定义内容显示区，用于显示文字或其他内容。目前在 <code>Github</code>  上有两个 C++ 版本的，在这里我把它们都用 Python 实现了一遍。另外一个我也为 <code>PyQt</code>  提供了编译好的 pyd 文件。</p><span id="more"></span><h2 id="c版本"><a class="markdownIt-Anchor" href="#c版本">#</a> C++ 版本</h2><p>在 Github 开源库中搜索到两个 C++ 版本的</p><ol><li>一个是 <a href="https://github.com/Roninsc2/NinePatchQt">NinePatchQt</a></li><li>一个是 <a href="https://github.com/soramimi/QtNinePatch">QtNinePatch</a></li></ol><h2 id="pyqt5版本"><a class="markdownIt-Anchor" href="#pyqt5版本">#</a> PyQt5 版本</h2><p>这里也分为两个版本，都是基于上面的 C++ 源码翻译改写过来的，具体的例子见项目里面的测试代码吧。</p><ol><li><a href="https://github.com/PyQt5/PyQt/blob/master/QLabel/QtNinePatch.py">QtNinePatch</a> 是参考第一个源码编写，用法是在 <code>paintEvent</code>  中调用</li><li><a href="https://github.com/PyQt5/PyQt/blob/master/QLabel/QtNinePatch2.py">QtNinePatch2</a> 是参考第二个源码编写，用法是 <code>pixmap = QtNinePatch.createPixmapFromNinePatchImage(self.image, self.width(), self.height())</code>  直接得到一个处理好的 <code>QPixmap</code>  对象来使用</li></ol><h2 id="说明"><a class="markdownIt-Anchor" href="#说明">#</a> 说明</h2><ol><li>建议优先使用 pyd 版本的（后续提供 Python3.4 3.5 3.6 3.7 编译好的 32 为库文件），也可以自行编译，编译步骤见下文。</li><li>其次可以使用纯 python 版本 2 的（个人觉得方便调用）</li><li>最后再考虑纯 python 版本 1 的吧</li><li>以上为个人意见，两个 C++ 版本的写法不一样，但是核心算法应该是类似的。</li></ol><h2 id="自行编译"><a class="markdownIt-Anchor" href="#自行编译">#</a> 自行编译</h2><ol><li>首先要安装好 Qt、PyQt5、编译安装对应的 sip、对应的 VC++ 编译工具</li><li>用 Qt Creator 打开 pro 文件进行编译</li><li>进入源码中的 sip 文件夹修改 configure.py 文件</li></ol><pre class="line-numbers language-none"><code class="language-none"># 这里是你的VC版本和对应的Qt目录中的文件夹config.platform &#x3D; &quot;win32-msvc2010&quot;qt_path &#x3D; &#39;D:&#x2F;soft&#x2F;Qt&#x2F;Qt5.5.1&#x2F;5.5&#x2F;msvc2010&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>最后执行 python configure.py 来编译</li></ol><h2 id="下载"><a class="markdownIt-Anchor" href="#下载">#</a> 下载</h2><p><a href="https://github.com/PyQt5/PyQt/tree/master/QLabel">https://github.com/PyQt5/PyQt/tree/master/QLabel</a></p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QLabel/ScreenShot/NinePatchImage.gif" alt="NinePatchImage"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 图片 </tag>
            
            <tag> 气泡 </tag>
            
            <tag> .9png </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5菜单之多选功能</title>
      <link href="/mselectmenu.html"/>
      <url>/mselectmenu.html</url>
      
        <content type="html"><![CDATA[<p>有时候会遇到这种需求：在界面某个位置弹出一个菜单，其中里面的菜单项可以多选（类似配置选项），此时用 <code>QMenu</code>  会遇到点击一个菜单项就会自动关闭，当然可以通过其他方式实现该功能，不过这里就采用 <code>QMenu</code>  通过特殊的方式来实现该需求。</p><span id="more"></span><h2 id="需求"><a class="markdownIt-Anchor" href="#需求">#</a> 需求</h2><p>要实现的效果：</p><ol><li>菜单 1</li><li>菜单 2</li><li>菜单 3</li><li>菜单 4</li></ol><p>点击菜单 1、2、3 可以多选不关闭菜单</p><p>点击菜单 4 可以勾选，并且关闭菜单</p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理</h2><ol><li>设置菜单项可勾选：通过 <code>QAction.setCheckable(True)</code>  方法实现</li><li>设置菜单不可关闭：通过覆盖 QMenu 的鼠标释放 <code>mouseReleaseEvent</code>  方法（可直接替换或者通过 <code>installEventFilter</code>  安装事件过滤器实现）</li><li>在菜单的鼠标释放事件中，当点击菜单项后是通过点击点坐标来查找是否有 <code>QAction</code> ，然后触发对应的 <code>QAction</code> 。</li><li>故在没有 <code>QAction</code>  的地方则直接交还给 <code>QMenu</code>  自行处理逻辑，在有 <code>QAction</code>  的地方可以根据自己的需求进行处理（如上所提）</li></ol><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年10月24日@author: Irony@site: https://github.com/892768447@email: 892768447@qq.com@file: 菜单多选不关闭@description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMenu<span class="token punctuation">,</span>\    QAction__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2018 Irony"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>labelInfo <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'带按钮的菜单'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>labelInfo<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>        <span class="token comment"># 添加菜单</span>        self<span class="token punctuation">.</span>_initMenu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_initMenu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建菜单</span>        self<span class="token punctuation">.</span>_menu <span class="token operator">=</span> QMenu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>        <span class="token comment"># 替换menu的鼠标释放事件达到选择性不关闭菜单</span>        self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>mouseReleaseEvent <span class="token operator">=</span> self<span class="token punctuation">.</span>_menu_mouseReleaseEvent        self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">'菜单1'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_checkAction<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">'菜单2'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_checkAction<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>            QAction<span class="token punctuation">(</span><span class="token string">'菜单3'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_menu<span class="token punctuation">,</span> triggered<span class="token operator">=</span>self<span class="token punctuation">.</span>_checkAction<span class="token punctuation">)</span><span class="token punctuation">)</span>        action <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'菜单4'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_menu<span class="token punctuation">,</span> triggered<span class="token operator">=</span>self<span class="token punctuation">.</span>_checkAction<span class="token punctuation">)</span>        <span class="token comment"># 添加自定义的属性,判断该属性可以关闭菜单</span>        action<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">'canHide'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token keyword">for</span> action <span class="token keyword">in</span> self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>actions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 循环设置可勾选</span>            action<span class="token punctuation">.</span>setCheckable<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setMenu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_menu<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_menu_mouseReleaseEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        action <span class="token operator">=</span> self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>actionAt<span class="token punctuation">(</span>event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> action<span class="token punctuation">:</span>            <span class="token comment"># 没有找到action就交给QMenu自己处理</span>            <span class="token keyword">return</span> QMenu<span class="token punctuation">.</span>mouseReleaseEvent<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_menu<span class="token punctuation">,</span> event<span class="token punctuation">)</span>        <span class="token keyword">if</span> action<span class="token punctuation">.</span><span class="token builtin">property</span><span class="token punctuation">(</span><span class="token string">'canHide'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 如果有该属性则给菜单自己处理</span>            <span class="token keyword">return</span> QMenu<span class="token punctuation">.</span>mouseReleaseEvent<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_menu<span class="token punctuation">,</span> event<span class="token punctuation">)</span>        <span class="token comment"># 找到了QAction则只触发Action</span>        action<span class="token punctuation">.</span>activate<span class="token punctuation">(</span>action<span class="token punctuation">.</span>Trigger<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_checkAction</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 三个action都响应该函数</span>        self<span class="token punctuation">.</span>labelInfo<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&#123;&#125;\t选中：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            action<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>isChecked<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> action <span class="token keyword">in</span> self<span class="token punctuation">.</span>_menu<span class="token punctuation">.</span>actions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">import</span> cgitb    sys<span class="token punctuation">.</span>excepthook <span class="token operator">=</span> cgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QMenu/ScreenShot/MultiSelect.gif" alt="MultiSelect"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程之守护线程和阻塞线程</title>
      <link href="/daemonthread.html"/>
      <url>/daemonthread.html</url>
      
        <content type="html"><![CDATA[<p>如果你设置一个线程为守护线程，就表示你在说这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。如果你的主线程在退出的时候，不用等待那些子线程完成，那就设置这些线程的 daemon 属性。</p><span id="more"></span><p>即在线程开始（thread.start ()）之前，调用 setDeamon（）函数，设定线程的 daemon 标志。</p><p>（thread.setDaemon (True)）就表示这个线程 “不重要”。</p><p>如果你想等待子线程完成再退出，那就什么都不用做，或者显示地调用 thread.setDaemon (False)，设置 daemon 的值为 false。新的子线程会继承父线程的 daemon 标志。</p><p>整个 Python 会在所有的非守护线程退出后才会结束，即进程中没有非守护线程存在的时候才结束。</p><p>setDaemon () 函数要放在 start 之前设置才行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子线程开启："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子线程结束："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主线程开启："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># t.setDaemon(True)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主线程关闭："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Python 的多线程编程中，在实例代码中经常有 thread1.join () 这样的代码。那么今天咱们用实际代码来解释一下 join 函数的作用。</p><p>join 的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的 join 函数。</p><p>先看看这个：</p><ol><li>阻塞主进程，专注于执行多线程中的程序。</li><li>多线程多 join 的情况下，依次执行各线程的 join 方法，前头一个结束了才能执行后面一个。</li><li>无参数，则等待到该线程结束，才开始执行下一个线程的 join。</li><li>参数 timeout 为线程的阻塞时间，如 timeout=2 就是罩着这个线程 2s 以后，就不管他了，继续执行下面的代码。</li><li>下面的例子是一次阻塞子线程，每个子线程都会等上个子线程 join 结束才会执行，如果注释掉 t.join 则会同时执行 5 个子线程，多线程在做网络访问的时候可以减少等待时间，那么在一个工作流程中可以将访问网络接口的情况做成多线程。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello main start"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5结合Asyncio异步</title>
      <link href="/pyqt5asyncio.html"/>
      <url>/pyqt5asyncio.html</url>
      
        <content type="html"><![CDATA[<p>今天尝试了下<a href="https://github.com/harvimt/quamash"> quamash</a> 框架，该框架是一个 <code>PyQt</code>  的异步事件循环封装库，使用 Python3+ 的 <code>asyncio</code>  这个异步库。在看了该项目的内容后发现只有一个简单的进度条例子，故尝试用其来下载网络图片并显示。</p><span id="more"></span><h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖">#</a> 安装依赖</h2><ol><li>pip install quamash</li><li>pip install aiohttp</li><li>Python3.5+ 和 PyQt5</li></ol><p>这里使用 <code>aiohttp</code>  是因为它基于 <code>asyncio</code>  封装的网络操作库，常见的 <code>get</code> 、 <code>post</code>  等方法，不过它只支持 Python3.5 及以上的版本，主要是它使用了 async def 这样的语法。</p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明">#</a> 说明</h2><ol><li>在创建 <code>QApplication</code>  后随即设置替换事件循环 <code>loop</code></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>loop <span class="token operator">=</span> QEventLoop<span class="token punctuation">(</span>app<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>通过 <code>asyncio.ensure_future(func(), loop=loop)</code>  来执行某个异步函数</li></ol><h2 id="流程"><a class="markdownIt-Anchor" href="#流程">#</a> 流程</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"></th><th style="text-align:right"></th></tr></thead><tbody><tr><td style="text-align:left">Window</td><td style="text-align:center">→</td><td style="text-align:right">initSession（初始化 session）</td></tr><tr><td style="text-align:left">↓</td><td style="text-align:center"></td><td style="text-align:right"></td></tr><tr><td style="text-align:left">下载按钮</td><td style="text-align:center">→</td><td style="text-align:right">doDownload（执行_doDownload 方法）</td></tr><tr><td style="text-align:left">↓</td><td style="text-align:center"></td><td style="text-align:right"></td></tr><tr><td style="text-align:left">session.get（下载 json 数据进行解析）</td><td style="text-align:center"></td><td style="text-align:right"></td></tr><tr><td style="text-align:left">↓</td><td style="text-align:center"></td><td style="text-align:right"></td></tr><tr><td style="text-align:left">添加到界面</td><td style="text-align:center">←</td><td style="text-align:right">_doDownloadImage（对单张图片进行下载）</td></tr></tbody></table><h2 id="源码"><a class="markdownIt-Anchor" href="#源码">#</a> 源码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年10月24日@author: Irony@site: https://github.com/892768447@email: 892768447@qq.com@file: AsyncioUiClient@description: """</span><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPixmap<span class="token punctuation">,</span> QMovie<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span>\    QApplication<span class="token punctuation">,</span> QListWidget<span class="token punctuation">,</span> QListWidgetItem<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QMessageBox<span class="token keyword">import</span> aiohttp<span class="token keyword">from</span> quamash <span class="token keyword">import</span> QEventLoop__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2018 Irony"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span>Url <span class="token operator">=</span> <span class="token string">'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&amp;mime=0&amp;page=&#123;&#125;'</span>Headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">':authority'</span><span class="token punctuation">:</span> <span class="token string">'www.doutula.com'</span><span class="token punctuation">,</span>    <span class="token string">':method'</span><span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">':scheme'</span><span class="token punctuation">:</span> <span class="token string">'https'</span><span class="token punctuation">,</span>    <span class="token string">'accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span><span class="token punctuation">,</span>    <span class="token string">'accept-language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>    <span class="token string">'cache-control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=0'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'upgrade-insecure-requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6756.400 QQBrowser/10.2.2498.400'</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listWidget <span class="token operator">=</span> QListWidget<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setSpacing<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># item直接的间隔</span>        <span class="token comment"># 隐藏横向滚动条</span>        self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setHorizontalScrollBarPolicy<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ScrollBarAlwaysOff<span class="token punctuation">)</span>        <span class="token comment"># 让list 从左到右排列</span>        self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setFlow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>LeftToRight<span class="token punctuation">)</span>        <span class="token comment"># 自动换行</span>        self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setWrapping<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setResizeMode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>Adjust<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonMsg <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'弹出提示框'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>showMessage<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonDown <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>doDownload<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listWidget<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonMsg<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonDown<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>initSession<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 其实没必要，session主要用在需要登录的网站。缓存cookie用</span>    <span class="token keyword">def</span> <span class="token function">initSession</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">_initSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 初始化session</span>            self<span class="token punctuation">.</span>session <span class="token operator">=</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span>loop<span class="token operator">=</span>loop<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>session<span class="token punctuation">)</span>        asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>_initSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token operator">=</span>loop<span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">_doDownloadImage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 下载图片并添加到界面</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载失败: '</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>                <span class="token keyword">return</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            item <span class="token operator">=</span> QListWidgetItem<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>listWidget<span class="token punctuation">)</span>            image <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            item<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listWidget<span class="token punctuation">)</span>            label<span class="token punctuation">.</span>setPixmap<span class="token punctuation">(</span>image<span class="token punctuation">)</span>            <span class="token keyword">if</span> path<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.gif'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 可能是动态图</span>                label<span class="token punctuation">.</span>setMovie<span class="token punctuation">(</span>QMovie<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>setItemWidget<span class="token punctuation">(</span>item<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>listWidget<span class="token punctuation">.</span>scrollToBottom<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">_doDownload</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 下载工作</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>currentPage <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'提示'</span><span class="token punctuation">,</span> <span class="token string">'已经没有更多了'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>currentPage <span class="token operator">+=</span> <span class="token number">1</span>        url <span class="token operator">=</span> Url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>currentPage<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get url: '</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>Headers<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经是最后一页了'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># 解析json并生成item添加到界面中</span>            <span class="token keyword">for</span> entity <span class="token keyword">in</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> entity<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image_url'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> url<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">await</span> self<span class="token punctuation">.</span>_doDownloadImage<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 下载图片</span>    <span class="token keyword">def</span> <span class="token function">doDownload</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 响应按钮点击调用</span>        asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_doDownload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token operator">=</span>loop<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 显示对话框</span>        app<span class="token punctuation">.</span>aboutQt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>closed<span class="token punctuation">:</span>            asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token operator">=</span>loop<span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>closeEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">import</span> cgitb    <span class="token keyword">import</span> os    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>excepthook <span class="token operator">=</span> cgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    loop <span class="token operator">=</span> QEventLoop<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> loop<span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/images/pyqt5asyncio.gif" alt="pyqt5asyncio"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> Asyncio </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5仿网页图片鼠标移动特效</title>
      <link href="/likehtmleffect.html"/>
      <url>/likehtmleffect.html</url>
      
        <content type="html"><![CDATA[<p>em，就是类似于那种游戏官网首页的图片，鼠标放上去后来回移动，图片的前景和背景错位移动。</p><span id="more"></span><h2 id="原理分析"><a class="markdownIt-Anchor" href="#原理分析">#</a> 原理分析</h2><ol><li>2 张一样大小的透明图片，1 张作为背景，一张作为前景（比如说人物）。</li><li>当鼠标往左移动时，前景人物跟着往左移动，背景往右移动</li><li>计算好偏移量（见代码中）</li></ol><p><a href="https://github.com/PyQt5/PyQt/blob/master/QLabel/ImageSlipped.py">https://github.com/PyQt5/PyQt/blob/master/QLabel/ImageSlipped.py</a></p><h2 id="关键代码"><a class="markdownIt-Anchor" href="#关键代码">#</a> 关键代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年10月18日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: ImageSlipped@description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPixmap<span class="token punctuation">,</span> QPainter<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2018 Irony"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">SlippedImgWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bg<span class="token punctuation">,</span> fg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SlippedImgWidget<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 开启鼠标跟踪</span>        self<span class="token punctuation">.</span>setMouseTracking<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 背景</span>        self<span class="token punctuation">.</span>bgPixmap <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>bg<span class="token punctuation">)</span>        <span class="token comment"># 前景</span>        self<span class="token punctuation">.</span>pePixmap <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>fg<span class="token punctuation">)</span>        <span class="token comment"># 最小尺寸(背景右边和下方隐藏10个像素)</span>        size <span class="token operator">=</span> self<span class="token punctuation">.</span>bgPixmap<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setMinimumSize<span class="token punctuation">(</span>size<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setMaximumSize<span class="token punctuation">(</span>size<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 分成10份用于鼠标移动判断</span>        self<span class="token punctuation">.</span>stepX <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>stepY <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>        <span class="token comment"># 偏移量</span>        self<span class="token punctuation">.</span>_offsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># 背景(-4,-4),前景(-4,-4)</span>    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SlippedImgWidget<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>mouseMoveEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>        pos <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 偏移量</span>        offsetX <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>stepX<span class="token punctuation">)</span>        offsetY <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>stepY<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> offsetX        self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> offsetY        self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> offsetX        self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> offsetY        <span class="token comment"># 刷新</span>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SlippedImgWidget<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>paintEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>        <span class="token comment"># 绘制图形</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">)</span>        <span class="token comment"># 左上角偏移5个像素画背景图片</span>        painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>            <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bgPixmap<span class="token punctuation">)</span>        <span class="token comment"># 右下角偏移5个像素画前景图片</span>        painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>pePixmap<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>pePixmap<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>_offsets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>pePixmap        <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> SlippedImgWidget<span class="token punctuation">(</span><span class="token string">'images/bg.png'</span><span class="token punctuation">,</span> <span class="token string">'images/fg.png'</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QLabel/ScreenShot/ImageSlipped.gif" alt="ImageSlipped"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5窗口跟随其它窗口</title>
      <link href="/followwindow.html"/>
      <url>/followwindow.html</url>
      
        <content type="html"><![CDATA[<p>要实现 <code>PyQt</code>  窗口跟随其它外部的窗口，能想到两点办法，一个是 hook 系统事件得到目标窗口的位置和大小以及是否关闭等，二是通过循环检测窗口的位置来实现。</p><span id="more"></span><h2 id="基于windows定时检测目标窗口"><a class="markdownIt-Anchor" href="#基于windows定时检测目标窗口">#</a> 基于 Windows 定时检测目标窗口</h2><ol><li>利用 <code>win32gui</code>  模块获取目标窗口的句柄</li><li>通过句柄获取目标窗口的大小位置，并设置自己的位置</li><li>主要是检测时间，在 10 毫秒以下很流畅</li><li>窗口关闭是根据目标句柄无效来判断</li></ol><p><a href="https://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py">https://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py</a></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年10月22日@author: Irony@site: https://github.com/892768447@email: 892768447@qq.com@file: FollowWindow@description: """</span><span class="token keyword">import</span> os<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QTimer<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QPushButton<span class="token keyword">import</span> win32gui__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2018 Irony"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QPushButton<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tmpHwnd <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 启动定时器检测记事本的位置大小和是否关闭</span>        self<span class="token punctuation">.</span>checkTimer <span class="token operator">=</span> QTimer<span class="token punctuation">(</span>self<span class="token punctuation">,</span> timeout<span class="token operator">=</span>self<span class="token punctuation">.</span>checkWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>checkTimer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 10毫秒比较流畅</span>    <span class="token keyword">def</span> <span class="token function">checkWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 查找</span>        hwnd <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>FindWindow<span class="token punctuation">(</span><span class="token string">'Notepad'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>tmpHwnd <span class="token keyword">and</span> <span class="token keyword">not</span> hwnd<span class="token punctuation">:</span>            <span class="token comment"># 表示记事本关闭了</span>            self<span class="token punctuation">.</span>checkTimer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭自己</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> hwnd<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>tmpHwnd <span class="token operator">=</span> hwnd        <span class="token comment"># 获取位置</span>        rect <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetWindowRect<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>move<span class="token punctuation">(</span>rect<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rect<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    <span class="token comment"># 先检测是否已有记事本打开</span>    hwnd <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>FindWindow<span class="token punctuation">(</span><span class="token string">'Notepad'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hwnd'</span><span class="token punctuation">,</span> hwnd<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> hwnd<span class="token punctuation">:</span>        <span class="token comment"># 启动记事本</span>        os<span class="token punctuation">.</span>startfile<span class="token punctuation">(</span><span class="token string">'notepad'</span><span class="token punctuation">)</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/Demo/ScreenShot/FollowWindow.gif" alt="FollowWindow"></p>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5动画边框阴影</title>
      <link href="/animateshadow.html"/>
      <url>/animateshadow.html</url>
      
        <content type="html"><![CDATA[<p>为子控件增加动画阴影效果，结合 <code>QGraphicsDropShadowEffect</code>  和 <code>QPropertyAnimation</code>  动态改变阴影半径达到效果，在旧版本的 Qt 中 <code>QGraphicsDropShadowEffect</code>  可能会有点问题（父控件会影响子控件）</p><span id="more"></span><h2 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理</h2><p>原理是利用 QGraphicsDropShadowEffect 添加边框阴影，然后使用动画不停改变阴影的模糊半径来达到效果，如图：</p><p><img src="/PyQt/QGraphicsDropShadowEffect/ScreenShot/ShadowEffect.gif" alt="ShadowEffect"></p><h2 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明">#</a> 简单说明</h2><ol><li>继承 <code>QGraphicsDropShadowEffect</code>  增加动态属性 <code>radius</code></li><li>通过 <code>setGraphicsEffect</code>  方法设置控件的边框阴影</li><li>通过 <code>QPropertyAnimation</code>  属性动画不断改变 <code>radius</code>  的值并调用 <code>setBlurRadius</code>  更新半径值</li></ol><p><a href="https://github.com/PyQt5/PyQt/blob/master/QGraphicsDropShadowEffect/ShadowEffect.py">https://github.com/PyQt5/PyQt/blob/master/QGraphicsDropShadowEffect/ShadowEffect.py</a></p><h2 id="自定义类"><a class="markdownIt-Anchor" href="#自定义类">#</a> 自定义类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年9月25日@author: Irony@site: https://pyqt5.com, https://github.com/892768447@email: 892768447@qq.com@file: AnimationShadowEffect@description: 边框动画阴影动画"""</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QPropertyAnimation<span class="token punctuation">,</span> pyqtProperty<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsDropShadowEffect__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2018 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">AnimationShadowEffect</span><span class="token punctuation">(</span>QGraphicsDropShadowEffect<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>AnimationShadowEffect<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setColor<span class="token punctuation">(</span>color<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setOffset<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setBlurRadius<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_radius <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setTargetObject<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 一次循环时间</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setLoopCount<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 永久循环</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setPropertyName<span class="token punctuation">(</span><span class="token string">b'radius'</span><span class="token punctuation">)</span>        <span class="token comment"># 插入线行值</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pyqtProperty</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">radius</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_radius    <span class="token decorator annotation punctuation">@radius<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">radius</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_radius <span class="token operator">=</span> r        self<span class="token punctuation">.</span>setBlurRadius<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试代码"><a class="markdownIt-Anchor" href="#测试代码">#</a> 测试代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2018年9月25日@author: Irony@site: https://pyqt5.com, https://github.com/892768447@email: 892768447@qq.com@file: Test@description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPixmap<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QHBoxLayout<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QLineEdit<span class="token keyword">from</span> AnimationShadowEffect <span class="token keyword">import</span> AnimationShadowEffect  <span class="token comment"># @UnresolvedImport</span>__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2018 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment"># 绿色边框</span>        labelGreen <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>self<span class="token punctuation">,</span> pixmap<span class="token operator">=</span>QPixmap<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaled<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>labelGreen<span class="token punctuation">)</span>        aniGreen <span class="token operator">=</span> AnimationShadowEffect<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>darkGreen<span class="token punctuation">,</span> labelGreen<span class="token punctuation">)</span>        labelGreen<span class="token punctuation">.</span>setGraphicsEffect<span class="token punctuation">(</span>aniGreen<span class="token punctuation">)</span>        aniGreen<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 红色边框,圆形图片</span>        labelRed <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        labelRed<span class="token punctuation">.</span>setMinimumSize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        labelRed<span class="token punctuation">.</span>setMaximumSize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        labelRed<span class="token punctuation">.</span>setStyleSheet<span class="token punctuation">(</span><span class="token string">'border-image: url(1.jpg);border-radius: 50px;'</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>labelRed<span class="token punctuation">)</span>        aniRed <span class="token operator">=</span> AnimationShadowEffect<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>red<span class="token punctuation">,</span> labelGreen<span class="token punctuation">)</span>        labelRed<span class="token punctuation">.</span>setGraphicsEffect<span class="token punctuation">(</span>aniRed<span class="token punctuation">)</span>        aniRed<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 蓝色边框按钮</span>        button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'按钮'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        aniButton <span class="token operator">=</span> AnimationShadowEffect<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> button<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>button<span class="token punctuation">)</span>        button<span class="token punctuation">.</span>setGraphicsEffect<span class="token punctuation">(</span>aniButton<span class="token punctuation">)</span>        aniButton<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 青色边框输入框</span>        lineedit <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        aniEdit <span class="token operator">=</span> AnimationShadowEffect<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>cyan<span class="token punctuation">,</span> lineedit<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>lineedit<span class="token punctuation">)</span>        lineedit<span class="token punctuation">.</span>setGraphicsEffect<span class="token punctuation">(</span>aniEdit<span class="token punctuation">)</span>        aniEdit<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 动画 </tag>
            
            <tag> 阴影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5圆形图片</title>
      <link href="/circleimage.html"/>
      <url>/circleimage.html</url>
      
        <content type="html"><![CDATA[<p>实现圆形图片的方法有很多，比如用遮罩（mask）, 裁切等等。这里比较几种实现方式，选出个人认为最优的方案。</p><span id="more"></span><p><a href="https://github.com/PyQt5/PyQt/blob/master/QLabel/CircleImage.py">https://github.com/PyQt5/PyQt/blob/master/QLabel/CircleImage.py</a></p><h2 id="采用mask方式"><a class="markdownIt-Anchor" href="#采用mask方式">#</a> 采用 mask 方式</h2><p>具体参考 <a href="https://www.cnblogs.com/zhehan54/p/9515124.html">【Qt】QLabel 实现的圆形图像 - 米罗西 - 博客园</a></p><h2 id="画圆形遮盖适合纯色背景"><a class="markdownIt-Anchor" href="#画圆形遮盖适合纯色背景">#</a> 画圆形遮盖（适合纯色背景）</h2><p>原理是在原图片上画一个 4 角有颜色，中间圆形镂空的图片。</p><p><img src="/images/circleimage1.png" alt="circleimage1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">'''Created on 2017年8月25日@author: Irony."[讽刺]@site: https://pyqt5.com, https://github.com/892768447@email: 892768447@qq.com@description: '''</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPixmap<span class="token punctuation">,</span> QPainter<span class="token punctuation">,</span> QPainterPath<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QLabel<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QHBoxLayout__Author__ <span class="token operator">=</span> <span class="token string">"By: Irony.\"[讽刺]\nQQ: 892768447\nEmail: 892768447@qq.com"</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2017 Irony.\"[讽刺]"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">Label</span><span class="token punctuation">(</span>QLabel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> antialiasing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Label<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Antialiasing <span class="token operator">=</span> antialiasing        self<span class="token punctuation">.</span>setMaximumSize<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setMinimumSize<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">100</span>        <span class="token comment">#加载图片并缩放</span>        self<span class="token punctuation">.</span>image <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">"head.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>            <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>KeepAspectRatioByExpanding<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">:</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>HighQualityAntialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>SmoothPixmapTransform<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> QPainterPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        path<span class="token punctuation">.</span>addRoundedRect<span class="token punctuation">(</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> self<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>        path<span class="token punctuation">.</span>addRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>NoPen<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>green<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>drawPath<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span> antialiasing<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setStyleSheet<span class="token punctuation">(</span><span class="token string">"background: black;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用qpainter的setcompositionmode"><a class="markdownIt-Anchor" href="#使用qpainter的setcompositionmode">#</a> 使用 QPainter 的 setCompositionMode</h2><p>具体参考 <a href="https://qtdream.com/topic/911/qt-%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7-%E6%8A%97%E9%94%AF%E9%BD%BF-%E5%8F%AF%E7%BC%A9%E6%94%BE%E7%BC%96%E8%BE%91">Qt 圆形头像制作工具 抗锯齿 可缩放编辑</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;result_avatar_size 是我们最后生成的图片的长宽，可以是QSize(200, 200)的正圆destination_image &#x3D; QImage(result_avatar_size, QImage::Format_ARGB32_Premultiplied);&#x2F;&#x2F;在黑色的正方形中间画一个透明的圆，作为头像遮罩QPainter painter(&amp;destination_image);painter.setRenderHint(QPainter::Antialiasing);&#x2F;&#x2F;全涂黑painter.fillRect(destination_image.rect(), QBrush(Qt::black, Qt::SolidPattern));painter.setCompositionMode(QPainter::CompositionMode_SourceOut);painter.setPen(Qt::NoPen);painter.setBrush(QBrush(Qt::transparent, Qt::SolidPattern));&#x2F;&#x2F;画透明区域painter.drawEllipse(destination_image.rect());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用qpainter的切割方法推荐"><a class="markdownIt-Anchor" href="#使用qpainter的切割方法推荐">#</a> 使用 QPainter 的切割方法（推荐）</h2><p>利用 <code>QPainter.setClipPath</code>  方法切割一个圆形的 <code>QPainterPath</code></p><p><img src="/images/circleimage2.png" alt="circleimage2"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">'''Created on 2017年8月25日@author: Irony."[讽刺]@site: https://pyqt5.com, https://github.com/892768447@email: 892768447@qq.com@file: @description: '''</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPixmap<span class="token punctuation">,</span> QPainter<span class="token punctuation">,</span> QPainterPath<span class="token punctuation">,</span> QPen<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QLabel<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QHBoxLayout__Author__ <span class="token operator">=</span> <span class="token string">"By: Irony.\"[讽刺]\nQQ: 892768447\nEmail: 892768447@qq.com"</span>__Copyright__ <span class="token operator">=</span> <span class="token string">"Copyright (c) 2017 Irony.\"[讽刺]"</span>__Version__ <span class="token operator">=</span> <span class="token string">"Version 1.0"</span><span class="token keyword">class</span> <span class="token class-name">Label</span><span class="token punctuation">(</span>QLabel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> antialiasing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Label<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Antialiasing <span class="token operator">=</span> antialiasing        self<span class="token punctuation">.</span>setMaximumSize<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setMinimumSize<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">100</span>        <span class="token comment">#####################核心实现#########################</span>        self<span class="token punctuation">.</span>target <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 大小和控件一样</span>        self<span class="token punctuation">.</span>target<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>transparent<span class="token punctuation">)</span>  <span class="token comment"># 填充背景为透明</span>        p <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">"head.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>  <span class="token comment"># 加载图片并缩放和控件一样大</span>            <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>KeepAspectRatioByExpanding<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">:</span>            <span class="token comment"># 抗锯齿</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>HighQualityAntialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>SmoothPixmapTransform<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#         painter.setPen(# 测试黑色圆圈</span><span class="token comment">#             QPen(Qt.black, 5, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))</span>        path <span class="token operator">=</span> QPainterPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        path<span class="token punctuation">.</span>addRoundedRect<span class="token punctuation">(</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> self<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>        <span class="token comment">#**** 切割为圆形 ****#</span>        painter<span class="token punctuation">.</span>setClipPath<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment">#         painter.drawPath(path)  # 测试黑色圆圈</span>        painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token comment">#####################核心实现#########################</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span> antialiasing<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setStyleSheet<span class="token punctuation">(</span><span class="token string">"background: black;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> 圆形 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常捕获之cgitb模块</title>
      <link href="/cgitb.html"/>
      <url>/cgitb.html</url>
      
        <content type="html"><![CDATA[<p><code>cgitb</code>  模块为 <code>Python</code>  脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以 HTML 格式展示 cgi 脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。</p><span id="more"></span><h2 id="用途"><a class="markdownIt-Anchor" href="#用途">#</a> 用途</h2><p>当编辑器中无法显示错误信息时，尤其是 <code>PyQt</code> ，可以尝试在 cmd 中运行代码，或者使用此模块来得到错误信息。</p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h2><h3 id="cgitbenable"><a class="markdownIt-Anchor" href="#cgitbenable">#</a> cgitb.enable</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">cgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span>display<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> logdir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">"html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><ol><li>display 1，发送至浏览器；0， 不发送</li><li>logdir 如果有的话，写到该目录下</li><li>context 显示错误代码周围的代码行数</li><li>format 是否显示为 HTML，除了’html’之外的所有值，都会显示为纯文本</li></ol><h3 id="cgitbhandle"><a class="markdownIt-Anchor" href="#cgitbhandle">#</a> cgitb.handle</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">cgitb<span class="token punctuation">.</span>handle<span class="token punctuation">(</span>info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><ol><li>如果你想用 cgitb 处理异常，你可以调用这个函数。</li><li>info 应当是含有异常类型、异常值和 traceback 对象的三元组</li><li>如同 sys.exc_info () 返回的那样。如果不提供 info，则从 sys.exc_info 中获取。</li></ol><h2 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用">#</a> 如何使用</h2><p>以下代码放在最开始执行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cgitb<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>excepthook <span class="token operator">=</span> cgitb<span class="token punctuation">.</span>Hook<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
