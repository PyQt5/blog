<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PyQt</title>
  
  <subtitle>个人学习经验分享</subtitle>
  <link href="https://pyqt5.com/atom.xml" rel="self"/>
  
  <link href="https://pyqt5.com/"/>
  <updated>2024-04-30T01:46:52.392Z</updated>
  <id>https://pyqt5.com/</id>
  
  <author>
    <name>Irony</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pytest-qt 测试模态窗体.</title>
    <link href="https://pyqt5.com/pytest_qt_modal_625781186.html"/>
    <id>https://pyqt5.com/pytest_qt_modal_625781186.html</id>
    <published>2024-04-30T01:46:52.392Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>步骤分别是 :</p><ol><li><p>点击 开始扫描 弹出 选择路径窗口；</p></li><li><p>勾选路基；</p></li></ol><p>3. 点击确定；</p><span id="more"></span><p>大概想测一下这个界面 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-c1ed0bd52808c5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>步骤分别是 :</p><ol><li><p>点击 开始扫描 弹出 选择路径窗口；</p></li><li><p>勾选路基；</p></li></ol><p>3. 点击确定；</p><p>需要测试的函数 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-b5265859d74b269d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>测试函数 :</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-58f4310a54a815ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>可以发现断言失败 .</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-939c73b5be19c21e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>官方文档：测试模态窗体.</p><p><a href="https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html">https://pytest-qt.readthedocs.io/en/latest/note_dialogs.html</a></p><p>用的是官方的  <code>monkeypatch</code>  方式 .</p><p>大致意思就是替换  <code>FileSelectPathDialog</code>  类的 exec 函数.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;步骤分别是 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击 开始扫描 弹出 选择路径窗口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;勾选路基；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3. 点击确定；&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="pytest-qt" scheme="https://pyqt5.com/tags/pytest-qt/"/>
    
  </entry>
  
  <entry>
    <title>如何在Mac M1上快速安装PyQt5</title>
    <link href="https://pyqt5.com/macm1pyqt.html"/>
    <id>https://pyqt5.com/macm1pyqt.html</id>
    <published>2023-10-07T06:08:06.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>由于官方并没有在 M1 上编译 PyQt 导致安装存在一些问题。<br>M1 上的 Python 不能直接使用 x64 的 PyQt5。但是 M1 上可以运行 x64 的 Python。所以通过安装 x64 的 Python 然后再安装 PyQt5 即可。</p><span id="more"></span><p><strong>1. 安装 Python</strong><br><a href="https://www.python.org/ftp/python/3.9.13/python-3.9.13-macosx10.9.pkg">python-3.9.13-macosx10.9.pkg</a></p><p><strong>2. 勾选自定义同时只勾选安装 pip</strong></p><p><img src="/images/macpyqtstep1.png" alt="step1.png"></p><p><img src="/images/macpyqtstep2.png" alt="step1.png"></p><p><strong>3. 设置 pip 源</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class="token function">install</span> pqi/Library/Frameworks/Python.framework/Versions/3.9/bin/pqi use tuna<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4. 安装 PyQt5</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3 <span class="token function">install</span> PyQt5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5. 测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.9/bin/python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/macpyqtstep3.png" alt="step3.png"></p><p>📢📢📢</p><p>也可以直接安装 <a href="https://docs.anaconda.com/free/miniconda/miniconda-install/">Miniconda</a></p><p>然后：conda install -c conda-forge pyqt</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于官方并没有在 M1 上编译 PyQt 导致安装存在一些问题。&lt;br&gt;
M1 上的 Python 不能直接使用 x64 的 PyQt5。但是 M1 上可以运行 x64 的 Python。所以通过安装 x64 的 Python 然后再安装 PyQt5 即可。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://pyqt5.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="Mac" scheme="https://pyqt5.com/tags/Mac/"/>
    
    <category term="M1" scheme="https://pyqt5.com/tags/M1/"/>
    
  </entry>
  
  <entry>
    <title>python 判断屏幕等宽字符串的长度 　</title>
    <link href="https://pyqt5.com/equal_str_width_625781186.html"/>
    <id>https://pyqt5.com/equal_str_width_625781186.html</id>
    <published>2019-12-26T11:49:41.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>判断屏幕等宽字符串的长度？</p><span id="more"></span><p>判断屏幕等宽字符串的长度？</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-58b19652011e153a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>【新手】重庆 - 搬砖 - NoWait 22:41:50  @北京 - BUG 开发 - 黑择明 求指点<br>【专家】北京 - BUG 开发 - 黑择明  22:43:04  fontMetrics<br>【专家】 <a href="https://pyqt.site">https://pyqt.site</a> (892768447) 22:43:54  QFontMetrics<br>【专家】 <a href="https://pyqt.site">https://pyqt.site</a> (892768447) 22:44:09  通过 QLabel.font ().fontMetrics () 得到</p><p>【新手】重庆 - 搬砖 - NoWait 22:52:00<br><a href="https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size">https://stackoverflow.com/questions/35771863/how-to-calculate-length-of-string-in-pixels-for-specific-font-and-size</a><br><img src="https://upload-images.jianshu.io/upload_images/10769157-9dc2f83609106252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>【新手】重庆 - 搬砖 - NoWait 22:53:15  感觉和 fontMetrics 应该是差不多的</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-411570eeadf51793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><p>【专家】北京 - BUG 开发 - 黑择明       (996742224) 11:29:04<br>fm = QFontMetrics(QFont())<br>fm.width(“qweqwe”)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;判断屏幕等宽字符串的长度？&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>修改pyuic代替pyside2-uic.</title>
    <link href="https://pyqt5.com/use_pyuic_insteadof_pyside2uic.html"/>
    <id>https://pyqt5.com/use_pyuic_insteadof_pyside2uic.html</id>
    <published>2019-12-26T11:49:41.000Z</published>
    <updated>2024-04-30T01:46:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>修改 pyuic 代替 pyside2-uic</p><span id="more"></span><p>修改 pyuic 代替 pyside2-uic.</p><p>最近看到挺多人用 pyside2 的 uic 编译 ui 文件有问题 .<br> 写个解决办法.</p><p>首先，<br> <code>pip install qtpy</code>  ,<br> 这个是兼容 pyqt5 和 pyside2 的，无缝转换 .</p><p>然后，<br> 修改 pyqt5 的 uic ,</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-2ed1053f322c26a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>最后用 pyuic5 , 生成 Ui_XXX.py 文件 .</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;修改 pyuic 代替 pyside2-uic&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="PyQt5 PySide2" scheme="https://pyqt5.com/tags/PyQt5-PySide2/"/>
    
  </entry>
  
  <entry>
    <title>PyQt学习心得</title>
    <link href="https://pyqt5.com/studynotes.html"/>
    <id>https://pyqt5.com/studynotes.html</id>
    <published>2019-08-26T01:00:00.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 PyQt 的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习 PyQt 的方法，提高自身的学习能力。</p><span id="more"></span><h2 id="python基础"><a class="markdownIt-Anchor" href="#python基础">#</a> Python 基础</h2><p>在学习和使用 PyQt 之前需要熟练使用 Python，经过对 QQ 群里经常提问的问题的分析，发现大部分人对 Python 中的基础知识掌握不牢固导致很多基础问题，如果要想更好的使用 Python 以及它的扩展必需要进行系统的学习。这里列举一下常用的知识点。</p><ol><li>类　　　　　　　 　<a href="https://www.runoob.com/python3/python3-class.html">参考资料</a></li><li>类的继承</li><li>类的多继承</li><li>类方法重写　　　　 <a href="https://www.runoob.com/w3cnote/python-extends-init.html">参考资料</a></li><li>类中的 super 函数　　<a href="https://www.runoob.com/python/python-func-super.html">参考资料</a></li><li>函数调用 / 参数类型</li><li>对象调用 (参考第 1 点)</li></ol><p>必须熟练掌握上面的知识点后入门 PyQt 才比较容易，如果初学者对上面的知识点还不是很了解，本文不适合继续往下阅读。</p><h2 id="设计师"><a class="markdownIt-Anchor" href="#设计师">#</a> 设计师</h2><p>Qt 设计师除了方便快速设计一些简单的界面外，其实笔者觉得更大的作用在于帮助用户熟悉各类控件、属性、信号等</p><ol><li>这里建议初学者不要急于求成，打开设计师新建一个 <code>Widget</code>  的窗口，比如</li></ol><p><img src="/images/studynotes/desiger_create.png" alt="desiger_create"></p><ol start="2"><li>然后把左侧的所有控件挨个拖动到中间的窗口中，比如这里拖动一个<strong> Push Button</strong> 按钮</li></ol><p><img src="/images/studynotes/desiger_drag.png" alt="desiger_drag"></p><ol start="3"><li>在设计师右下角的属性编辑器中列举了该控件的所有父类，意味着可以调用和重写父类的所有方法，建议初学者把这个属性编辑器的所有属性挨个调整看看效果，部分控件可能需要<strong> Ctrl+R</strong> 预览界面才能看到，同时像<strong> QListWidget，QTreeWidget，QTableWidget</strong> 等某些控件需要在控件上右键增加数据才可以</li></ol><p><img src="/images/studynotes/desiger_property.png" alt="desiger_property"><br><img src="/images/studynotes/desiger_property2.png" alt="desiger_property2"></p><ol start="4"><li>两个控件之间简单的信号槽关联可以通过设计师快速的设置</li></ol><p><img src="/images/studynotes/desiger_signal.png" alt="desiger_signal"><br><img src="/images/studynotes/desiger_signal2.png" alt="desiger_signal2"></p><ol start="5"><li>提高进阶的方法，当你需要手动写代码实现界面的时候，不妨把 UI 文件转出 PY 文件，看看是如何构造的（这里涉及到布局等知识见后文）</li></ol><h2 id="布局"><a class="markdownIt-Anchor" href="#布局">#</a> 布局</h2><p>Qt 界面提供了方便的 4 种基本布局，<strong>QVboxLayout，QHboxLayout，QFormLayout，QGridLayout</strong>，初学者需要数量掌握这 4 种布局外加 2 种拉伸器（占位挤压）</p><p>首先需要知道 Qt 界面的中控件的层级顺序以及 parent，parent 的作用既作为子控件的父元素也可以自动管理 Qt 的对象（具体可以搜索下关于 Qt parent 的资料）</p><ol><li>在没有布局的情况下，在设计师中拖动摆放的控件是一层一层的叠加覆盖，此时每个添加的子控件的 parent 都是最外层的控件</li></ol><p><img src="/images/studynotes/desiger_stack.png" alt="desiger_stack"></p><ol start="2"><li>如果需要界面中的控件自动适应高度宽度，此时则需要使用 4 种布局来包裹里面的子控件，注意的是：布局不是控件不能设置高度宽度和样式等，是一个抽象的东西，就好比是一根橡皮筋包裹几个矩形的物品；布局也可以设置一些属性（在设计师属性编辑器中），比如设置两者直接的间距，设置距离上下左右的间距，设置比例等</li></ol><p><img src="/images/studynotes/desiger_layout.png" alt="desiger_layout"></p><ol start="3"><li>在没有布局或者有布局的时候。可以添加容器控件（<strong>QWidget，QFrame，QGroupBox，QScrollArea，QToolBox，QTabWidget，QStackedWidget，QMidArea，QDockWidget</strong>）这些容器可以放置子控件，从而循环嵌套。</li></ol><h2 id="例子"><a class="markdownIt-Anchor" href="#例子">#</a> 例子</h2><p>在 PyQt5.5 的时候自带了一个例子文件夹（后面的版本没有的话可以下载 PyQt5 源码，里面有个 examples 文件夹），想要熟练的掌握 PyQt 还需要从自带的例子中学习，必须要每个例子都运行一次然后看看这个例子实现了什么，这样才能记忆深刻。<br>同时很多开发者在<a href="https://github.com/PyQt5/PyQt"> https://github.com/PyQt5/PyQt</a> 分享了各类进阶例子，同时也欢迎大家共同完善该项目，提供更多更好的例子。另外也可以下载该项目的客户端<a href="https://github.com/PyQt5/PyQtClient/releases"> PyQtClient</a> 软件，支持运行其中的例子</p><p>建议在更深入的学习 PyQt 之前多看看一些例子。</p><h2 id="文档"><a class="markdownIt-Anchor" href="#文档">#</a> 文档</h2><p>接下来要说的就是 Qt 的 api 文档，<a href="https://doc.qt.io/qt-5/classes.html">官网文档</a>，这里其实不要害怕是英文就不想看，觉得看不懂了，其实官网的文档还是比较简洁的，而且函数名也比较直观就能知道意思。也可以用谷歌浏览器打开右键翻译，基本上都能看懂。笔者前期写过一篇<a href="/viewapi.html">如何查阅 Qt 文档</a>的文档可以阅读学习一番。</p><p>这里就拿<a href="https://doc.qt.io/qt-5/qwebengineview.html"> QWebEngineView</a> 举一个例子，首先初学者在使用这个浏览器控件时候，会有诸多的问题比如：Cookie，拦截器等就不知道如何去调用函数来设置</p><ol><li>首先打开官网文档 <a href="https://doc.qt.io/qt-5/qwebengineview.html">https://doc.qt.io/qt-5/qwebengineview.html</a>，可以看到只有少量的函数可以调用，寻找一番并没有发现和 Cookie 相关的东西，这个时候就需要把重点放在有特俗返回值的函数上，比如：</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QWebEngineHistory *          history() constQWebEnginePage *          page() constQWebEngineSettings *      settings() const<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三个函数返回了一个类实例，就意味着可以调用其中的方法。</p><ol start="2"><li><p>点击<strong> page ()<strong> 打开 <a href="https://doc.qt.io/qt-5/qwebenginepage.html">https://doc.qt.io/qt-5/qwebenginepage.html</a>，发现没有 cookie 相关的东西，只有</strong> QWebEngineProfile *profile () const</strong> 这个函数比较可疑。</p></li><li><p>点击 **profile ()** 打开 <a href="https://doc.qt.io/qt-5/qwebengineprofile.html">https://doc.qt.io/qt-5/qwebengineprofile.html</a>，在浏览器中搜索 <code>cookie</code>  发现这个类中包含大量和 cookie 相关的东西，比如：**QWebEngineCookieStore *cookieStore ()`** 从名字上可以猜测大概意思为 cookie 储存</p></li><li><p>点击 **cookieStore ()** 打开 <a href="https://doc.qt.io/qt-5/qwebenginecookiestore.html">https://doc.qt.io/qt-5/qwebenginecookiestore.html</a>，此时就会发现这个类里面包含了删除和设置 cookie 的方法。</p></li><li><p>但是找到了这些方法后，面对初学者又一个问题来了，该如何去用？根据上面 4 点整理一下，把他们当做简单的 Python 对象，方法和操作方法和 class 一样的。</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>webview <span class="token operator">=</span> QWebEngineView<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到page</span>page <span class="token operator">=</span> self<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到profile</span>profile <span class="token operator">=</span> page<span class="token punctuation">.</span>profile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 得到cookieStore</span>cookieStore <span class="token operator">=</span> profile<span class="token punctuation">.</span>cookieStore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空cookie</span>cookieStore<span class="token punctuation">.</span>deleteAllCookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 用简短代码来表达就是</span>cookieStore <span class="token operator">=</span> self<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cookieStore<span class="token punctuation">(</span><span class="token punctuation">)</span>cookieStore<span class="token punctuation">.</span>deleteAllCookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常调试"><a class="markdownIt-Anchor" href="#异常调试">#</a> 异常调试</h2><p>可能有时候由于粗心，或者调用了一些非法函数，参数错误等会导致程序出现一些异常，首先第一步复制最后一行的错误去百度或者谷歌搜索，大多时候能找到问题所在。其次如果搜索不到或者自己的异常可能是由于某个变量的值不对引起的，就需要在编辑器中打断点使用 DEBUG 模式调试变量值（如果不会可以采用麻烦一点的办法：用 <code>print</code>  打印出变量值）</p><p>遇到问题后首先需要自己多调试排查问题，不要一遇到问题就去问，自己多尝试一个一个排查直到找到问题所在并解决，这也是一种提高自身能力的地方。</p><h2 id="检索资料"><a class="markdownIt-Anchor" href="#检索资料">#</a> 检索资料</h2><p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。信息检索是每个程序猿必备的能力之一，其好处在于可以更快更准确的在茫茫网络海洋中找到自己所需要的东西，这个过程需要长期不断积累和练习。</p><ol><li>中文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt 拖拽</li><li>英文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt Drag Drop</li></ol><h2 id="片尾"><a class="markdownIt-Anchor" href="#片尾">#</a> 片尾</h2><p>好了，笔者基本上的学习过程就整理如上，这并不是说每个人都适合这样的方法，但至少笔者是这样一步一步走过来的。当你养成了一个学习、发现和解决问题的好习惯时就会慢慢得心应手。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学习 PyQt 的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习 PyQt 的方法，提高自身的学习能力。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://pyqt5.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>python 状态机模块 　</title>
    <link href="https://pyqt5.com/python_statemachine_625781186.html"/>
    <id>https://pyqt5.com/python_statemachine_625781186.html</id>
    <published>2019-07-17T09:03:33.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>用状态来取代 if…else 判断。</p><span id="more"></span><p>GUI 涉及到挺多的状态改变，以前一直用 if…else 来判断，最近读了设计模式，发现有个状态模式，随后发现了状态机这个东西 .</p><p>python 的状态机模块挺多的，不过好像很多都不更新了.<br> 推荐 2 个状态机模块，但是也没有太深入的使用经验，就跑跑例子，以后有更详细的 pyqt 例子再补上 .</p><p>1:  <code>pip install python-statemachine</code></p><p>官方例子 : <a href="https://github.com/fgmacedo/python-statemachine">https://github.com/fgmacedo/python-statemachine</a></p><p>2. <code>pip install state_machine</code></p><p>官方例子 : <a href="https://github.com/jtushman/state_machine">https://github.com/jtushman/state_machine</a></p><p>1 的 最近一次更新在 6 个月以前，使用 <code>类继承</code> 和 <code>mixin</code>  方式，不过有些地方不如 2 个人性化；</p><p>2 的设计更人性化一些，包括状态改变 <code>before</code>  和  <code>after</code>  , 不过由于是装饰器实现的动态增加属性，有些地方编辑器智能提示可能就靠不上了.</p><p>两者实现实现方式不一样，有兴趣可以读读源码 .</p><ol start="3"><li>qt 内置状态机框架</li></ol><p><a href="https://blog.csdn.net/amnes1a/article/details/62418196">https://blog.csdn.net/amnes1a/article/details/62418196</a></p><p><a href="https://blog.csdn.net/dongfenghuojian/article/details/78187131">https://blog.csdn.net/dongfenghuojian/article/details/78187131</a></p><p><a href="http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html">http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html</a> (系列教程)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用状态来取代 if…else 判断。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
    <category term="python 状态机" scheme="https://pyqt5.com/tags/python-%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>在pyqt中使用python全局钩子模块</title>
    <link href="https://pyqt5.com/pyqt5_hook_key_625781186.html"/>
    <id>https://pyqt5.com/pyqt5_hook_key_625781186.html</id>
    <published>2019-07-06T17:37:22.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>在某些时候需要为自己的软件增加全局键盘监听，比如软件最小化隐藏后可以通过热键唤醒，又或者比如像 QQ 一样可以全局热键截图。这里介绍几个方法实现在 PyQt 中使用 Python 全局钩子模块实现全局热键功能。</p><span id="more"></span><ol><li><code>pyHook3</code></li></ol><p>安装命令 :  <code>pip install pyhook3</code></p><p><a href="https://blog.csdn.net/q871063970/article/details/86648386">https://blog.csdn.net/q871063970/article/details/86648386</a></p><p>似乎将 pyhook 支持 py3 版本的了？没有太多研究.</p><p>缺点：只支持 win 平台.</p><p>2. <code>keyboard</code>  &amp;  <code>mouse</code></p><p>安装命令:  <code>pip install keyboard mouse</code></p><pre class="line-numbers language-none"><code class="language-none">from PyQt5 import  QtGui, QtWidgets, QtCorefrom PyQt5.QtCore import *from PyQt5.QtGui import *from PyQt5.QtWidgets import *import keyboardclass Window(QWidget):    def __init__(self, *args, **kwargs):        super(Window, self).__init__(*args, **kwargs)        layout &#x3D; QVBoxLayout(self)        self.testBtn &#x3D; QPushButton(self)        layout.addWidget(self.testBtn)        keyboard.add_hotkey(&#39;ctrl+shift+x&#39;, lambda:print(&#39;triggered&#39;, &#39;hotkey&#39;))        keyboard.add_hotkey(&#39;ctrl+shift+c&#39;, self.abc,args&#x3D;(&#39;aa&#39;,&quot;bb&quot;,&quot;cc&quot;))    def abc(self,a,b,c):        print(a,b,c)        if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    import sys    from PyQt5.QtWidgets import QApplication    app &#x3D; QApplication(sys.argv)    w &#x3D; Window()    w.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更详细例子 : <a href="https://github.com/PyQt5/PyQt/blob/63c6376358acb1863313fb5593097e6e0210cad6/Test/%E5%85%A8%E5%B1%80%E7%83%AD%E9%94%AE/HotKey.py">pyqt 中使用 keyboard 全局热键</a></p><p>优点：跨平台；</p><p>缺点：模块名字取得太差，不容易被发现.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在某些时候需要为自己的软件增加全局键盘监听，比如软件最小化隐藏后可以通过热键唤醒，又或者比如像 QQ 一样可以全局热键截图。这里介绍几个方法实现在 PyQt 中使用 Python 全局钩子模块实现全局热键功能。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
    <category term="pyqt hook key" scheme="https://pyqt5.com/tags/pyqt-hook-key/"/>
    
  </entry>
  
  <entry>
    <title>像读文章一样读源码</title>
    <link href="https://pyqt5.com/read_open_source.html"/>
    <id>https://pyqt5.com/read_open_source.html</id>
    <published>2019-07-06T17:37:22.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>使用 snoop, 像读文章一样读源码。</p><span id="more"></span><p>不得不说 开源项目没有一个提纲 ， 看起来太操蛋了。问了作者， 作者说 ， 你运行下主函数， 然后慢慢跟 。。。<br><img src="https://upload-images.jianshu.io/upload_images/10769157-b274b7acaecf49bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>没有目的地概览 ， 不知不觉就追究到细节里面去了。</p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-1304cc87fcd42cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>所以这一篇文章的目地就是 ， 如何在没有提纲的情况下 ， 能更好的只关注流程 ， 而不是细节 。</p><p>开始 ：</p><ol><li>python DEBUG 模块介绍 :<br>　前段时间看过挺多文章提到 pysoonper 这个调试模块，有兴趣的可以百度一下.<br> 个人尝试了一下，篇幅过大的 DEBUG 不适合用 pysoonper , 因为没有缩进！<br>　这几天偶然遇到一个二次封装的模块<a href="%5Bhttps://github.com/alexmojaki/snoop%5D(https://github.com/alexmojaki/snoop)"> snoop</a>, 完美地解决了这个问题.</li><li>操作步骤 :</li></ol><ul><li>1 .  在 <code>eric6.py</code>  的 <code>main()</code>  函数上加 snoop 装饰器；<br><img src="https://upload-images.jianshu.io/upload_images/10769157-74129f6a6c303b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li><li>2 . 用 vscode 打开  <code>eric6start_.log</code>   文件 (8 层深度 log 文件 34W 行，pycharm 对大文件支持很差);<br><img src="https://upload-images.jianshu.io/upload_images/10769157-ae946c117a082c24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="log文件"></li></ul><p>发现可以折叠 ， 但是最大可折叠等级只到 5 级 ， 而且无法对对应等级折叠 ， 有点遗憾 。也许是.log 格式选得不太好， 不知道是否有更好的后缀格式。</p><ul><li>3 . vscode 配置 log 文件关键字高亮；<br>安装高亮插件<br><img src="https://upload-images.jianshu.io/upload_images/10769157-8f6fee2356d7071d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br> 配置高亮关键字<br><img src="https://upload-images.jianshu.io/upload_images/10769157-a135fd015409b3da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>将 <code>call</code>  和 <code>return</code>  给加进去.</p><ul><li>4 . 增加阶段关键字；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/10769157-c39d01a02149e808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eric6启动阶段"></p><p><img src="https://upload-images.jianshu.io/upload_images/10769157-aef5704c36824dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>加 <code>#000</code>  是为了方便搜索 。<br>需要自己手动折叠 。<br>可以发现 每个 <code>splash.showMessage()</code>  都是一个阶段 ， 展开折叠之后就是每个阶段具体执行细节 。</p><hr><h3 id="ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢"><a class="markdownIt-Anchor" href="#ps-vscode-阅读log文件还是有一些不方便的地方-除了在2中提到的-还有包括关闭文件再打开-折叠状态不会保留-有其他更好的方式-请留言告诉我-谢谢">#</a> ps: vscode 阅读 log 文件还是有一些不方便的地方，除了在 2. 中提到的，还有包括关闭文件再打开，折叠状态不会保留，有其他更好的方式 请留言告诉我，谢谢.</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 snoop, 像读文章一样读源码。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
    <category term="debug" scheme="https://pyqt5.com/tags/debug/"/>
    
    <category term="snoop" scheme="https://pyqt5.com/tags/snoop/"/>
    
  </entry>
  
  <entry>
    <title>python 获取子进程print信息 　</title>
    <link href="https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html"/>
    <id>https://pyqt5.com/pyqt_get_subprocess_pipeline_625781186.html</id>
    <published>2019-05-24T06:39:44.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。</p><span id="more"></span><p>问题所在：</p><p><img src="https://i.loli.net/2019/05/24/5ce793171984f27031.png" alt="image.png"></p><p>如果模块都由自己开发， 正常操作</p><p><img src="https://i.loli.net/2019/05/24/5ce7933994a0090037.png" alt="image.png"></p><p>但是因为不能改，所以只能拦截：<br>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pythonPath <span class="token operator">=</span> self<span class="token punctuation">.</span>pythonPath_cb<span class="token punctuation">.</span>currentText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> suffix <span class="token operator">==</span> <span class="token string">"py"</span><span class="token punctuation">:</span>    <span class="token comment"># 首次</span>    self<span class="token punctuation">.</span>pyCommand <span class="token operator">=</span> <span class="token punctuation">[</span>pythonPath<span class="token punctuation">,</span> path<span class="token punctuation">]</span>    self<span class="token punctuation">.</span>modifiedReloadPython<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modifiedReloadPython</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path_<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>path_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 子进程调用</span>    self<span class="token punctuation">.</span>p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pyCommand<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>    <span class="token comment"># self.stdoutWorker.p = self.p</span>    self<span class="token punctuation">.</span>stdoutWorker <span class="token operator">=</span> Worker<span class="token punctuation">(</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>stdoutWorker<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>error_te<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"PYDEBUG:\n"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>stdoutWorker<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_signal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p <span class="token operator">=</span> p    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            QApplication<span class="token punctuation">.</span>processEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>p <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> self<span class="token punctuation">.</span>p<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># line = line.strip()</span>                <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">b''</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        info <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>info<span class="token punctuation">)</span>                    <span class="token keyword">except</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>stdout_signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 PyQt 中使用子线程读取子进程 Python 脚本的 print 输出流内容。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
    <category term="subprocess.Popen" scheme="https://pyqt5.com/tags/subprocess-Popen/"/>
    
    <category term="拦截print" scheme="https://pyqt5.com/tags/%E6%8B%A6%E6%88%AAprint/"/>
    
  </entry>
  
  <entry>
    <title>QtWebkit和QWebEngineView与Javascript交互</title>
    <link href="https://pyqt5.com/qtwebjs.html"/>
    <id>https://pyqt5.com/qtwebjs.html</id>
    <published>2019-05-22T03:30:36.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>以前还是 <code>QWebView</code>  的时候和 <code>Javascript</code>  交互起来很方便，但是到了 Qt5.6 以后改用了 <code>QWebEngineView</code> ，并通过其提供的 <code>qwebchannel.js</code>  来进行交互。可能是由于刚出来的原因，这玩意儿有个 bug 就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对 <code>QWebView</code>  和 <code>QWebEngineView</code>  与 Js 交互都做了一个示例。</p><span id="more"></span><h2 id="说明"><a class="markdownIt-Anchor" href="#说明">#</a> 说明</h2><ol><li>针对 <code>QWebView</code>  通过 <code>QWebFrame</code>  的 <code>addToJavaScriptWindowObject</code>  把对象传递到 <code>Javascript</code>  中</li><li>针对 <code>QWebEngineView</code>  通过 <code>QWebChannel.registerObject('Bridge', QObject)</code>  把对象传递到 <code>Javascript</code>  中</li><li>可以通过 <code>@pyqtSlot</code>  装饰器来申明该方法可以暴露给 <code>Javascript</code>  调用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>针对 <code>QWebView</code>  在 <code>Javascript</code>  中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）</span>Bridge<span class="token punctuation">.</span>windowTitleChanged<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"标题被修改为："</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定自定义的信号customSignal</span>Bridge<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"收到自定义信号内容："</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>针对 <code>QWebEngineView</code>  在 <code>Javascript</code>  中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">QWebChannel</span><span class="token punctuation">(</span>qt<span class="token punctuation">.</span>webChannelTransport<span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">channel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>Bridge <span class="token operator">=</span> channel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>Bridge<span class="token punctuation">;</span>                <span class="token comment">// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）</span>        Bridge<span class="token punctuation">.</span>windowTitleChanged<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"标题被修改为："</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 绑定自定义的信号customSignal</span>        Bridge<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">showLog</span><span class="token punctuation">(</span><span class="token string">"收到自定义信号内容："</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><code>QWebView</code> ： <a href="https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py">https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py</a></p><p><code>QWebEngineView</code> ： <a href="https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py">https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py</a></p><ol><li>针对 <code>QWebView</code>  的核心实现</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span>QWebView<span class="token punctuation">)</span><span class="token punctuation">:</span>    customSignal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>WebView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initSettings<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 暴露接口对象</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>javaScriptWindowObjectCleared<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_exposeInterface<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_exposeInterface</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向Js暴露调用本地方法接口        """</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addToJavaScriptWindowObject<span class="token punctuation">(</span><span class="token string">'Bridge'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>    <span class="token comment"># 注意pyqtSlot用于把该函数暴露给js可以调用</span>    <span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sendCustomSignal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 发送自定义信号</span>        self<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'当前时间: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>针对 <code>QWebEngineView</code>  的核心实现</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WebEngineView</span><span class="token punctuation">(</span>QWebEngineView<span class="token punctuation">)</span><span class="token punctuation">:</span>    customSignal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>WebEngineView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> QWebChannel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment"># 把自身对象传递进去</span>        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>registerObject<span class="token punctuation">(</span><span class="token string">'Bridge'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token comment"># 设置交互接口</span>        self<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setWebChannel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>channel<span class="token punctuation">)</span>    <span class="token comment"># 注意pyqtSlot用于把该函数暴露给js可以调用</span>    <span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callFromJs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"来自js调用：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sendCustomSignal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 发送自定义信号</span>        self<span class="token punctuation">.</span>customSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'当前时间: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QWebEngineView/ScreenShot/JsSignals.gif" alt="JsSignals"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前还是 &lt;code&gt;QWebView&lt;/code&gt;  的时候和 &lt;code&gt;Javascript&lt;/code&gt;  交互起来很方便，但是到了 Qt5.6 以后改用了 &lt;code&gt;QWebEngineView&lt;/code&gt; ，并通过其提供的 &lt;code&gt;qwebchannel.js&lt;/code&gt;  来进行交互。可能是由于刚出来的原因，这玩意儿有个 bug 就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对 &lt;code&gt;QWebView&lt;/code&gt;  和 &lt;code&gt;QWebEngineView&lt;/code&gt;  与 Js 交互都做了一个示例。&lt;/p&gt;</summary>
    
    
    
    <category term="例子" scheme="https://pyqt5.com/categories/%E4%BE%8B%E5%AD%90/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="QWebView" scheme="https://pyqt5.com/tags/QWebView/"/>
    
    <category term="QWebEngineView" scheme="https://pyqt5.com/tags/QWebEngineView/"/>
    
    <category term="浏览器" scheme="https://pyqt5.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5窗口翻转动画</title>
    <link href="https://pyqt5.com/flipwidgetanimation.html"/>
    <id>https://pyqt5.com/flipwidgetanimation.html</id>
    <published>2019-05-15T14:48:00.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>QQ 的界面一直是用来模仿练习做界面的好东西，这里就有一个类似 QQ 登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了 <code>QStackedWidget</code>  包含两个控件做切换，同时单独使用一个窗口做动画绘制。</p><span id="more"></span><h2 id="原理说明"><a class="markdownIt-Anchor" href="#原理说明">#</a> 原理说明</h2><ol><li>用了两个 <code>QLabel</code>  来显示模拟的图片界面，并实现鼠标点击模拟真实的窗口对应位置点击</li><li>用了 <code>QStackedWidget</code>  来存放上面的两个界面 <code>QLabel</code></li><li>点击切换时主要是对上面的两个界面进行截图并传递给翻转动画窗口</li><li>通过 <code>setWindowOpacity</code>  控制主窗口的显示隐藏（保留任务栏），当然也可以用 <code>hide</code></li><li>动画窗口 <code>FlipWidget.py</code>  主要实现两张图片的翻转显示，考虑到 0-90 和 90-180 之前的情况，以及图片的缩放动画</li></ol><h2 id="核心实现"><a class="markdownIt-Anchor" href="#核心实现">#</a> 核心实现</h2><ol><li>主要是在 <code>paintEvent</code>  方法中使用 <code>QTransform</code>  对 <code>QPainter</code>  进行圆心变换以及 <code>rotate</code>  设置翻转角度</li><li>同时根据翻转的角度范围对图片进行切换和缩放</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>FlipWidget<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>paintEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'image1'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'image2'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>isVisible<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>Antialiasing<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        painter<span class="token punctuation">.</span>setRenderHint<span class="token punctuation">(</span>QPainter<span class="token punctuation">.</span>SmoothPixmapTransform<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 变换</span>        transform <span class="token operator">=</span> QTransform<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 把圆心设置为矩形中心</span>        transform<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_angle <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>_angle <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token comment"># 当翻转角度在90范围内显示第一张图，且从大图缩放到小图的过程</span>            painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 设置翻转角度</span>            transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_angle<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>YAxis<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setTransform<span class="token punctuation">(</span>transform<span class="token punctuation">)</span>            <span class="token comment"># 缩放图片高度</span>            width <span class="token operator">=</span> self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>                         <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_angle <span class="token operator">/</span> self<span class="token punctuation">.</span>Scale<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            image <span class="token operator">=</span> self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>image1<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span>                Qt<span class="token punctuation">.</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>                QPointF<span class="token punctuation">(</span><span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 当翻转角度在90范围内显示第二张图，且从小图缩放到原图的过程</span>            painter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_angle <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                angle <span class="token operator">=</span> <span class="token number">180</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_angle            <span class="token keyword">else</span><span class="token punctuation">:</span>                angle <span class="token operator">=</span> self<span class="token punctuation">.</span>_angle <span class="token operator">-</span> <span class="token number">180</span>            <span class="token comment"># 设置翻转角度， 注意这里角度有差异</span>            transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>angle<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>YAxis<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>setTransform<span class="token punctuation">(</span>transform<span class="token punctuation">)</span>            <span class="token comment"># 缩放图片高度</span>            width <span class="token operator">=</span> self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>                         <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>Scale <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            image <span class="token operator">=</span> self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>scaled<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>image2<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span>                Qt<span class="token punctuation">.</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SmoothTransformation<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>                QPointF<span class="token punctuation">(</span><span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>            painter<span class="token punctuation">.</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py">https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py</a></p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/QPropertyAnimation/ScreenShot/FlipWidgetAnimation.gif" alt="FlipWidgetAnimation"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;QQ 的界面一直是用来模仿练习做界面的好东西，这里就有一个类似 QQ 登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了 &lt;code&gt;QStackedWidget&lt;/code&gt;  包含两个控件做切换，同时单独使用一个窗口做动画绘制。&lt;/p&gt;</summary>
    
    
    
    <category term="例子" scheme="https://pyqt5.com/categories/%E4%BE%8B%E5%AD%90/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="动画" scheme="https://pyqt5.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="翻转" scheme="https://pyqt5.com/tags/%E7%BF%BB%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>PyQt属性动画(QPropertyAnimation)</title>
    <link href="https://pyqt5.com/QPropertyAnimation.html"/>
    <id>https://pyqt5.com/QPropertyAnimation.html</id>
    <published>2019-05-08T07:43:06.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p><code>QPropertyAnimation</code>  继承自 <code>QVariantAnimation</code> ，其作为 Qt 的属性动画用于针对控件的属性或者继承自 <code>QObject</code>  的对象中定义的属性做修改，<br>简单来说就是基类是 <code>QObject</code>  且定义了属性变量，就可以用 <code>QPropertyAnimation</code>  来做属性动画。同时也可以通过 <code>pyqtProperty</code>  来增加自定义属性。</p><span id="more"></span><p>首先，通过构造函数 <code>QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)</code>  创建一个对象，其中</p><ol><li>第一个参数是动画作用的对象，也可以通过 <code>setTargetObject</code>  设置</li><li>第二个参数是属性名，在 py3 中类型是 bytes，也可以通过 <code>setPropertyName</code>  设置</li></ol><h2 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> 函数</h2><p>一些常见的设置函数</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">setPropertyName</td><td style="text-align:left">设置属性名</td></tr><tr><td style="text-align:left">setTargetObject</td><td style="text-align:left">设置动画作用对象</td></tr><tr><td style="text-align:left">setDuration</td><td style="text-align:left">设置动画持续时间（毫秒）</td></tr><tr><td style="text-align:left">setStartValue</td><td style="text-align:left">设置开始值</td></tr><tr><td style="text-align:left">setEndValue</td><td style="text-align:left">设置结束值</td></tr><tr><td style="text-align:left">setEasingCurve</td><td style="text-align:left">设置动画曲线</td></tr><tr><td style="text-align:left">setKeyValueAt</td><td style="text-align:left">插入线性值</td></tr><tr><td style="text-align:left">setLoopCount</td><td style="text-align:left">设置循环次数（-1 为永久）</td></tr></tbody></table><h2 id="示例"><a class="markdownIt-Anchor" href="#示例">#</a> 示例</h2><p>比如这个例子：</p><ol><li>修改控件的 <code>geometry</code>  大小</li><li>修改自定义属性</li><li>修改进度条的 value 值</li></ol><p><img src="/images/QPropertyAnimation.gif" alt="QPropertyAnimation"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年5月8日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: @description: """</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QPropertyAnimation<span class="token punctuation">,</span> QRect<span class="token punctuation">,</span> pyqtProperty<span class="token punctuation">,</span> QEasingCurve<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span>\    QLabel<span class="token punctuation">,</span> QProgressBar<span class="token punctuation">,</span> QSpacerItem<span class="token punctuation">,</span> QSizePolicy__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'属性动画测试'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doStart<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonc <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'自定义属性 测试'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonc<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doStartCustom<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>progressbar <span class="token operator">=</span> QProgressBar<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>QSpacerItem<span class="token punctuation">(</span>            <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> QSizePolicy<span class="token punctuation">.</span>Fixed<span class="token punctuation">,</span> QSizePolicy<span class="token punctuation">.</span>Fixed<span class="token punctuation">)</span><span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonc<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>progressbar<span class="token punctuation">)</span>        <span class="token comment"># 进度条动画</span>        self<span class="token punctuation">.</span>progressStart<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 此处是自定义属性，并通过动画修改后，设置QLabel的值</span>    <span class="token decorator annotation punctuation">@pyqtProperty</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value    <span class="token decorator annotation punctuation">@value<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> v        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'当前值：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">doStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 第一个参数是要执行的对象</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">,</span> <span class="token string">b'geometry'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        <span class="token comment"># 缓和曲线风格,加了曲线动画会很大程度影响</span>        animation<span class="token punctuation">.</span>setEasingCurve<span class="token punctuation">(</span>QEasingCurve<span class="token punctuation">.</span>OutBounce<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span>QRect<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">doStartCustom</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 自定义属性动画</span>        <span class="token comment"># 由于定义的属性是在继承的QWidget, 所以第一个参数是self</span>        <span class="token comment"># 第二个参数就是 value</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">b'value'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        animation<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setEndValue<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">progressStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 进度条动画</span>        <span class="token comment"># 这里 value是QProgressBar自带的属性，具体可以看文档</span>        <span class="token comment"># https://doc.qt.io/qt-5/qprogressbar.html#properties</span>        animation <span class="token operator">=</span> QPropertyAnimation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>progressbar<span class="token punctuation">,</span> <span class="token string">b'value'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setDuration<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 持续时间</span>        animation<span class="token punctuation">.</span>setLoopCount<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 这里采用插入线性值,第一个参数的范围是（0-1）</span>        <span class="token comment"># 第二个参数的范围是进度（最小值-最大值）</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>setKeyValueAt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>progressbar<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        animation<span class="token punctuation">.</span>start<span class="token punctuation">(</span>animation<span class="token punctuation">.</span>DeleteWhenStopped<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;QPropertyAnimation&lt;/code&gt;  继承自 &lt;code&gt;QVariantAnimation&lt;/code&gt; ，其作为 Qt 的属性动画用于针对控件的属性或者继承自 &lt;code&gt;QObject&lt;/code&gt;  的对象中定义的属性做修改，&lt;br&gt;
简单来说就是基类是 &lt;code&gt;QObject&lt;/code&gt;  且定义了属性变量，就可以用 &lt;code&gt;QPropertyAnimation&lt;/code&gt;  来做属性动画。同时也可以通过 &lt;code&gt;pyqtProperty&lt;/code&gt;  来增加自定义属性。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://pyqt5.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="动画" scheme="https://pyqt5.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何查阅Qt文档</title>
    <link href="https://pyqt5.com/viewapi.html"/>
    <id>https://pyqt5.com/viewapi.html</id>
    <published>2019-05-04T12:50:20.000Z</published>
    <updated>2024-04-30T01:46:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>很多网友在问有没有 PyQt5 的文档之类的问题，在 PyQt4 的时候 PyQt 官网有了英文版的文档，随后有网友翻译成了中文。不过现在 PyQt5 官方的文档都指向了 C<ins> 的 Qt 文档，其实 C</ins> 的 Qt API 文档结构很清晰，翻阅很容易的，需要注意几点。</p><span id="more"></span><p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。</p><p>拿 Qt C++ 文档来说，官网地址是：<a href="https://doc.qt.io/qt-5/qtwidgets-module.html">https://doc.qt.io/qt-5/qtwidgets-module.html</a> 这里面记录了所有控件的详细函数文档。</p><p>比如拿 输入框  <code>QLineEdit</code>  来说，怎么去查询它的用法和信号槽等资料？</p><p><a href="https://doc.qt.io/qt-5/qlineedit.html">https://doc.qt.io/qt-5/qlineedit.html</a></p><h2 id="左侧目录"><a class="markdownIt-Anchor" href="#左侧目录">#</a> 左侧目录</h2><p>在文档左侧目录中有如下几个：</p><p>Properties - 控件里的属性（比如宽高等，通常需要当作函数调用）</p><p>Public Slots - 这个是控件自己的槽函数（当作普通函数就行）</p><p>Signals - 这个是输入框的包含的信号</p><p>Public Functions、Reimplemented Public Functions、Static Public Members、Protected Functions、Reimplemented Protected Functions - 这几个都是函数列表</p><p><img src="/images/howtoviewapi1.png" alt="howtoviewapi1"></p><h2 id="类说明"><a class="markdownIt-Anchor" href="#类说明">#</a> 类说明</h2><p><img src="/images/howtoviewapi2.png" alt="howtoviewapi2"></p><p>这里有两个注意点</p><ol><li>红色方框内的表示该控件（输入框）继承于 <code>QWidget</code> ，所以该控件（输入框）拥有父类的所有方法和信号，当当前文档找不到相关资料和函数时，可以去父类找找看。</li><li>紫色方框内表示列举所有的方法（包括父类）</li></ol><h2 id="函数列表"><a class="markdownIt-Anchor" href="#函数列表">#</a> 函数列表</h2><p><img src="/images/howtoviewapi3.png" alt="howtoviewapi3"></p><p>这里列举的就是该控件（输入框）的函数，同理点击上面的紫色方框是查看所有方法，一般这里主要用来查询你需要的功能函数，Qt 的函数名比较容易理解，比如：只读 ReadOnly，选择文字：setSelection。</p><p>所以再查下这部分资料的时候建议在浏览器中 Ctrl + F 打开浏览器的搜索框，并输入英文关键词来检索你所需要的函数在哪里。</p><p><img src="/images/howtoviewapi8.png" alt="howtoviewapi8"></p><h2 id="槽函数"><a class="markdownIt-Anchor" href="#槽函数">#</a> 槽函数</h2><p><img src="/images/howtoviewapi4.png" alt="howtoviewapi4"></p><p>这部分列举的是槽函数，其实在 PyQt 中槽函数可以当作普通的函数。普通的函数也可以作为槽函数，直接通过信号连接即可，注意方框所示，还有很多函数是在父类里面。</p><h2 id="信号"><a class="markdownIt-Anchor" href="#信号">#</a> 信号</h2><p><img src="/images/howtoviewapi5.png" alt="howtoviewapi5"></p><p>这部分列举了该控件（输入框）所定义的信号，主要还是看名字，大多都能知道是做什么的，比如：</p><ol><li>editingFinished - 编辑完成信号</li><li>returnPressed - 回车键信号</li><li>textChanged (const QString &amp;text) - 内容改变信号</li></ol><p>这里还有个问题就是参数问题，一般 &amp; 后面的 text 作为参数传递到槽函数中</p><h2 id="函数详细说明"><a class="markdownIt-Anchor" href="#函数详细说明">#</a> 函数详细说明</h2><p>当不明确这个函数是做什么的，可以点击该函数跳转到下面的说明，比如回车键信号 <code>returnPressed</code></p><p><img src="/images/howtoviewapi6.png" alt="howtoviewapi6"></p><p>如图上所示，用翻译插件翻译，大部分就明白了，如下：</p><p><img src="/images/howtoviewapi7.png" alt="howtoviewapi7"></p><h2 id="关于如何搜索资料"><a class="markdownIt-Anchor" href="#关于如何搜索资料">#</a> 关于如何搜索资料</h2><p>比如当你要搜索输入框内容改变事件，一般建议两种搜索，且搜索的时候用空格把关键词分开搜索，而且直接用控件名</p><ol><li>中文搜索引擎：QLineEdit 内容 改变</li><li>英文搜索引擎：QLineEdit text change</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多网友在问有没有 PyQt5 的文档之类的问题，在 PyQt4 的时候 PyQt 官网有了英文版的文档，随后有网友翻译成了中文。不过现在 PyQt5 官方的文档都指向了 C&lt;ins&gt; 的 Qt 文档，其实 C&lt;/ins&gt; 的 Qt API 文档结构很清晰，翻阅很容易的，需要注意几点。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://pyqt5.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>推荐编辑器LiClipse</title>
    <link href="https://pyqt5.com/suggesteditor.html"/>
    <id>https://pyqt5.com/suggesteditor.html</id>
    <published>2019-05-04T10:04:08.000Z</published>
    <updated>2024-04-30T01:46:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Python 的开发编辑器有很多，每个人有每个人的喜好，经常看到很多在问什么编辑器好用，有人推荐 Sublime，有人推荐 Pycharm 等等，这里就不去比较其它编辑器的优缺点了，只谈谈关于 LiClipse 这个编辑器在初级使用阶段的智能提示功能等。开箱即用，支持多种语言，RST，Markdown 和 HTML 编辑器的 HTML 预览。</p><span id="more"></span><p>其实 LiClipse 这个编辑器就是以前的 PyDev 插件的独立版本，基于 Eclipse 编辑器开发，去掉了 Java 的相关开发功能，关于软件的详细说明可以去官网查看： <a href="http://www.liclipse.com/">http://www.liclipse.com/</a></p><p>编辑器只需要少量的配置，打开即可使用，快速自动 import，也可以根据需要安装自己所需的插件，比如 json、svn、主题插件等。个人推荐：适合刚入门的新手使用</p><p>由于新版的 PyQt 和 PyDev 去掉了详细的函数提示，所以 PyQt 的智能提示只有函数和返回值，并没有英文注释，但是以前的比如 PyQt4 的智能提示应该是有详细的英文注释提示。</p><h2 id="界面预览"><a class="markdownIt-Anchor" href="#界面预览">#</a> 界面预览</h2><ol><li>主界面<br><img src="/images/editor1.png" alt="editor1"></li><li>鼠标悬停提示<br><img src="/images/editor2.png" alt="editor2"></li><li>输入提示<br><img src="/images/editor3.png" alt="editor3"></li><li>Git 面板<br><img src="/images/editor4.png" alt="editor4"></li><li>全局搜索（Ctrl + H）<br><img src="/images/editor5.png" alt="editor5"><br><img src="/images/editor6.png" alt="editor6"></li></ol><h2 id="自动导包"><a class="markdownIt-Anchor" href="#自动导包">#</a> 自动导包</h2><p>其实这个功能我是非常喜欢的，通过按下快捷键即可自动寻找包名导入，快捷键 Ctrl + Shift + O</p><p><img src="/images/editor_import.png" alt="editor_import"></p><p>也可以在标红的代码上按下 Ctrl + F1 进行导入</p><p><img src="/images/editor_import2.png" alt="editor_import2"></p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置">#</a> 配置</h2><p>打开编辑器后首先要配置【Window -&gt; Preferences】的就是 Python 的环境变量，可以同时添加多个 Python 版本</p><p><img src="/images/editor_env.png" alt="editor_env"></p><h2 id="tab等设置"><a class="markdownIt-Anchor" href="#tab等设置">#</a> Tab 等设置</h2><ol><li>Insert spaces for tabs        tab 转空格</li><li>Show line numbers             显示行号</li></ol><p><img src="/images/editor_tab.png" alt="editor_tab"></p><h2 id="模版"><a class="markdownIt-Anchor" href="#模版">#</a> 模版</h2><p>这个功能可以快速插入自己定义好的模版代码，比如  <code>if __name__ == '__main__':</code>  等等，比如我这里配置的创建文件的模版</p><p><img src="/images/editor_tpl.png" alt="editor_tpl"></p><h2 id="常用快捷键"><a class="markdownIt-Anchor" href="#常用快捷键">#</a> 常用快捷键</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">格式化对齐</td><td style="text-align:center">Ctrl + Shift + F</td></tr><tr><td style="text-align:center">自动导包</td><td style="text-align:center">Ctrl + Shift + O</td></tr><tr><td style="text-align:center">快捷提示</td><td style="text-align:center">Alt + /</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于 Python 的开发编辑器有很多，每个人有每个人的喜好，经常看到很多在问什么编辑器好用，有人推荐 Sublime，有人推荐 Pycharm 等等，这里就不去比较其它编辑器的优缺点了，只谈谈关于 LiClipse 这个编辑器在初级使用阶段的智能提示功能等。开箱即用，支持多种语言，RST，Markdown 和 HTML 编辑器的 HTML 预览。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="编辑器" scheme="https://pyqt5.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>三种方式绑定信号槽</title>
    <link href="https://pyqt5.com/bindsignals.html"/>
    <id>https://pyqt5.com/bindsignals.html</id>
    <published>2019-05-04T08:07:06.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于 PyQt5 的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在 PyQt5 中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>这几种方式各有各的优点和缺点。</p><span id="more"></span><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一">#</a> 方式一</h2><p>这个方式是最开始接触设计师的时候知道的，主要是通过控件的 <code>objectName</code>  和 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  提供的连接函数来自动完成注册，<br>比如带有按钮的界面 ui 文件转成 py 文件后会发现如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token comment"># 通过这里自动完成连接信号槽</span>QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时只需要继承该 UI 文件类然后增加如下方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pyqtSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'button clicked'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里解释一下， <code>@pyqtSlot()</code>  装饰器把函数 <code>on_pushButton_clicked</code>  包装为一个槽函数，<br>而 <code>QtCore.QMetaObject.connectSlotsByName(Form)</code>  这句代码的意思就是自动去寻找满足的槽函数</p><p><font color=red>注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足 <code>on_控件的objectName_控件的信号</code> 这样下划线连接起来的函数名才能被识别，<br>比如按钮的点击： <code>on_pushButton_clicked</code> 、勾选框的选中： <code>on_checkbox_toggled(self, checked)</code></p><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二">#</a> 方式二</h2><p>这种方式则直接通过代码里调用控件的信号的 <code>connect</code>  方法来进行绑定，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按钮点击函数</span><span class="token keyword">def</span> <span class="token function">doClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token comment"># 绑定点击信号</span>self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>doClicked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=red>注意： <code>connect</code>  的是函数名字</font>， <code>self.sender()</code>  这句代码是获取信号发送者（比如这里就是得到这个按钮对象），<br>用处在于有时候要循环创建一堆按钮</p><h2 id="方式三"><a class="markdownIt-Anchor" href="#方式三">#</a> 方式三</h2><p>通过参数这种方式其实比较特殊，在 PyQt 中大部分存在，但是在 PySide 中则很少，原因是两者的封装方式不同。</p><p>同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按钮点击函数</span><span class="token keyword">def</span> <span class="token function">doClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'按钮'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>doClicked<span class="token punctuation">,</span> minimumHeight<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以通过参数（信号名字） = 函数来绑定信号</p><p>同时也可以设置其它参数，比如<br> <code>button.setMinimumHeight(40)</code>  也可以像参数里那样设置 <code>minimumHeight=40</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网上关于 PyQt5 的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在 PyQt5 中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，&lt;br&gt;
这几种方式各有各的优点和缺点。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="信号" scheme="https://pyqt5.com/tags/%E4%BF%A1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>python 拷贝虚拟环境(一) 　</title>
    <link href="https://pyqt5.com/virtualenvpy_625781186.html"/>
    <id>https://pyqt5.com/virtualenvpy_625781186.html</id>
    <published>2019-05-02T07:21:01.000Z</published>
    <updated>2024-04-30T01:46:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>通常来说，刚开始使用 python 的时候都是把包装到全局路径，随着各个项目安装的包越来越多，之后每开始一个项目，pycharm 创建索引的时间都越来越漫长，所以不可避免得开始使用虚拟环境。<br>经过一番了解 ，虚拟环境的优点有这些：</p><ul><li>改善 pycharm 索引时间；</li><li>各个项目的库不会冲突；</li><li>理论上虚拟环境可以给同版本的操作系统使用 (未试验过);</li><li>pip freeze &gt; requestment.txt 导出的依赖清晰；</li><li>各个版本的 python 共存；</li><li>…</li></ul><span id="more"></span><p>python 虚拟环境库除了自带的 venv , 还有三方库 <code>virtualenv</code>  , 此外 在 <code>virtualenv</code>  基础上又开发了 <code>virtualenvwrapper(virtualenvwrapper_win)</code>  来管理</p><p>本文基于 <code>virtualenvwrapper</code>  创建的虚拟环境来讲解.</p><pre><code>以下是收集的一些virtualenvwrapper配置教程:# linux平台https://www.cnblogs.com/netfoxman/p/5994697.html# window平台https://blog.csdn.net/shaququ/article/details/54292043  　https://blog.csdn.net/iaau0908/article/details/54021518</code></pre><p>虚拟环境创建多了我们就会发现，<br> 有时候使用相同版本的环境，一些常用的库是需要重新安装的，<br> 那么能不能创建一个基础环境，默认拥有这些库，然后在这个基础环境上继续安装三方库呢？</p><p>本文经过试验发现是可行的:</p><ol><li><p>创建基础虚拟环境  <code>mkvirtualenv &lt;环境名称&gt; [-p空格python其他版本的解释器路径]</code> .  例如  <code>mkvirtualenv py34 -p c:\Python34\python.exe</code></p></li><li><p>切换到虚拟环境 <code>workon py34</code>  , 然后安装一下三方库，然后复制 <code>py34</code>  这个文件夹备份一下；</p></li><li><p>接着复制这个 <code>py34</code>  文件夹，把复制后的文件夹改名为我们需要需要的文件夹例如 <code>new34</code></p></li><li><p>进入 <code>new34文件夹</code> ，用任意编辑器全路径搜索 <code>py34</code>  (替换虚拟环境的路径)</p></li><li><p>删除 <code>new34/Scripts</code>  下的 <code>pip.exe, pip3.exe, pip3.x.exe, easy_install.exe</code>  (因为安装路径硬编码到这里面了，改不了，需要重新安装)</p></li><li><p><a href="https://blog.csdn.net/douniwan007009/article/details/81463958">https://blog.csdn.net/douniwan007009/article/details/81463958</a> 按方式二，源码安装  <code>setuptools</code>  后再用 <code>easy_install pip</code>  安装 pip 后，完成；<br> 如果有问题，就继续按照方式一的源码安装 pip;</p></li><li><p>在 <code>new34</code>  环境下 用 <code>pip show 三方库</code>  来看一些库的位置，确保正确.</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常来说，刚开始使用 python 的时候都是把包装到全局路径，随着各个项目安装的包越来越多，之后每开始一个项目，pycharm 创建索引的时间都越来越漫长，所以不可避免得开始使用虚拟环境。&lt;br&gt;
经过一番了解 ，虚拟环境的优点有这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改善 pycharm 索引时间；&lt;/li&gt;
&lt;li&gt;各个项目的库不会冲突；&lt;/li&gt;
&lt;li&gt;理论上虚拟环境可以给同版本的操作系统使用 (未试验过);&lt;/li&gt;
&lt;li&gt;pip freeze &amp;gt; requestment.txt 导出的依赖清晰；&lt;/li&gt;
&lt;li&gt;各个版本的 python 共存；&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://pyqt5.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://pyqt5.com/tags/Python/"/>
    
    <category term="virtualenvwrapper" scheme="https://pyqt5.com/tags/virtualenvwrapper/"/>
    
    <category term="virtualenv" scheme="https://pyqt5.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>QRunnable线程池发信号</title>
    <link href="https://pyqt5.com/runnablesignal_625781186.html"/>
    <id>https://pyqt5.com/runnablesignal_625781186.html</id>
    <published>2019-04-30T07:58:09.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>因为只有继承 <code>QObject</code>  的类才能有信号和自定义信号，而 <code>QRunnable</code>  并不是继承自 <code>QObject</code> ，也不能用多继承的方式，这里考虑定义个全局的 QObject 变量用来存放一些定义好的可复用的信号。</p><span id="more"></span><p>pools 是  <code>QThreadPool</code>  实例</p><h2 id="看图说话"><a class="markdownIt-Anchor" href="#看图说话">#</a> 看图说话</h2><ol><li><img src="/images/runnablesignal1.png" alt="runnablesignal1"></li><li>定义一个全局信号类<br><img src="/images/runnablesignal2.png" alt="runnablesignal2"></li><li>在 QRunnable 中发送<br><img src="/images/runnablesignal3.png" alt="runnablesignal3"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为只有继承 &lt;code&gt;QObject&lt;/code&gt;  的类才能有信号和自定义信号，而 &lt;code&gt;QRunnable&lt;/code&gt;  并不是继承自 &lt;code&gt;QObject&lt;/code&gt; ，也不能用多继承的方式，这里考虑定义个全局的 QObject 变量用来存放一些定义好的可复用的信号。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="信号" scheme="https://pyqt5.com/tags/%E4%BF%A1%E5%8F%B7/"/>
    
    <category term="线程" scheme="https://pyqt5.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何和设计师中查看ui转换的py代码</title>
    <link href="https://pyqt5.com/viewpyindesigner_625781186.html"/>
    <id>https://pyqt5.com/viewpyindesigner_625781186.html</id>
    <published>2019-04-30T05:11:09.000Z</published>
    <updated>2024-04-30T01:46:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>通过 设计师  查看 ui 转换的 py 代码</p><p>当初我刚学 pyqt 的时候，也有很多疑惑，用什么属性把控件加到布局，改了这个属性会发生什么，为什么这个会这样，那个会那样 。。。 。。。</p><p>后来就看 ui 转成的 py 代码，注释一下，什么效果消失了，就是那个 api 引起的 。</p><span id="more"></span><p>再来后发现了官方文档，查一查函数就行了 .</p><p>但是有些 api 文档找起来麻烦，用设计师点几下就行了，然后把转换出来的代码拷贝一下就完事了.</p><p>可是需要单独把 ui 转为 py 文件，之后再删除这个文件也是很烦的一件事 .</p><p>好，话不多说，接下来手把手教你如何快速在 ui 中查看 py 代码 .</p><p>官方也考虑过这种情况，所以 设计师中 是有这个功能的，但是 qt 的是没问题的，pyqt 的毕竟是绑定过来的，所以正常来说 你点击之后会弹出一个找不到应用程序的提示 .</p><p>看到这个东西是不是很眼熟，我们用的命令 pyuic5 和这个东西应该是一样的 .</p><p><img src="/images/viewpyindesigner1.jpg" alt="viewpyindesigner1"></p><p>所以接下来，我们找找电脑上有没有这个东西</p><p><img src="/images/viewpyindesigner2.jpg" alt="viewpyindesigner2"></p><p>果然在 pyqt5-toos 文件夹下有这个东西，</p><p>我们根据第一张图的提示，把这个东西拷贝到相应的目录 (如果没有那个 bin 文件夹，手动创建),</p><p><img src="/images/viewpyindesigner3.jpg" alt="viewpyindesigner3"></p><p>好了，大功告成！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过 设计师  查看 ui 转换的 py 代码&lt;/p&gt;
&lt;p&gt;当初我刚学 pyqt 的时候，也有很多疑惑，用什么属性把控件加到布局，改了这个属性会发生什么，为什么这个会这样，那个会那样 。。。 。。。&lt;/p&gt;
&lt;p&gt;后来就看 ui 转成的 py 代码，注释一下，什么效果消失了，就是那个 api 引起的 。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="Designer" scheme="https://pyqt5.com/tags/Designer/"/>
    
    <category term="设计师" scheme="https://pyqt5.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5调整窗口显示边框</title>
    <link href="https://pyqt5.com/showframe.html"/>
    <id>https://pyqt5.com/showframe.html</id>
    <published>2019-04-26T14:19:26.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>windows</code>  某些场景下调整窗口大小或者移动后就会导致里面的内容重绘（速度慢，卡顿，闪烁），其实在以前 <code>windows</code>  在低配置设备为了减少这种频繁绘制的情况，默认会开启这种效果，不过目前设备越来越好了就关闭了该功能。具体是在控制面板中 -&gt; 调整 <code>Windows</code>  的外观和性能 -&gt; 去掉勾选 拖动时显示窗口内容。</p><span id="more"></span><p>由于这个开关是全局状态的，而我们只需要在自己的窗口中实现该效果有两种方式。</p><ol><li>一种是自己绘制一个边框效果，放开鼠标时才操作真正的窗口。</li><li>二是替换窗口的处理过程函数 <code>wndproc</code>  处理 <code>WM_NCLBUTTONDOWN</code>  消息事件。</li></ol><p>今天讲第二种方法：</p><ol><li>需要了解  <code>SystemParametersInfo</code>  API 函数</li><li><code>SPI_GETDRAGFULLWINDOWS</code> ：确定是否允许拖拉到最大窗口</li><li><code>SPI_SETDRAGFULLWINDOWS</code> ：设置是否允许拖至最大窗口</li></ol><p>效果就是这样的：</p><p><img src="/PyQt/Demo/ScreenShot/ShowFrameWhenDrag.gif" alt="ShowFrameWhenDrag"></p><p>正如图片所看的那样，窗体在移动的时候，窗体并没有绘制出来，而是绘制出窗体的边框，等到窗体不在移动的时候就直接把窗体图像数据全部绘制出来，这样就避免了窗体在移动的时候出现闪烁的现象。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h2><p><a href="https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py">https://github.com/PyQt5/PyQt/blob/master/Demo/ShowFrameWhenDrag.py</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年4月23日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: ShowFrameWhenDrag@description: 调整窗口显示边框"""</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> sizeof<span class="token punctuation">,</span> windll<span class="token punctuation">,</span> c_int<span class="token punctuation">,</span> byref<span class="token punctuation">,</span> c_long<span class="token punctuation">,</span> c_void_p<span class="token punctuation">,</span> c_ulong<span class="token punctuation">,</span> c_longlong<span class="token punctuation">,</span>\    c_ulonglong<span class="token punctuation">,</span> WINFUNCTYPE<span class="token punctuation">,</span> c_uint<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QLabel__Author__ <span class="token operator">=</span> <span class="token string">'Irony'</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">if</span> sizeof<span class="token punctuation">(</span>c_long<span class="token punctuation">)</span> <span class="token operator">==</span> sizeof<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    WPARAM <span class="token operator">=</span> c_ulong    LPARAM <span class="token operator">=</span> c_long<span class="token keyword">elif</span> sizeof<span class="token punctuation">(</span>c_longlong<span class="token punctuation">)</span> <span class="token operator">==</span> sizeof<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    WPARAM <span class="token operator">=</span> c_ulonglong    LPARAM <span class="token operator">=</span> c_longlongWM_NCLBUTTONDOWN <span class="token operator">=</span> <span class="token number">0x00a1</span>GWL_WNDPROC <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>SPI_GETDRAGFULLWINDOWS <span class="token operator">=</span> <span class="token number">38</span>SPI_SETDRAGFULLWINDOWS <span class="token operator">=</span> <span class="token number">37</span>WNDPROC <span class="token operator">=</span> WINFUNCTYPE<span class="token punctuation">(</span>c_long<span class="token punctuation">,</span> c_void_p<span class="token punctuation">,</span> c_uint<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    CallWindowProc <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>CallWindowProcW    SetWindowLong <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowLongW    SystemParametersInfo <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SystemParametersInfoW<span class="token keyword">except</span><span class="token punctuation">:</span>    CallWindowProc <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>CallWindowProcA    SetWindowLong <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowLongA    SystemParametersInfo <span class="token operator">=</span> windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SystemParametersInfoA<span class="token keyword">def</span> <span class="token function">GetDragFullwindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rv <span class="token operator">=</span> c_int<span class="token punctuation">(</span><span class="token punctuation">)</span>    SystemParametersInfo<span class="token punctuation">(</span>SPI_GETDRAGFULLWINDOWS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byref<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> rv<span class="token punctuation">.</span>value<span class="token keyword">def</span> <span class="token function">SetDragFullwindows</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    SystemParametersInfo<span class="token punctuation">(</span>SPI_SETDRAGFULLWINDOWS<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">'拖动或者调整窗口试试看'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 重点替换窗口处理过程</span>        self<span class="token punctuation">.</span>_newwndproc <span class="token operator">=</span> WNDPROC<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_wndproc<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_oldwndproc <span class="token operator">=</span> SetWindowLong<span class="token punctuation">(</span>            <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>winId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GWL_WNDPROC<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_newwndproc<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_wndproc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> msg <span class="token operator">==</span> WM_NCLBUTTONDOWN<span class="token punctuation">:</span>            <span class="token comment"># 获取系统本身是否已经开启</span>            isDragFullWindow <span class="token operator">=</span> GetDragFullwindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> isDragFullWindow <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment"># 开启虚线框</span>                SetDragFullwindows<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment"># 系统本身处理</span>                ret <span class="token operator">=</span> CallWindowProc<span class="token punctuation">(</span>                    self<span class="token punctuation">.</span>_oldwndproc<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span>                <span class="token comment"># 关闭虚线框</span>                SetDragFullwindows<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> ret        <span class="token keyword">return</span> CallWindowProc<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_oldwndproc<span class="token punctuation">,</span> hwnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wparam<span class="token punctuation">,</span> lparam<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="片尾"><a class="markdownIt-Anchor" href="#片尾">#</a> 片尾</h2><p>替换窗口过程可以处理很多系统窗口的处理过程，更多需要读者自行去发现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;windows&lt;/code&gt;  某些场景下调整窗口大小或者移动后就会导致里面的内容重绘（速度慢，卡顿，闪烁），其实在以前 &lt;code&gt;windows&lt;/code&gt;  在低配置设备为了减少这种频繁绘制的情况，默认会开启这种效果，不过目前设备越来越好了就关闭了该功能。具体是在控制面板中 -&amp;gt; 调整 &lt;code&gt;Windows&lt;/code&gt;  的外观和性能 -&amp;gt; 去掉勾选 拖动时显示窗口内容。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="边框" scheme="https://pyqt5.com/tags/%E8%BE%B9%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5判断信号是否连接</title>
    <link href="https://pyqt5.com/issignalconnected.html"/>
    <id>https://pyqt5.com/issignalconnected.html</id>
    <published>2019-04-26T14:06:26.000Z</published>
    <updated>2024-04-30T01:46:52.392Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>PyQt</code>  中某些情况下需要取消原来的信号连接，此时需要使用 <code>disconnect</code>  方法，但是在逻辑不严谨的情况下可能会导致多次调用 <code>disconnect</code>  方法而导致报错，当然可以通过 try except 来包裹代码。这里通过  <code>isSignalConnected</code>  来判断信号是否连接。</p><span id="more"></span><p>在 QOjbect 文档中这样写到：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static const QMetaMethod valueChangedSignal &#x3D; QMetaMethod::fromSignal(&amp;MyObject::valueChanged);if (isSignalConnected(valueChangedSignal)) &#123;    QByteArray data;    data &#x3D; get_the_value();       &#x2F;&#x2F; expensive operation    emit valueChanged(data);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过直接传入信号就行了，但是这在 PyQt 中不可行。需要这么做</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on 2019年2月24日@author: Irony@site: https://pyqt5.com https://github.com/892768447@email: 892768447@qq.com@file: IsSignalConnected@description: 判断信号是否连接"""</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QTextBrowser__Author__ <span class="token operator">=</span> <span class="token triple-quoted-string string">"""By: IronyQQ: 892768447Email: 892768447@qq.com"""</span>__Copyright__ <span class="token operator">=</span> <span class="token string">'Copyright (c) 2019 Irony'</span>__Version__ <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button1 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'已连接'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> clicked<span class="token operator">=</span>self<span class="token punctuation">.</span>doTest<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'未连接'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retView <span class="token operator">=</span> QTextBrowser<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">)</span>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>retView<span class="token punctuation">)</span>    <span class="token keyword">def</span> doTest<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>retView<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""        # button1 clicked 是否连接: %s        # button2 clicked 是否连接: %s        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>            self<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">,</span> <span class="token string">'clicked()'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">,</span> <span class="token string">'clicked()'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> isSignalConnected<span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断信号是否连接        :param obj:        对象        :param name:       信号名，如 clicked()        """</span>        index <span class="token operator">=</span> obj<span class="token punctuation">.</span>metaObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>indexOfMethod<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            method <span class="token operator">=</span> obj<span class="token punctuation">.</span>metaObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>method<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            <span class="token keyword">if</span> method<span class="token punctuation">:</span>                <span class="token keyword">return</span> obj<span class="token punctuation">.</span>isSignalConnected<span class="token punctuation">(</span>method<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> Window<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图">#</a> 效果图</h2><p><img src="/PyQt/Demo/ScreenShot/IsSignalConnected.png" alt="IsSignalConnected"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;PyQt&lt;/code&gt;  中某些情况下需要取消原来的信号连接，此时需要使用 &lt;code&gt;disconnect&lt;/code&gt;  方法，但是在逻辑不严谨的情况下可能会导致多次调用 &lt;code&gt;disconnect&lt;/code&gt;  方法而导致报错，当然可以通过 try except 来包裹代码。这里通过  &lt;code&gt;isSignalConnected&lt;/code&gt;  来判断信号是否连接。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://pyqt5.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PyQt" scheme="https://pyqt5.com/tags/PyQt/"/>
    
    <category term="信号" scheme="https://pyqt5.com/tags/%E4%BF%A1%E5%8F%B7/"/>
    
  </entry>
  
</feed>
